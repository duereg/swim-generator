{"version":3,"file":"swim-generator.es6.js","sources":["../lib/data/patterns.json","../lib/getThingViaTimeLimit.js","../lib/data/swims.json","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["[\n  {\n    \"repeat\": true,\n    \"minTime\": 0,\n    \"name\": \"repeating intervals\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"c\", \"interval\": [1,4] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 400,\n    \"intervalSize\": 4,\n    \"name\": \"100 pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [2,4] },\n      { \"group\": \"b\", \"interval\": [1,8] },\n      { \"group\": \"c\", \"interval\": [2,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 480,\n    \"intervalSize\": 4,\n    \"name\": \"Short 200 pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [6,2] },\n      { \"group\": \"b\", \"interval\": [3,4] },\n      { \"group\": \"c\", \"interval\": [2,6] },\n      { \"group\": \"b\", \"interval\": [3,4] },\n      { \"group\": \"a\", \"interval\": [6,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1200,\n    \"intervalSize\": 12,\n    \"name\": \"150 pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"c\", \"interval\": [1,4] },\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 560,\n    \"intervalSize\": 4,\n    \"name\": \"200 binary\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"b\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"c\", \"interval\": [1,6] },\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"b\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [3,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 840,\n    \"intervalSize\": 6,\n    \"name\": \"300 binary\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [2,4] },\n      { \"group\": \"a\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [2,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 400,\n    \"intervalSize\": 5,\n    \"name\": \"decline\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [2,4] },\n      { \"group\": \"c\", \"interval\": [4,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 480,\n    \"intervalSize\": 5,\n    \"name\": \"short decline\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,4] },\n      { \"group\": \"b\", \"interval\": [4,4] },\n      { \"group\": \"a\", \"interval\": [4,4] },\n      { \"group\": \"b\", \"interval\": [4,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1600,\n    \"intervalSize\": 8,\n    \"name\": \"4x4\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [3,4] },\n      { \"group\": \"b\", \"interval\": [4,3] },\n      { \"group\": \"a\", \"interval\": [3,4] },\n      { \"group\": \"b\", \"interval\": [4,3] },\n      { \"group\": \"a\", \"interval\": [3,4] },\n      { \"group\": \"b\", \"interval\": [4,3] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1440,\n    \"intervalSize\": 8,\n    \"name\": \"100's and 75's\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] },\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] },\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] },\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1280,\n    \"intervalSize\": 8,\n    \"name\": \"200's and 50's\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [10,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1000,\n    \"intervalSize\": 40,\n    \"name\": \"10x100\"\n  }\n]\n","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","[\n  {\n    \"name\": \"HUHO\",\n    \"interval\": 1,\n    \"time\": 25\n  },\n  {\n    \"name\": \"HOHU\",\n    \"interval\": 1,\n    \"time\": 25\n  },\n  {\n    \"name\": \"FU\",\n    \"interval\": 1,\n    \"time\": 30\n  },\n  {\n    \"name\": \"BOGDAT\",\n    \"interval\": 1,\n    \"time\": 30\n  },\n  {\n    \"name\": \"Swim\",\n    \"interval\": 1,\n    \"time\": 20\n  },\n  {\n    \"name\": \"Kick\",\n    \"interval\": 2,\n    \"time\": 45\n  },\n  {\n    \"name\": \"OU\",\n    \"interval\": 2,\n    \"time\": 50\n  },\n  {\n    \"name\": \"UO\",\n    \"interval\": 2,\n    \"time\": 50\n  },\n  {\n    \"name\": \"OUO\",\n    \"interval\": 3,\n    \"time\": 70\n  },\n  {\n    \"name\": \"UOU\",\n    \"interval\": 3,\n    \"time\": 75\n  },\n  {\n    \"name\": \"TOFU\",\n    \"interval\": 4,\n    \"time\": 100\n  }\n]\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  console.log(pattern);\n\n  return pattern;\n}\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["getThingViaTimeLimit","key","secondsLeft","things","number","filteredThings","_","filter","thing","sample","repeatIntervals","generatedPattern","log","seconds","selectedSwim","swims","name","time","timeLeft","maxRepetition","Math","floor","interval","intervalLength","random","secondsToAdd","intervals","push","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","set","swimLength","group","min","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","sets","length","forEach","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","type","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","minTime","repeat","generateWorkout"],"mappings":"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"}