{"version":3,"file":"swim-generator.umd.js","sources":["../lib/data/patterns.json","../lib/getThingViaTimeLimit.js","../lib/data/swims.json","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["[\n  {\n    \"repeat\": true,\n    \"minTime\": 0,\n    \"name\": \"repeating intervals\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"c\", \"interval\": [1,4] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 400,\n    \"intervalSize\": 4,\n    \"name\": \"pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"c\", \"interval\": [1,4] },\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 560,\n    \"intervalSize\": 4,\n    \"name\": \"200 binary\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"b\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"c\", \"interval\": [1,6] },\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"b\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [3,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 840,\n    \"intervalSize\": 6,\n    \"name\": \"300 binary\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [2,4] },\n      { \"group\": \"a\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [2,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 400,\n    \"intervalSize\": 5,\n    \"name\": \"decline\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,4] },\n      { \"group\": \"b\", \"interval\": [4,4] },\n      { \"group\": \"a\", \"interval\": [4,4] },\n      { \"group\": \"b\", \"interval\": [4,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1600,\n    \"intervalSize\": 8,\n    \"name\": \"4x4\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [10,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1000,\n    \"intervalSize\": 40,\n    \"name\": \"10x100\"\n  }\n]\n","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","[\n  {\n    \"name\": \"HUHO\",\n    \"interval\": 1,\n    \"time\": 25\n  },\n  {\n    \"name\": \"HOHU\",\n    \"interval\": 1,\n    \"time\": 25\n  },\n  {\n    \"name\": \"FU\",\n    \"interval\": 1,\n    \"time\": 30\n  },\n  {\n    \"name\": \"BOGDAT\",\n    \"interval\": 1,\n    \"time\": 30\n  },\n  {\n    \"name\": \"Swim\",\n    \"interval\": 1,\n    \"time\": 20\n  },\n  {\n    \"name\": \"Kick\",\n    \"interval\": 2,\n    \"time\": 45\n  },\n  {\n    \"name\": \"OU\",\n    \"interval\": 2,\n    \"time\": 50\n  },\n  {\n    \"name\": \"UO\",\n    \"interval\": 2,\n    \"time\": 50\n  },\n  {\n    \"name\": \"OUO\",\n    \"interval\": 3,\n    \"time\": 70\n  },\n  {\n    \"name\": \"UOU\",\n    \"interval\": 3,\n    \"time\": 75\n  },\n  {\n    \"name\": \"TOFU\",\n    \"interval\": 4,\n    \"time\": 100\n  }\n]\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction doubleLengths(pattern) {\n  console.log('doubleLengths');\n\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds > 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  console.log(pattern);\n\n  while (seconds - pattern.seconds > 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  console.log(pattern);\n\n  return pattern;\n}\n"],"names":[],"mappings":"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"}