{"version":3,"file":"swim-generator.umd.js","sources":["../lib/data/patterns.json","../lib/getThingViaTimeLimit.js","../lib/data/swims.json","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["[\n  {\n    \"repeat\": true,\n    \"minTime\": 0,\n    \"name\": \"repeating intervals\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"c\", \"interval\": [1,4] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 400,\n    \"intervalSize\": 4,\n    \"name\": \"100 pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [2,4] },\n      { \"group\": \"b\", \"interval\": [1,8] },\n      { \"group\": \"c\", \"interval\": [2,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 480,\n    \"intervalSize\": 4,\n    \"name\": \"Short 200 pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [6,2] },\n      { \"group\": \"b\", \"interval\": [3,4] },\n      { \"group\": \"c\", \"interval\": [2,6] },\n      { \"group\": \"b\", \"interval\": [3,4] },\n      { \"group\": \"a\", \"interval\": [6,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1200,\n    \"intervalSize\": 12,\n    \"name\": \"150 pyramid\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"c\", \"interval\": [1,4] },\n      { \"group\": \"a\", \"interval\": [4,1] },\n      { \"group\": \"b\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [4,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 560,\n    \"intervalSize\": 4,\n    \"name\": \"200 binary\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"b\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"c\", \"interval\": [1,6] },\n      { \"group\": \"a\", \"interval\": [3,2] },\n      { \"group\": \"b\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [3,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 840,\n    \"intervalSize\": 6,\n    \"name\": \"300 binary\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [2,4] },\n      { \"group\": \"a\", \"interval\": [2,3] },\n      { \"group\": \"a\", \"interval\": [2,2] },\n      { \"group\": \"a\", \"interval\": [2,1] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 400,\n    \"intervalSize\": 5,\n    \"name\": \"decline\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [2,4] },\n      { \"group\": \"c\", \"interval\": [4,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 480,\n    \"intervalSize\": 5,\n    \"name\": \"short decline\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [4,4] },\n      { \"group\": \"b\", \"interval\": [4,4] },\n      { \"group\": \"a\", \"interval\": [4,4] },\n      { \"group\": \"b\", \"interval\": [4,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1600,\n    \"intervalSize\": 8,\n    \"name\": \"4x4\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [3,4] },\n      { \"group\": \"b\", \"interval\": [4,3] },\n      { \"group\": \"a\", \"interval\": [3,4] },\n      { \"group\": \"b\", \"interval\": [4,3] },\n      { \"group\": \"a\", \"interval\": [3,4] },\n      { \"group\": \"b\", \"interval\": [4,3] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1440,\n    \"intervalSize\": 8,\n    \"name\": \"100's and 75's\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] },\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] },\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] },\n      { \"group\": \"a\", \"interval\": [1,8] },\n      { \"group\": \"b\", \"interval\": [4,2] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1280,\n    \"intervalSize\": 8,\n    \"name\": \"200's and 50's\"\n  },\n  {\n    \"pattern\": [\n      { \"group\": \"a\", \"interval\": [10,4] }\n    ],\n    \"repeat\": false,\n    \"minTime\": 1000,\n    \"intervalSize\": 40,\n    \"name\": \"10x100\"\n  }\n]\n","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","[\n  {\n    \"name\": \"HUHO\",\n    \"interval\": 1,\n    \"time\": 25\n  },\n  {\n    \"name\": \"HOHU\",\n    \"interval\": 1,\n    \"time\": 25\n  },\n  {\n    \"name\": \"FU\",\n    \"interval\": 1,\n    \"time\": 30\n  },\n  {\n    \"name\": \"BOGDAT\",\n    \"interval\": 1,\n    \"time\": 30\n  },\n  {\n    \"name\": \"Swim\",\n    \"interval\": 1,\n    \"time\": 20\n  },\n  {\n    \"name\": \"Kick\",\n    \"interval\": 2,\n    \"time\": 45\n  },\n  {\n    \"name\": \"OU\",\n    \"interval\": 2,\n    \"time\": 50\n  },\n  {\n    \"name\": \"UO\",\n    \"interval\": 2,\n    \"time\": 50\n  },\n  {\n    \"name\": \"OUO\",\n    \"interval\": 3,\n    \"time\": 70\n  },\n  {\n    \"name\": \"UOU\",\n    \"interval\": 3,\n    \"time\": 75\n  },\n  {\n    \"name\": \"TOFU\",\n    \"interval\": 4,\n    \"time\": 100\n  }\n]\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  console.log(pattern);\n\n  return pattern;\n}\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["getThingViaTimeLimit","key","secondsLeft","things","number","filteredThings","_","filter","thing","sample","repeatIntervals","generatedPattern","console","log","seconds","selectedSwim","swims","name","time","timeLeft","maxRepetition","Math","floor","interval","intervalLength","random","secondsToAdd","intervals","push","type","length","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","set","swimLength","group","min","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","sets","forEach","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","minTime","repeat","generateWorkout"],"mappings":"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"}