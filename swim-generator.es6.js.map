{"version":3,"file":"swim-generator.es6.js","sources":["../lib/data/warmups.js","../lib/workoutGenerator.js","../lib/data/mainSetConfigs.js","../lib/data/cooldowns.js","../lib/workoutComponents.js","../lib/css.js","../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["// Warmup options based on various sources [2, 5, 7, 8, 11, 13, 15, 17, 19, 20]\nconst warmups = [\n    { desc: \"200 no fins, 200 w fins swim\", dist: 400, type: \"swim\" }, //[2]\n    { desc: \"400 warmup (75 kick, 25 under)\", dist: 400, type: \"kick\" }, //[5]\n    { desc: \"250 pull warmup, 250 swim warmup\", dist: 500, type: \"pull/swim\" }, //[20]\n    { desc: \"250 warmup\", dist: 250, type: \"general\" }, //[8, 13]\n    { desc: \"200 warm up\", dist: 200, type: \"general\" }, //[7]\n    { desc: \"500 warmup\", dist: 500, type: \"general\" }, //[11, 17]\n    { desc: \"300 warm up\", dist: 300, type: \"general\" }, //[15]\n    { desc: \"150 warm up\", dist: 150, type: \"general\" }, //[19]\n];\n\n// Option for no warmup, as seen in some sources [1, 9]\nconst NO_WARM_UP_BITCHES = { desc: \"No warmup bitches\", dist: 0, type: \"none\" }; //[1]\n\n/**\n * Selects a warmup routine.\n * There's a 90% chance of selecting a warmup from the availableWarmups array,\n * and a 10% chance of selecting the noWarmupOption.\n *\n * @param {Array<Object>} availableWarmups - An array of warmup objects. Each object should have at least 'desc' and 'dist' properties.\n * @param {Object} noWarmupOption - An object representing the option of no warmup. Should have 'desc' and 'dist'.\n * @returns {Object} The selected warmup object.\n */\nfunction selectWarmup() {\n    const useWarmup = Math.random() > 0.1; // 90% chance of including a warmup\n\n    if (useWarmup) {\n        return warmups[Math.floor(Math.random() * warmups.length)];\n    } else {\n        return NO_WARM_UP_BITCHES;\n    }\n}\n\nfunction generateWarmup(totalDistanceYards, shortWorkoutThreshold) {\n    let selectedWarmup;\n\n    if (totalDistanceYards < shortWorkoutThreshold) {\n        selectedWarmup = { ...NO_WARM_UP_BITCHES, desc: \"No warmup (short workout)\" };\n    } else {\n        selectedWarmup = selectWarmup(); \n\n        if (selectedWarmup && selectedWarmup.dist > 0) {\n            const minMainSetThreshold = 200;\n            let maxAllowedWarmupDist = totalDistanceYards - minMainSetThreshold;\n\n            // Apply the more stringent percentage cap: 0.4 (40%) instead of 0.6\n            maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.4);\n\n            if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) {\n                maxAllowedWarmupDist = totalDistanceYards * 0.4; // Fallback for small total distances if threshold makes it negative\n            } // End of the \"maxAllowedWarmupDist < 0\" check\n\n            if (maxAllowedWarmupDist < 50 && totalDistanceYards >= 50) {\n                maxAllowedWarmupDist = 50;\n            }\n            // Add a final guard if maxAllowedWarmupDist somehow ended up negative (e.g. if totalDistanceYards was < 50 but > 0)\n            if (maxAllowedWarmupDist < 0) maxAllowedWarmupDist = 0;\n\n            if (selectedWarmup.dist > maxAllowedWarmupDist) {\n                const suitableWarmups = warmups.filter(wu => wu.dist <= maxAllowedWarmupDist && wu.dist > 0);\n                if (suitableWarmups.length > 0) {\n                    selectedWarmup = suitableWarmups[Math.floor(Math.random() * suitableWarmups.length)];\n                } else {\n                    selectedWarmup = NO_WARM_UP_BITCHES;\n                }\n            }\n        } else if (!selectedWarmup || selectedWarmup.dist === 0) {\n            selectedWarmup = NO_WARM_UP_BITCHES;\n        }\n    }\n\n    return selectedWarmup;\n}\n\nexport { generateWarmup, warmups, NO_WARM_UP_BITCHES };\n","// lib/workoutGenerator.js - V3_SCHEMA_UPDATE_MARKER_GENERATOR\nimport _ from 'lodash';\n\n// --- Helper Functions ---\n\nexport function calculateTargetPace(cssSecondsPer100, paceConfig) {\n    if (!paceConfig || typeof cssSecondsPer100 !== 'number') {\n        return cssSecondsPer100;\n    }\n    let pace = cssSecondsPer100;\n    const offset = paceConfig.offset || 0;\n    const randomRange = paceConfig.randomRange || 0;\n    let randomComponent = 0;\n    if (randomRange > 0) {\n        randomComponent = Math.random() * randomRange;\n    }\n    const totalAdjustment = offset + randomComponent;\n    if (paceConfig.operator === \"+\") {\n        pace += totalAdjustment;\n    } else if (paceConfig.operator === \"-\") {\n        pace -= totalAdjustment;\n    }\n    return pace;\n}\n\nexport function formatDescriptiveMessage(template, params) {\n    if (!template) return \"No descriptive message template provided.\";\n    let message = template;\n    for (const key in params) {\n        if (params[key] !== undefined) {\n            message = message.replace(new RegExp(`{${key}}`, 'g'), params[key]);\n        }\n    }\n    message = message.replace(/{[^}]+}/g, '');\n    return message.trim();\n}\n\nexport function formatSetString(setInfo, energySystem, formatConfig) {\n    let structure = formatConfig.baseStructure || \"{reps}x{dist} {activity} ({energySystem} focus) {rest}\";\n    structure = structure.replace(\"{reps}\", setInfo.reps);\n    structure = structure.replace(\"{dist}\", setInfo.dist);\n    structure = structure.replace(\"{activity}\", setInfo.activity || formatConfig.defaultActivity || \"swim\");\n    structure = structure.replace(\"{energySystem}\", energySystem);\n    structure = structure.replace(\"{rest}\", setInfo.restString || \"\");\n    structure = structure.replace(\"{paceDesc}\", setInfo.paceDesc || \"\");\n    structure = structure.replace(\"{notes}\", setInfo.notes || \"\"); // Added notes\n    structure = structure.trim().replace(/\\s\\s+/g, ' ').replace(/\\s\\(@/g, ' @').replace(/\\s\\(\\s*,/g, ' (').replace(/,\\s*\\)/g, ')').replace(/\\(\\s*\\)/g, ''); // Clean up\n    if (setInfo.setRest === \"rest 0 seconds\") {\n        return structure;\n    } else {\n        return structure + \"\\n  - \" + setInfo.setRest;\n    }\n}\n\n// --- Main Generator Function ---\nexport function generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, strategyConfig) {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = 0;\n    let descriptiveMessage = \"\";\n\n    if (!strategyConfig) {\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: \"Error: Workout configuration not provided.\" };\n    }\n\n    targetPacePer100 = calculateTargetPace(cssSecondsPer100, strategyConfig.paceConfig);\n\n    const strategyResult = generateSet(strategyConfig, remainingDistanceForMainSet)\n    const paceDescription = generatePaceSummary(strategyConfig);\n\n    if (strategyResult && strategyResult.generatedSets && strategyResult.generatedSets.length > 0 && strategyResult.totalDistance > 0) {\n        mainSetTotalDist = strategyResult.totalDistance;\n        strategyResult.generatedSets.forEach(item => {\n            sets.push(formatSetString(item, energySystem, strategyConfig.setFormatting));\n        });\n\n        descriptiveMessage = formatDescriptiveMessage(strategyConfig.descriptiveMessages.success, {\n            workoutTypeName: strategyConfig.workoutTypeName,\n            setSummary: strategyResult.strategySpecificSummary || \"Set generated\",\n            energySystem: energySystem,\n            totalDistance: String(mainSetTotalDist),\n            paceDescription\n        });\n\n    } else {\n        mainSetTotalDist = 0;\n        descriptiveMessage = formatDescriptiveMessage(strategyConfig.descriptiveMessages.fail, {\n            workoutTypeName: strategyConfig.workoutTypeName,\n            energySystem: energySystem,\n            totalDistance: String(remainingDistanceForMainSet),\n            setSummary: strategyResult?.strategySpecificSummary || \"No sets generated by strategy.\",\n            paceDescription\n        });\n    }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n}\n\nexport function generatePaceSummary(strategyConfig) {\n    let paceSummaryText = \"CSS\";\n    if (strategyConfig && strategyConfig.paceConfig) {\n        const pc = strategyConfig.paceConfig;\n        if (pc.offset === 0 && !pc.randomRange) { /* paceSummaryText already \"CSS\" */ }\n        else if (pc.operator && (pc.offset || pc.randomRange)) {\n            let basePaceDesc = \"CSS \";\n            let offsetPart = \"\";\n            if (pc.offset) {\n                offsetPart = `${pc.operator}${pc.offset}`;\n            }\n            if (pc.randomRange) {\n                const rangeEnd = pc.offset + pc.randomRange;\n                if (pc.offset && Math.abs(rangeEnd) !== Math.abs(pc.offset)) {\n                    offsetPart += `-${Math.abs(rangeEnd)}`;\n                } else if (!pc.offset) {\n                    offsetPart = `${pc.operator}0-${Math.abs(pc.randomRange)}`;\n                }\n            }\n            paceSummaryText = basePaceDesc + offsetPart + \"s/100m\";\n        }\n    }\n    return paceSummaryText;\n}\n\nexport function generateSet(strategyConfig, setDistance) {\n    let remainingDistance = setDistance;\n\n    const { setDefinitions } = strategyConfig; \n    const shuffledSetDefinitions = _.shuffle(setDefinitions);\n    const output = {\n        generatedSets: [],\n        totalDistance: 0, //bestOption.totalYardage,\n        strategySpecificSummary: \"\", //`${bestOption.reps}x${chosenSetDef.distance}` \n    }; \n\n    for (const setDef of shuffledSetDefinitions) { // Iterate over shuffledSetDefinitions\n        const currentDist = setDef.distance;\n        if (setDef.repScheme.type === \"dynamic\" && remainingDistance >= currentDist) {\n            let currentReps = Math.floor(remainingDistance / currentDist);\n            if (currentReps === 0) continue;\n\n            const maxReps = setDef.repScheme.maxReps || Infinity;\n            currentReps = Math.min(currentReps, maxReps);\n            \n            if (currentReps > 0) {\n                const currentTotalYardage = currentReps * currentDist;\n                remainingDistance -= currentTotalYardage;\n\n                const rest = `r${setDef.rest}`;\n                const setInfo = {\n                    reps: currentReps,\n                    dist: setDef.distance,\n                    restString: rest,\n                    activity: setDef.activity || strategyConfig.setFormatting.defaultActivity || \"kick\",  \n                    setRest: `rest ${strategyConfig.setRest} seconds`,\n                    rest\n                };\n\n                output.generatedSets.push(setInfo);\n                output.totalDistance += currentTotalYardage;\n                output.strategySpecificSummary += `${currentReps}x${setDef.distance}\\n`;\n            }\n        }\n    }\n\n    if (output.generatedSets.length) {\n        return output;\n    }\n    return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"No suitable reps found.\" };\n}","export const ENDURANCE_BASE_CONFIG = {\n    workoutTypeName: \"EN1\",\n    minTotalDistanceForSet: 500,\n    paceConfig: { baseMetric: \"css\", offset: 5, randomRange: 10, operator: \"+\" },\n    setDefinitions: [\n        { distance: 500, repScheme: { type: \"dynamic\", maxReps: 8 }, activity: \"swim/kick\", rest: 60 },\n        { distance: 600, repScheme: { type: \"dynamic\", maxReps: 6 }, activity: \"swim/kick\", rest: 60 },\n        { distance: 700, repScheme: { type: \"dynamic\", maxReps: 5 }, activity: \"swim/kick\", rest: 60 },\n        { distance: 800, repScheme: { type: \"dynamic\", maxReps: 4 }, activity: \"swim/kick\", rest: 60 },\n        { distance: 900, repScheme: { type: \"dynamic\", maxReps: 3 }, activity: \"swim/kick\", rest: 60 },\n        { distance: 1000, repScheme: { type: \"dynamic\", maxReps: 2 }, activity: \"swim/kick\", rest: 60 },\n    ],\n    setRest: 0,\n    setFormatting: { baseStructure: \"{reps}x{dist} {activity} ({energySystem} focus) {rest}\", defaultActivity: \"swim/kick\" },\n    descriptiveMessages: {\n        success: \"EN1: {setSummary} ({energySystem}), CSS +5-15s/100m pace guide, 60\\\" rest.\",\n        tooShort: \"EN1: Too short. Min rep distance {minRepDistForType}, available: {remainingDistance}.\",\n        fail: \"EN1: Could not fit EN1 reps for {energySystem}. Available: {remainingDistance}.\"\n    }\n};\n\nexport const GENERAL_ENDURANCE_CONFIG = {\n    workoutTypeName: \"General Endurance\",\n    paceConfig: { baseMetric: \"css\", offset: 0, operator: \"+\" },\n    setDefinitions: [\n        { distance: 500, repScheme: { type: \"dynamic\", maxReps: Infinity }, rest: 60 },\n        { distance: 400, repScheme: { type: \"dynamic\", maxReps: Infinity }, rest: 60 },\n        { distance: 300, repScheme: { type: \"dynamic\", maxReps: Infinity }, rest: 45 },\n        { distance: 200, repScheme: { type: \"dynamic\", maxReps: Infinity }, rest: 30 },\n        { distance: 100, repScheme: { type: \"dynamic\", maxReps: Infinity }, rest: 20 },\n        { distance: 50, repScheme: { type: \"dynamic\", maxReps: Infinity }, rest: 15 },\n    ],\n    setRest: 0,\n    setFormatting: { baseStructure: \"{reps}x{dist} swim ({energySystem} focus) {rest}\", defaultActivity: \"swim\" },\n    descriptiveMessages: {\n        success: \"General Endurance ({energySystem}) default set. {setSummary}\",\n        tooShort: \"General Endurance ({energySystem}) set - too short. Available: {remainingDistance}.\",\n        fail: \"General Endurance ({energySystem}): Could not fit set. Available: {remainingDistance}.\"\n    }\n};\n\nexport const MAX_SPRINT_CONFIG = {\n    workoutTypeName: \"SP2\",\n    paceConfig: { baseMetric: \"css\", offset: 10, randomRange: 5, operator: \"-\" },\n\n    setDefinitions: [\n        { distance: 25, repScheme: { type: \"dynamic\", maxReps: 20 }, activity: \"UW sprint\", notes: \"breath at wall\", rest: 60 },\n        { distance: 50, repScheme: { type: \"dynamic\", maxReps: 10 }, activity: \"UW sprint\", notes: \"breath at wall\", rest: 120 },\n    ],\n\n    setRest: 60 * 5,\n    setFormatting: { baseStructure: \"{reps}x{dist} {activity} ({energySystem} focus, {notes}) {rest}\", defaultActivity: \"UW sprint\" },\n    descriptiveMessages: {\n        success: \"SP2: Lactate Production ({energySystem}), Near Max Effort. Set: {setSummary}. Total ~{totalDistance}yds.\",\n        tooShort: \"SP2: Too short. Min rep 25. Available: {remainingDistance}.\",\n        fail: \"SP2: Could not fit SP2 set. Available: {remainingDistance} (target yardage for SP2 is typically 300-600).\"\n    }\n};\n\nexport const SPEED_ENDURANCE_CONFIG = {\n    workoutTypeName: \"SP1\",\n    paceConfig: { baseMetric: \"css\", offset: 3, randomRange: 2, operator: \"-\" },\n\n    setDefinitions: [\n        { distance: 25, repScheme: { type: \"dynamic\", maxReps: 32 }, rest: 20 },\n        { distance: 50, repScheme: { type: \"dynamic\", maxReps: 16 }, rest: 30 },\n        { distance: 75, repScheme: { type: \"dynamic\", maxReps: 12 }, rest: 40 },\n        { distance: 100, repScheme: { type: \"dynamic\", maxReps: 8 }, rest: 45 },\n        { distance: 200, repScheme: { type: \"dynamic\", maxReps: 4 }, rest: 60 },\n    ],\n\n    setRest: 90,\n    setFormatting: { baseStructure: \"{reps}x{dist} {activity} ({energySystem} focus) {rest}\" },\n    descriptiveMessages: {\n        success: \"SP1: Lactate Tolerance ({energySystem}), CSS -3-5s. Total ~{totalDistance}yds.\",\n        tooShort: \"SP1: Too short. Min rep 25. Available: {remainingDistance}.\",\n        fail: \"SP1: Could not fit SP1 set. Available: {remainingDistance} (target yardage for SP1 is typically 400-800).\"\n    }\n};\n\nexport const THRESHOLD_DEVELOPMENT_CONFIG = {\n    workoutTypeName: \"EN3\",\n    paceConfig: { baseMetric: \"css\", offset: 1, randomRange: 1, operator: \"-\" },\n\n    setDefinitions: [\n        { id: 'Nx400_css_r50', distance: 400, repScheme: { type: \"dynamic\", maxReps: 18 }, rest: 50 },\n        { id: 'Nx500_css_r60', distance: 500, repScheme: { type: \"dynamic\", maxReps: 14 }, rest: 60 },\n        { id: 'Nx600_css_r90', distance: 600, repScheme: { type: \"dynamic\", maxReps: 12 }, rest: 90 },\n    ],\n\n    setRest: 0,\n    setFormatting: { baseStructure: \"{reps}x{dist} {energySystem} focus swim @ {paceDesc} {rest}\", defaultActivity: \"swim\" },\n    descriptiveMessages: {\n        success: \"EN3: {setSummary} ({energySystem}) @ {paceDescription}.\",\n        tooShort: \"EN3: Too short for EN3 sets (min rep {minRepDistForType}). Available: {remainingDistance}.\",\n        fail: \"EN3: Could not fit standard or fallback EN3 set for {energySystem}. Available: {remainingDistance}.\"\n    }\n};\n\nexport const THRESHOLD_SUSTAINED_CONFIG = {\n    workoutTypeName: \"EN2\",\n    paceConfig: { baseMetric: \"css\", offset: 0, operator: \"+\" },\n    setDefinitions: [\n        { id: '18x100_css_r10', distance: 100, repScheme: { type: 'dynamic', maxReps: 18 }, rest: 10 },\n        { id: '10x200_css_r20', distance: 200, repScheme: { type: 'dynamic', maxReps: 10 }, rest: 20 },\n        { id: 'Nx400_css_r40', distance: 400, repScheme: { type: 'dynamic', maxReps: 18 }, rest: 40 },\n        { id: 'Nx500_css_r50', distance: 500, repScheme: { type: 'dynamic', maxReps: 14 }, rest: 50 },\n        { id: 'Nx600_css_r60', distance: 600, repScheme: { type: 'dynamic', maxReps: 12 }, rest: 60 },\n        { id: 'Nx800_css_r90', distance: 800, repScheme: { type: 'dynamic', maxReps: 8 }, rest: 90 },\n        { id: 'Nx1000_css_r90', distance: 1000, repScheme: { type: 'dynamic', maxReps: 6 }, rest: 90 }\n    ],\n    setRest: 150,\n    setFormatting: { baseStructure: \"{reps}x{dist} {energySystem} focus swim @ {paceDesc} {rest}\", defaultActivity: \"swim\" },\n    descriptiveMessages: {\n        success: \"EN2: {setSummary} ({energySystem}) @ CSS.\",\n        tooShort: \"EN2: Too short for EN2 sets. Available: {remainingDistance}.\",\n        fail: \"EN2: Could not fit standard EN2 set for {energySystem}. Available: {remainingDistance}.\"\n    }\n};\n\nexport const ALL_WORKOUT_CONFIGS = {\n    ENDURANCE_BASE: ENDURANCE_BASE_CONFIG,\n    GENERAL_ENDURANCE: GENERAL_ENDURANCE_CONFIG,\n    MAX_SPRINT: MAX_SPRINT_CONFIG,\n    SPEED_ENDURANCE: SPEED_ENDURANCE_CONFIG,\n    THRESHOLD_DEVELOPMENT: THRESHOLD_DEVELOPMENT_CONFIG,\n    THRESHOLD_SUSTAINED: THRESHOLD_SUSTAINED_CONFIG\n};\n\n// Further comments removed.\n","// Cool-down options based on various sources [2, 5, 7, 9, 10, 12, 13, 16, 17, 19-21]\nconst cooldowns = [\n    { desc: \"200 w fins (or combo)\", dist: 200, type: \"fins\" }, //[2]\n    { desc: \"200 swim cooldown\", dist: 200, type: \"swim\" }, //[5]\n    { desc: \"100 cool down\", dist: 100, type: \"general\" }, //[7]\n    { desc: \"300 CD\", dist: 300, type: \"general\" }, //[9]\n    { desc: \"200 CD\", dist: 200, type: \"general\" }, //[10, 16, 21]\n    { desc: \"450 cooldown (300 swim, 150 under)\", dist: 450, type: \"swim/under\" }, //[20]\n    { desc: \"100 cool\", dist: 100, type: \"general\" }, //[17]\n    { desc: \"150 cooldown and 20 minutes of stick skills\", dist: 150, type: \"general\" }, //[19]\n    { desc: \"100 fin swim cooldown\", dist: 100, type: \"fin swim\" }, //[12]\n    { desc: \"250 cool down\", dist: 250, type: \"general\" }, //[13]\n];\n\nexport { cooldowns };\n","\nimport { generateMainSetFromConfig } from './workoutGenerator.js';\nimport { ALL_WORKOUT_CONFIGS } from './data/mainSetConfigs.js';\nimport { cooldowns } from './data/cooldowns.js';\n\nconst NO_COOLDOWN = { desc: \"No cooldown (short workout)\", dist: 0, type: \"none\" };\n\n/**\n * Selects a cooldown routine randomly from the available options.\n *\n * @param {Array<Object>} availableCooldowns - An array of cooldown objects. Each object should have at least 'desc' and 'dist' properties.\n * @returns {Object|null} The selected cooldown object, or null if no cooldowns are available or an error occurs.\n */\nfunction generateCooldown() {\n    if (cooldowns && cooldowns.length > 0) {\n        return cooldowns[Math.floor(Math.random() * cooldowns.length)];\n    }\n    return NO_COOLDOWN; // Or return a default cooldown if preferred\n}\n\n/**\n * Generates the main set for a workout based on the energy system.\n *\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {string} workoutType - The type of workout (e.g., 'THRESHOLD_SUSTAINED').\n * @returns {{ sets: string[], mainSetTotalDist: number, targetPacePer100: number, descriptiveMessage?: string }}\n *           An object containing the sets, total distance of the main set, target pace,\n *           and an optional descriptive message for unknown or default systems.\n */\nfunction generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet) {\n    let config = ALL_WORKOUT_CONFIGS[workoutType];\n    let messageFromOuterScope;\n\n    if (!config) {\n        messageFromOuterScope = `Unknown workout type: ${workoutType}. Defaulting to general endurance.`;\n        config = ALL_WORKOUT_CONFIGS['GENERAL_ENDURANCE'];\n    }\n\n    // The generator function now expects energySystem as its first param.\n    let mainSetOutput = generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, config);\n\n    // Fallback condition: if the selected generator (not GENERAL_ENDURANCE) produced a very small set\n    if (mainSetOutput.mainSetTotalDist < 100 && remainingDistanceForMainSet > 100 && workoutType !== 'GENERAL_ENDURANCE') {\n        let fallbackMessage = \"(Fallback to general endurance due to low generated distance for selected workout type).\";\n\n        const originalMessage = mainSetOutput.descriptiveMessage; // Message from the original, tiny set\n        mainSetOutput = generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS['GENERAL_ENDURANCE']); // Rerun with GENERAL_ENDURANCE\n\n        // Construct descriptive message for fallback\n        let finalFallbackMessage = fallbackMessage;\n        if (originalMessage) { // If the original (tiny) set had a message\n            finalFallbackMessage = originalMessage + \" \" + fallbackMessage;\n        } else if (mainSetOutput.descriptiveMessage) { // If GENERAL_ENDURANCE set has a message\n            finalFallbackMessage = fallbackMessage + \" \" + mainSetOutput.descriptiveMessage;\n        }\n        mainSetOutput.descriptiveMessage = finalFallbackMessage;\n    } else {\n        // No fallback, or it was a direct 'GENERAL_ENDURANCE' call.\n        // If messageFromOuterScope was set (i.e., unknown workout type), it takes precedence\n        // unless the generator provided its own more specific message.\n        if (messageFromOuterScope) {\n            if (!mainSetOutput.descriptiveMessage) {\n                mainSetOutput.descriptiveMessage = messageFromOuterScope;\n            } else {\n                // If generator (GENERAL_ENDURANCE in this case) set a message, and it was an unknown type,\n                // combine or prioritize. For now, \"Unknown type\" message is more specific to the situation.\n                mainSetOutput.descriptiveMessage = messageFromOuterScope + \" Original generator message: \" + mainSetOutput.descriptiveMessage;\n            }\n        } else if (workoutType === 'GENERAL_ENDURANCE' && !mainSetOutput.descriptiveMessage) {\n            // If it was a direct 'GENERAL_ENDURANCE' call and the generator provided no message (unlikely with current data)\n            mainSetOutput.descriptiveMessage = `General Endurance (${energySystem}) set.`;\n        }\n    }\n    return mainSetOutput;\n}\n\nconst workoutFunctions = {\n    generateCooldown,\n    generateMainSet\n};\n\nexport default workoutFunctions;\n","import { generateWarmup } from './data/warmups.js';\nimport workoutComponents from './workoutComponents.js';\n\nconst VERY_SHORT_WORKOUT_THRESHOLD = 600; // yards\nconst MAIN_SET_UNITS = \"yards\"; // Assuming SCY based on sources unless specified otherwise\n\n// Helper function to convert MM:SS time string to total seconds per 100 units\nexport function parseCssTimeToSeconds(cssTimeStr) {\n    if (typeof cssTimeStr !== 'string') {\n        return null;\n    }\n    const parts = cssTimeStr.split(':');\n    if (parts.length === 2) {\n        const minutes = parseInt(parts[0], 10);\n        const seconds = parseFloat(parts[1]);\n        if (isNaN(minutes) || isNaN(seconds)) {\n            return null;\n        }\n        return minutes * 60 + seconds;\n    }\n    return null; // Invalid format\n}\n\n// Helper function to format total seconds per 100 units back to MM:SS\nexport function formatSecondsToMmSs(totalSeconds) {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = (totalSeconds % 60).toFixed(1); // One decimal for seconds\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n/**\n * Generates a random workout based on distance, energy system, and CSS time.\n * @param {number} totalDistanceYards - The approximate total desired workout distance in yards.\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2', 'EN3', 'SP1', 'SP2').\n * @param {string} cssTimeMmSs - The Critical Swim Speed in MM:SS format (e.g., '1:10').\n * @param {string} workoutType - The type of workout (e.g., 'threshold', 'anaerobic').\n * @returns {string} A formatted string describing the generated workout.\n */\nfunction generateWorkout(totalDistanceYards, energySystem, cssTimeMmSs, workoutType) {\n\n    const cssSecondsPer100 = parseCssTimeToSeconds(cssTimeMmSs);\n    if (cssSecondsPer100 === null) {\n        return \"Error: Invalid CSS time format. Please use MM:SS (e.g., '1:10').\";\n    }\n\n    let workoutDetails = [];\n    let currentDistanceCovered = 0;\n\n    // --- 1. Warmup Selection ---\n    const warmup = generateWarmup(totalDistanceYards, VERY_SHORT_WORKOUT_THRESHOLD);\n    workoutDetails.push(warmup.desc);\n    currentDistanceCovered += warmup.dist;\n\n    // --- 3. cooldown selection\n    const cooldown = workoutComponents.generateCooldown();\n    currentDistanceCovered += cooldown.dist;\n\n    // --- 2. Main Set Generation ---\n    let mainSetDescription = \"Main Set:\";\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100;\n    let remainingDistanceForMainSet = totalDistanceYards - currentDistanceCovered;\n\n    // Map energySystem to workoutType keys\n    let internalWorkoutType = generateWorkoutType(energySystem, workoutType);\n\n    const mainSetResult = workoutComponents.generateMainSet(internalWorkoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet);\n    sets = mainSetResult.sets;\n    mainSetTotalDist = mainSetResult.mainSetTotalDist;\n    targetPacePer100 = mainSetResult.targetPacePer100;\n\n    if (mainSetResult.descriptiveMessage) {\n        mainSetDescription += ` ${mainSetResult.descriptiveMessage}`;\n    }\n\n    workoutDetails.push(mainSetDescription);\n    sets.forEach(set => {\n        workoutDetails.push(`  - ${set}`);\n    });\n    currentDistanceCovered += mainSetTotalDist;\n\n    // --- 3. Cool-down Selection ---\n    \n    workoutDetails.push(`CD: ${cooldown.desc}`);\n\n    // --- 4. Final Details ---\n    workoutDetails.push(`\\nTotal estimated distance: ${currentDistanceCovered} ${MAIN_SET_UNITS}`);\n    workoutDetails.push(`CSS: ${cssTimeMmSs}`);\n    workoutDetails.push(`Workout Type: ${workoutType}`); // Added Workout Type\n    workoutDetails.push(`Energy System Focus: ${energySystem.toUpperCase()}`);\n    // A rough estimate of average pace, as true average depends on actual interval times and rest\n    workoutDetails.push(`Estimated AVG pace for main set: ${formatSecondsToMmSs(targetPacePer100)} / 100 ${MAIN_SET_UNITS}`);\n\n    return workoutDetails.join('\\n');\n}\n\nexport { generateWorkout }; // Keep generateWorkout exported as it's likely the main API\n\n\n\n\n\n    function generateWorkoutType(energySystem, workoutType) {\n        const energySystemToWorkoutType = {\n            'EN1': 'ENDURANCE_BASE',\n            'EN2': 'THRESHOLD_SUSTAINED',\n            'EN3': 'THRESHOLD_DEVELOPMENT',\n            'SP1': 'SPEED_ENDURANCE',\n            'SP2': 'MAX_SPRINT',\n            // Add other mappings if necessary, or a default\n        };\n\n        let internalWorkoutType = energySystemToWorkoutType[energySystem.toUpperCase()];\n\n        if (!internalWorkoutType) {\n            // console.warn(`Unknown energySystem: ${energySystem}. Defaulting to GENERAL_ENDURANCE if workoutType param is also not specific.`);\n            // If the original workoutType parameter was provided and is valid, it could be used.\n            // However, the new guidelines are driven by EN1, EN2 etc.\n            // So, if energySystem doesn't map, we might default or rely on the generateMainSet's default.\n            // For now, if energySystem doesn't map, internalWorkoutType will be undefined,\n            // and generateMainSet will default to GENERAL_ENDURANCE.\n            // The original 'workoutType' parameter from generateWorkout's signature is still available if needed as a fallback here.\n            // Let's make it explicit: if energySystem mapping fails, use the passed 'workoutType' parameter.\n            // If that is also undefined, generateMainSet handles the GENERAL_ENDURANCE default.\n            if (workoutType) { // workoutType is the original parameter of generateWorkout\n                internalWorkoutType = workoutType;\n            }\n            // If internalWorkoutType is still undefined, generateMainSet's default to GENERAL_ENDURANCE will occur.\n        }\n        return internalWorkoutType;\n    }\n// --- Example Usage ---\n// console.log(generateWorkout(3000, 'EN3', '1:20'));\n// console.log(generateWorkout(2000, 'SP1', '1:10'));\n// console.log(generateWorkout(1500, 'SP2', '1:15'));\n// console.log(generateWorkout(2500, 'EN2', '1:12'));\n// console.log(generateWorkout(1800, 'EN1', '1:25'));","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  // console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 40 ?\n      Math.floor(40 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    // console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      // console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      // console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport { generateWorkout as generateCssWorkout } from './css.js';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  // console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  // console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      // console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  // console.log(pattern);\n\n  return pattern;\n}\n\nexport { generateCssWorkout };\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    // console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  // console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["warmups","desc","dist","type","NO_WARM_UP_BITCHES","selectWarmup","useWarmup","Math","random","floor","length","generateWarmup","totalDistanceYards","shortWorkoutThreshold","selectedWarmup","_objectSpread","minMainSetThreshold","maxAllowedWarmupDist","min","suitableWarmups","filter","wu","calculateTargetPace","cssSecondsPer100","paceConfig","pace","offset","randomRange","randomComponent","totalAdjustment","operator","formatDescriptiveMessage","template","params","message","key","undefined","replace","RegExp","concat","trim","formatSetString","setInfo","energySystem","formatConfig","structure","baseStructure","reps","activity","defaultActivity","restString","paceDesc","notes","setRest","generateMainSetFromConfig","remainingDistanceForMainSet","strategyConfig","sets","mainSetTotalDist","targetPacePer100","descriptiveMessage","strategyResult","generateSet","paceDescription","generatePaceSummary","generatedSets","totalDistance","forEach","item","push","setFormatting","descriptiveMessages","success","workoutTypeName","setSummary","strategySpecificSummary","String","fail","paceSummaryText","pc","basePaceDesc","offsetPart","rangeEnd","abs","setDistance","remainingDistance","setDefinitions","shuffledSetDefinitions","_","shuffle","output","_iterator","_createForOfIteratorHelper","_step","s","n","done","setDef","value","currentDist","distance","repScheme","currentReps","maxReps","Infinity","currentTotalYardage","rest","err","e","f","ENDURANCE_BASE_CONFIG","minTotalDistanceForSet","baseMetric","tooShort","GENERAL_ENDURANCE_CONFIG","MAX_SPRINT_CONFIG","SPEED_ENDURANCE_CONFIG","THRESHOLD_DEVELOPMENT_CONFIG","id","THRESHOLD_SUSTAINED_CONFIG","ALL_WORKOUT_CONFIGS","ENDURANCE_BASE","GENERAL_ENDURANCE","MAX_SPRINT","SPEED_ENDURANCE","THRESHOLD_DEVELOPMENT","THRESHOLD_SUSTAINED","cooldowns","NO_COOLDOWN","generateCooldown","generateMainSet","workoutType","config","messageFromOuterScope","mainSetOutput","fallbackMessage","originalMessage","finalFallbackMessage","workoutFunctions","VERY_SHORT_WORKOUT_THRESHOLD","MAIN_SET_UNITS","parseCssTimeToSeconds","cssTimeStr","parts","split","minutes","parseInt","seconds","parseFloat","isNaN","formatSecondsToMmSs","totalSeconds","toFixed","generateWorkout","cssTimeMmSs","workoutDetails","currentDistanceCovered","warmup","cooldown","workoutComponents","mainSetDescription","internalWorkoutType","generateWorkoutType","mainSetResult","set","toUpperCase","join","energySystemToWorkoutType","getThingViaTimeLimit","secondsLeft","things","number","arguments","filteredThings","thing","sample","repeatIntervals","generatedPattern","selectedSwim","swims","time","timeLeft","maxRepetition","interval","intervalLength","secondsToAdd","intervals","name","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","swimLength","group","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","repeat"],"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"}