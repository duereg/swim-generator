{"version":3,"file":"swim-generator.es6.js","sources":["../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  console.log(pattern);\n\n  return pattern;\n}\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["getThingViaTimeLimit","key","secondsLeft","things","number","arguments","length","undefined","filteredThings","_","filter","thing","sample","repeatIntervals","generatedPattern","console","log","concat","seconds","selectedSwim","swims","name","time","timeLeft","maxRepetition","Math","floor","interval","intervalLength","random","secondsToAdd","intervals","push","type","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","set","swimLength","group","min","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","sets","forEach","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","minTime","repeat","generateWorkout"],"mappings":"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"}