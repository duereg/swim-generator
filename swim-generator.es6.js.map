{"version":3,"file":"swim-generator.es6.js","sources":["../lib/data/warmups.js","../lib/data/cooldowns.js","../lib/data/mainSets.js","../lib/workoutComponents.js","../lib/css.js","../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["// Warmup options based on various sources [2, 5, 7, 8, 11, 13, 15, 17, 19, 20]\nconst warmups = [\n    { desc: \"200 no fins, 200 w fins swim\", dist: 400, type: \"swim\" }, //[2]\n    { desc: \"400 warmup (75 kick, 25 under)\", dist: 400, type: \"kick\" }, //[5]\n    { desc: \"250 pull warmup, 250 swim warmup\", dist: 500, type: \"pull/swim\" }, //[20]\n    { desc: \"250 warmup\", dist: 250, type: \"general\" }, //[8, 13]\n    { desc: \"200 warm up\", dist: 200, type: \"general\" }, //[7]\n    { desc: \"500 warmup\", dist: 500, type: \"general\" }, //[11, 17]\n    { desc: \"300 warm up\", dist: 300, type: \"general\" }, //[15]\n    { desc: \"150 warm up\", dist: 150, type: \"general\" }, //[19]\n];\n\n// Option for no warmup, as seen in some sources [1, 9]\nconst noWarmupOption = { desc: \"No warmup bitches\", dist: 0, type: \"none\" }; //[1]\n\nexport { warmups, noWarmupOption };\n","// Cool-down options based on various sources [2, 5, 7, 9, 10, 12, 13, 16, 17, 19-21]\nconst cooldowns = [\n    { desc: \"200 w fins (or combo)\", dist: 200, type: \"fins\" }, //[2]\n    { desc: \"200 swim cooldown\", dist: 200, type: \"swim\" }, //[5]\n    { desc: \"100 cool down\", dist: 100, type: \"general\" }, //[7]\n    { desc: \"300 CD\", dist: 300, type: \"general\" }, //[9]\n    { desc: \"200 CD\", dist: 200, type: \"general\" }, //[10, 16, 21]\n    { desc: \"450 cooldown (300 swim, 150 under)\", dist: 450, type: \"swim/under\" }, //[20]\n    { desc: \"100 cool\", dist: 100, type: \"general\" }, //[17]\n    { desc: \"150 cooldown and 20 minutes of stick skills\", dist: 150, type: \"general\" }, //[19]\n    { desc: \"100 fin swim cooldown\", dist: 100, type: \"fin swim\" }, //[12]\n    { desc: \"250 cool down\", dist: 250, type: \"general\" }, //[13]\n];\n\nexport { cooldowns };\n","// Sample distances based on comments in original css.js\nconst en1Distances = [200, 300, 400, 500];\nconst en2Distances = [100, 200, 300, 400];\nconst en3Distances = [50, 100, 150, 200];\nconst en3SecondaryDistances = [200, 300, 400];\nconst sp1Distances = [25, 50, 75, 100];\nconst sp1Drills = [\"swim\", \"kb\", \"FU\", \"HUHO\"];\nconst sp2Distances = [25, 50];\nconst sp2RepsMapping = { 25: 24, 50: 16 };\n\n// Functions now keyed by workoutType, but still accept energySystem for potential future differentiation\nconst mainSetDefinitions = {\n    'ENDURANCE_BASE': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => { // Was EN1\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 + (Math.random() * 5);\n        let numEn1Reps = Math.floor(Math.random() * (6 - 3 + 1)) + 3;\n        let en1RepDist = en1Distances[Math.floor(Math.random() * en1Distances.length)];\n        if (numEn1Reps * en1RepDist > remainingDistanceForMainSet * 1.2) {\n            numEn1Reps = Math.floor((remainingDistanceForMainSet * 1.2) / en1RepDist) || 1;\n        }\n        let en1Rest = `r${(Math.floor(Math.random() * (60 - 30 + 1)) + 30)}\"`;\n        sets.push(`${numEn1Reps}x${en1RepDist} ${energySystem} focus swim/kick ${en1Rest}`); // Added energySystem to set desc for now\n        mainSetTotalDist += numEn1Reps * en1RepDist;\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Endurance Base (${energySystem}) set.` };\n    },\n    'THRESHOLD_SUSTAINED': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => { // Was EN2\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 + (Math.random() * 3 - 1.5);\n        let numEn2Reps = Math.floor(Math.random() * (10 - 4 + 1)) + 4;\n        let en2RepDist = en2Distances[Math.floor(Math.random() * en2Distances.length)];\n        if (numEn2Reps * en2RepDist > remainingDistanceForMainSet * 1.2) {\n            numEn2Reps = Math.floor((remainingDistanceForMainSet * 1.2) / en2RepDist) || 1;\n        }\n        let en2Rest = `r${(Math.floor(Math.random() * (30 - 20 + 1)) + 20)}\"`;\n        sets.push(`${numEn2Reps}x${en2RepDist} ${energySystem} focus swim ${en2Rest}`);\n        mainSetTotalDist += numEn2Reps * en2RepDist;\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set.` };\n    },\n    'THRESHOLD_DEVELOPMENT': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => { // Was EN3\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 - (Math.random() * 3);\n        let numEn3Reps = Math.floor(Math.random() * (5 - 2 + 1)) + 2;\n        let en3RepDist = en3Distances[Math.floor(Math.random() * en3Distances.length)];\n        if (numEn3Reps * en3RepDist > remainingDistanceForMainSet * 0.8 && remainingDistanceForMainSet > 800) {\n             numEn3Reps = Math.floor((remainingDistanceForMainSet * 0.7) / en3RepDist) || 1;\n        } else if (numEn3Reps * en3RepDist > remainingDistanceForMainSet * 1.1) {\n            numEn3Reps = Math.floor((remainingDistanceForMainSet * 1.1) / en3RepDist) || 1;\n        }\n\n        let en3Rest = `r${(Math.floor(Math.random() * (90 - 40 + 1)) + 40)}\"`;\n        sets.push(`${numEn3Reps}x${en3RepDist} ${energySystem} focus swim/kb ${en3Rest}`);\n        mainSetTotalDist += numEn3Reps * en3RepDist;\n\n        if (remainingDistanceForMainSet - mainSetTotalDist > 500 && Math.random() < 0.5) {\n            let secondaryReps = Math.floor(Math.random() * (4 - 2 + 1)) + 2;\n            let secondaryDist = en3SecondaryDistances[Math.floor(Math.random() * en3SecondaryDistances.length)];\n            if (secondaryReps * secondaryDist > (remainingDistanceForMainSet - mainSetTotalDist) * 1.1) {\n                 secondaryReps = Math.floor(((remainingDistanceForMainSet - mainSetTotalDist) *1.1) / secondaryDist) || 1;\n            }\n            if (secondaryReps > 0) {\n                sets.push(`${secondaryReps}x${secondaryDist} ${energySystem} focus swim ${en3Rest}`);\n                mainSetTotalDist += secondaryReps * secondaryDist;\n            }\n        }\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Threshold Development (${energySystem}) set.` };\n    },\n    'SPEED_ENDURANCE': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => { // Was SP1\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 - (5 + Math.random() * 5);\n\n        let numBlocks = Math.floor(Math.random() * (3 - 1 + 1)) + 1;\n        let blockDistRemaining = remainingDistanceForMainSet;\n\n        for (let i = 0; i < numBlocks; i++) {\n            let numReps = Math.floor(Math.random() * (8 - 4 + 1)) + 4;\n            let repDist = sp1Distances[Math.floor(Math.random() * sp1Distances.length)];\n\n            let maxDistForBlock = blockDistRemaining / (numBlocks - i);\n            if (numReps * repDist > maxDistForBlock * 1.2 ) {\n                numReps = Math.floor((maxDistForBlock * 1.2) / repDist) || 1;\n            }\n            if (numReps === 0 && mainSetTotalDist === 0) numReps = 1;\n\n            if (numReps > 0) {\n                let rest = `r${(Math.floor(Math.random() * (40 - 30 + 1)) + 30)}\"`;\n                let drillType = sp1Drills[Math.floor(Math.random() * sp1Drills.length)];\n                sets.push(`${numReps}x${repDist} ${drillType} (${energySystem} focus) ${rest}`);\n                let currentBlockDist = numReps * repDist;\n                mainSetTotalDist += currentBlockDist;\n                blockDistRemaining -= currentBlockDist;\n\n                if (i < numBlocks - 1 && blockDistRemaining > 50) {\n                    let easyBreak = Math.random() > 0.5 ? \"2min rest\" : \"50 ez + wait for top\";\n                    sets.push(easyBreak);\n                    if (easyBreak.includes(\"ez\")) {\n                        mainSetTotalDist += 50;\n                        blockDistRemaining -= 50;\n                    }\n                }\n            }\n        }\n        if (sets.length === 0) {\n            let repDist = sp1Distances[1];\n            let numReps = Math.floor(remainingDistanceForMainSet / repDist / 2) || 2;\n            if (numReps * repDist > remainingDistanceForMainSet) numReps = Math.floor(remainingDistanceForMainSet / repDist) || 1;\n            sets.push(`${numReps}x${repDist} swim (${energySystem} focus) r30\"`);\n            mainSetTotalDist = numReps * repDist;\n        }\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set.` };\n    },\n    'MAX_SPRINT': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => { // Was SP2\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 - (10 + Math.random() * 15);\n\n        let repDist = sp2Distances[Math.floor(Math.random() * sp2Distances.length)];\n        let numReps = sp2RepsMapping[repDist] || 10;\n\n        if ((numReps * repDist) > (remainingDistanceForMainSet * 0.9)) {\n            numReps = Math.floor((remainingDistanceForMainSet * 0.9) / repDist) ;\n        }\n        if (numReps < 8 && repDist === 50 ) numReps = 8;\n        if (numReps < 12 && repDist === 25 ) numReps = 12;\n        if (numReps === 0) numReps = 1;\n\n        const sp2Rest = \"1'r\";\n        sets.push(`${numReps}x${repDist} UW sprint (${energySystem} focus, breath at wall) @ ${sp2Rest}`);\n        mainSetTotalDist += numReps * repDist;\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set.` };\n    },\n    'GENERAL_ENDURANCE': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => { // Was DEFAULT\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100;\n        let numReps = Math.floor(remainingDistanceForMainSet / 400);\n        if (numReps === 0 && remainingDistanceForMainSet > 200) numReps = 1;\n        else if (numReps === 0) {\n            numReps = Math.floor(remainingDistanceForMainSet / 200) || 1;\n            sets.push(`${numReps}x200 swim (${energySystem} focus) r30\"`);\n            mainSetTotalDist += numReps * 200;\n            return {sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) default set.`};\n        }\n        sets.push(`${numReps}x400 swim (${energySystem} focus) r45\"`);\n        mainSetTotalDist += numReps * 400;\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) default set.` };\n    }\n};\n\nexport { mainSetDefinitions };\n","/**\n * Selects a warmup routine.\n * There's a 90% chance of selecting a warmup from the availableWarmups array,\n * and a 10% chance of selecting the noWarmupOption.\n *\n * @param {Array<Object>} availableWarmups - An array of warmup objects. Each object should have at least 'desc' and 'dist' properties.\n * @param {Object} noWarmupOption - An object representing the option of no warmup. Should have 'desc' and 'dist'.\n * @returns {Object} The selected warmup object.\n */\nfunction selectWarmup(availableWarmups, noWarmupOption) {\n    const useWarmup = Math.random() > 0.1; // 90% chance of including a warmup\n\n    if (useWarmup && availableWarmups && availableWarmups.length > 0) {\n        return availableWarmups[Math.floor(Math.random() * availableWarmups.length)];\n    } else {\n        return noWarmupOption;\n    }\n}\n\n/**\n * Selects a cooldown routine randomly from the available options.\n *\n * @param {Array<Object>} availableCooldowns - An array of cooldown objects. Each object should have at least 'desc' and 'dist' properties.\n * @returns {Object|null} The selected cooldown object, or null if no cooldowns are available or an error occurs.\n */\nfunction selectCooldown(availableCooldowns) {\n    if (availableCooldowns && availableCooldowns.length > 0) {\n        return availableCooldowns[Math.floor(Math.random() * availableCooldowns.length)];\n    }\n    return null; // Or return a default cooldown if preferred\n}\n\n/**\n * Generates the main set for a workout based on the energy system.\n *\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {string} workoutType - The type of workout (e.g., 'THRESHOLD_SUSTAINED').\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {Object} mainSetDefinitions - Object mapping workout types to generator functions.\n * @returns {{ sets: string[], mainSetTotalDist: number, targetPacePer100: number, descriptiveMessage?: string }}\n *           An object containing the sets, total distance of the main set, target pace,\n *           and an optional descriptive message for unknown or default systems.\n */\nfunction generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions) {\n    let generator = mainSetDefinitions[workoutType];\n    let messageFromOuterScope;\n\n    if (!generator) {\n        messageFromOuterScope = `Unknown workout type: ${workoutType}. Defaulting to general endurance.`;\n        generator = mainSetDefinitions['GENERAL_ENDURANCE'];\n    }\n\n    // The generator function now expects energySystem as its first param.\n    let mainSetOutput = generator(energySystem, cssSecondsPer100, remainingDistanceForMainSet);\n\n    // Fallback condition: if the selected generator (not GENERAL_ENDURANCE) produced a very small set\n    if (mainSetOutput.mainSetTotalDist < 100 && remainingDistanceForMainSet > 100 && workoutType !== 'GENERAL_ENDURANCE') {\n        let fallbackMessage = \"(Fallback to general endurance due to low generated distance for selected workout type).\";\n\n        const originalMessage = mainSetOutput.descriptiveMessage; // Message from the original, tiny set\n        mainSetOutput = mainSetDefinitions['GENERAL_ENDURANCE'](energySystem, cssSecondsPer100, remainingDistanceForMainSet); // Rerun with GENERAL_ENDURANCE\n\n        // Construct descriptive message for fallback\n        let finalFallbackMessage = fallbackMessage;\n        if (originalMessage) { // If the original (tiny) set had a message\n            finalFallbackMessage = originalMessage + \" \" + fallbackMessage;\n        } else if (mainSetOutput.descriptiveMessage) { // If GENERAL_ENDURANCE set has a message\n            finalFallbackMessage = fallbackMessage + \" \" + mainSetOutput.descriptiveMessage;\n        }\n        mainSetOutput.descriptiveMessage = finalFallbackMessage;\n    } else {\n        // No fallback, or it was a direct 'GENERAL_ENDURANCE' call.\n        // If messageFromOuterScope was set (i.e., unknown workout type), it takes precedence\n        // unless the generator provided its own more specific message.\n        if (messageFromOuterScope) {\n            if (!mainSetOutput.descriptiveMessage) {\n                mainSetOutput.descriptiveMessage = messageFromOuterScope;\n            } else {\n                // If generator (GENERAL_ENDURANCE in this case) set a message, and it was an unknown type,\n                // combine or prioritize. For now, \"Unknown type\" message is more specific to the situation.\n                mainSetOutput.descriptiveMessage = messageFromOuterScope + \" Original generator message: \" + mainSetOutput.descriptiveMessage;\n            }\n        } else if (workoutType === 'GENERAL_ENDURANCE' && !mainSetOutput.descriptiveMessage) {\n            // If it was a direct 'GENERAL_ENDURANCE' call and the generator provided no message (unlikely with current data)\n            mainSetOutput.descriptiveMessage = `General Endurance (${energySystem}) set.`;\n        }\n    }\n    return mainSetOutput;\n}\n\nconst workoutFunctions = {\n    selectWarmup,\n    selectCooldown,\n    generateMainSet\n};\n\nexport default workoutFunctions;\n","import { warmups, noWarmupOption } from './data/warmups.js';\nimport { cooldowns } from './data/cooldowns.js';\nimport { mainSetDefinitions } from './data/mainSets.js';\nimport workoutComponents from './workoutComponents.js';\n\n// Helper function to convert MM:SS time string to total seconds per 100 units\nexport function parseCssTimeToSeconds(cssTimeStr) {\n    if (typeof cssTimeStr !== 'string') {\n        return null;\n    }\n    const parts = cssTimeStr.split(':');\n    if (parts.length === 2) {\n        const minutes = parseInt(parts[0], 10);\n        const seconds = parseFloat(parts[1]);\n        if (isNaN(minutes) || isNaN(seconds)) {\n            return null;\n        }\n        return minutes * 60 + seconds;\n    }\n    return null; // Invalid format\n}\n\n// Helper function to format total seconds per 100 units back to MM:SS\nexport function formatSecondsToMmSs(totalSeconds) {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = (totalSeconds % 60).toFixed(1); // One decimal for seconds\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n/**\n * Generates a random workout based on distance, energy system, and CSS time.\n * @param {number} totalDistanceYards - The approximate total desired workout distance in yards.\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2', 'EN3', 'SP1', 'SP2').\n * @param {string} cssTimeMmSs - The Critical Swim Speed in MM:SS format (e.g., '1:10').\n * @param {string} workoutType - The type of workout (e.g., 'threshold', 'anaerobic').\n * @returns {string} A formatted string describing the generated workout.\n */\nfunction generateWorkout(totalDistanceYards, energySystem, cssTimeMmSs, workoutType) {\n    const cssSecondsPer100 = parseCssTimeToSeconds(cssTimeMmSs);\n    if (cssSecondsPer100 === null) {\n        return \"Error: Invalid CSS time format. Please use MM:SS (e.g., '1:10').\";\n    }\n\n    let workoutDetails = [];\n    let currentDistanceCovered = 0;\n    const mainSetUnits = \"yards\"; // Assuming SCY based on sources unless specified otherwise [7, 9, 16]\n\n    // --- 1. Warmup Selection ---\n    const selectedWarmup = workoutComponents.selectWarmup(warmups, noWarmupOption);\n    if (selectedWarmup) {\n        workoutDetails.push(`WU: ${selectedWarmup.desc}`);\n        currentDistanceCovered += selectedWarmup.dist;\n    }\n\n    // --- 2. Main Set Generation ---\n    let mainSetDescription = \"Main Set:\";\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100;\n    let remainingDistanceForMainSet = totalDistanceYards - currentDistanceCovered;\n\n    const mainSetResult = workoutComponents.generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions);\n    sets = mainSetResult.sets;\n    mainSetTotalDist = mainSetResult.mainSetTotalDist;\n    targetPacePer100 = mainSetResult.targetPacePer100;\n\n    if (mainSetResult.descriptiveMessage) {\n        mainSetDescription += ` ${mainSetResult.descriptiveMessage}`;\n    }\n\n    workoutDetails.push(mainSetDescription);\n    sets.forEach(set => {\n        workoutDetails.push(`  - ${set}`);\n    });\n    currentDistanceCovered += mainSetTotalDist;\n\n    // --- 3. Cool-down Selection ---\n    const selectedCooldown = workoutComponents.selectCooldown(cooldowns);\n    if (selectedCooldown) {\n        workoutDetails.push(`CD: ${selectedCooldown.desc}`);\n        currentDistanceCovered += selectedCooldown.dist;\n    }\n\n    // --- 4. Final Details ---\n    workoutDetails.push(`\\nTotal estimated distance: ${currentDistanceCovered} ${mainSetUnits}`);\n    workoutDetails.push(`CSS: ${cssTimeMmSs}`);\n    workoutDetails.push(`Workout Type: ${workoutType}`); // Added Workout Type\n    workoutDetails.push(`Energy System Focus: ${energySystem.toUpperCase()}`);\n    // A rough estimate of average pace, as true average depends on actual interval times and rest\n    workoutDetails.push(`Estimated AVG pace for main set: ${formatSecondsToMmSs(targetPacePer100)} / 100 ${mainSetUnits}`);\n\n    return workoutDetails.join('\\n');\n}\n\nexport { generateWorkout }; // Keep generateWorkout exported as it's likely the main API\n\n// --- Example Usage ---\n// console.log(generateWorkout(3000, 'EN3', '1:20'));\n// console.log(generateWorkout(2000, 'SP1', '1:10'));\n// console.log(generateWorkout(1500, 'SP2', '1:15'));\n// console.log(generateWorkout(2500, 'EN2', '1:12'));\n// console.log(generateWorkout(1800, 'EN1', '1:25'));","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  // console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    // console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      // console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      // console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport { generateWorkout as generateCssWorkout } from './css.js';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  // console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  // console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      // console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  // console.log(pattern);\n\n  return pattern;\n}\n\nexport { generateCssWorkout };\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    // console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  // console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["warmups","desc","dist","type","noWarmupOption","cooldowns","en1Distances","en2Distances","en3Distances","en3SecondaryDistances","sp1Distances","sp1Drills","sp2Distances","sp2RepsMapping","mainSetDefinitions","ENDURANCE_BASE","energySystem","cssSecondsPer100","remainingDistanceForMainSet","sets","mainSetTotalDist","targetPacePer100","Math","random","numEn1Reps","floor","en1RepDist","length","en1Rest","concat","push","descriptiveMessage","THRESHOLD_SUSTAINED","numEn2Reps","en2RepDist","en2Rest","THRESHOLD_DEVELOPMENT","numEn3Reps","en3RepDist","en3Rest","secondaryReps","secondaryDist","SPEED_ENDURANCE","numBlocks","blockDistRemaining","i","numReps","repDist","maxDistForBlock","rest","drillType","currentBlockDist","easyBreak","includes","MAX_SPRINT","sp2Rest","GENERAL_ENDURANCE","selectWarmup","availableWarmups","useWarmup","selectCooldown","availableCooldowns","generateMainSet","workoutType","generator","messageFromOuterScope","mainSetOutput","fallbackMessage","originalMessage","finalFallbackMessage","workoutFunctions","parseCssTimeToSeconds","cssTimeStr","parts","split","minutes","parseInt","seconds","parseFloat","isNaN","formatSecondsToMmSs","totalSeconds","toFixed","generateWorkout","totalDistanceYards","cssTimeMmSs","workoutDetails","currentDistanceCovered","mainSetUnits","selectedWarmup","workoutComponents","mainSetDescription","mainSetResult","forEach","set","selectedCooldown","toUpperCase","join","getThingViaTimeLimit","key","secondsLeft","things","number","arguments","undefined","filteredThings","_","filter","thing","sample","repeatIntervals","generatedPattern","selectedSwim","swims","time","timeLeft","maxRepetition","interval","intervalLength","secondsToAdd","intervals","name","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","swimLength","group","min","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","repeat"],"mappings":"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"}