{"version":3,"file":"swim-generator.es6.js","sources":["../lib/data/warmups.js","../lib/data/cooldowns.js","../lib/data/mainSets/ENDURANCE_BASE.js","../lib/data/mainSets/THRESHOLD_SUSTAINED.js","../lib/data/mainSets/THRESHOLD_DEVELOPMENT.js","../lib/data/mainSets/SPEED_ENDURANCE.js","../lib/data/mainSets/MAX_SPRINT.js","../lib/data/mainSets/GENERAL_ENDURANCE.js","../lib/data/mainSets.js","../lib/workoutComponents.js","../lib/css.js","../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["// Warmup options based on various sources [2, 5, 7, 8, 11, 13, 15, 17, 19, 20]\nconst warmups = [\n    { desc: \"200 no fins, 200 w fins swim\", dist: 400, type: \"swim\" }, //[2]\n    { desc: \"400 warmup (75 kick, 25 under)\", dist: 400, type: \"kick\" }, //[5]\n    { desc: \"250 pull warmup, 250 swim warmup\", dist: 500, type: \"pull/swim\" }, //[20]\n    { desc: \"250 warmup\", dist: 250, type: \"general\" }, //[8, 13]\n    { desc: \"200 warm up\", dist: 200, type: \"general\" }, //[7]\n    { desc: \"500 warmup\", dist: 500, type: \"general\" }, //[11, 17]\n    { desc: \"300 warm up\", dist: 300, type: \"general\" }, //[15]\n    { desc: \"150 warm up\", dist: 150, type: \"general\" }, //[19]\n];\n\n// Option for no warmup, as seen in some sources [1, 9]\nconst noWarmupOption = { desc: \"No warmup bitches\", dist: 0, type: \"none\" }; //[1]\n\nexport { warmups, noWarmupOption };\n","// Cool-down options based on various sources [2, 5, 7, 9, 10, 12, 13, 16, 17, 19-21]\nconst cooldowns = [\n    { desc: \"200 w fins (or combo)\", dist: 200, type: \"fins\" }, //[2]\n    { desc: \"200 swim cooldown\", dist: 200, type: \"swim\" }, //[5]\n    { desc: \"100 cool down\", dist: 100, type: \"general\" }, //[7]\n    { desc: \"300 CD\", dist: 300, type: \"general\" }, //[9]\n    { desc: \"200 CD\", dist: 200, type: \"general\" }, //[10, 16, 21]\n    { desc: \"450 cooldown (300 swim, 150 under)\", dist: 450, type: \"swim/under\" }, //[20]\n    { desc: \"100 cool\", dist: 100, type: \"general\" }, //[17]\n    { desc: \"150 cooldown and 20 minutes of stick skills\", dist: 150, type: \"general\" }, //[19]\n    { desc: \"100 fin swim cooldown\", dist: 100, type: \"fin swim\" }, //[12]\n    { desc: \"250 cool down\", dist: 250, type: \"general\" }, //[13]\n];\n\nexport { cooldowns };\n","const en1Distances = [200, 300, 400, 500];\n\nexport const ENDURANCE_BASE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100 + (Math.random() * 5);\n\n    if (remainingDistanceForMainSet < 25) {\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Endurance Base (${energySystem}) set - too short.` };\n    }\n\n    let en1RepDist = 0;\n    let numEn1Reps = 0;\n\n    if (remainingDistanceForMainSet < 200) { // Path for 25-199 yards\n        const shortEn1Dists = [150, 125, 100, 75, 50, 25]; // Largest to smallest\n        for (const dist of shortEn1Dists) {\n            if (remainingDistanceForMainSet >= dist) {\n                en1RepDist = dist;\n                numEn1Reps = Math.floor(remainingDistanceForMainSet / en1RepDist);\n                break; // Found the largest fitting repDist from short list\n            }\n        }\n    } else if (remainingDistanceForMainSet <= 600) { // Path for 200-600 yards\n        const midEn1Dists = [300, 250, 200, 150, 100, 75, 50]; // Ordered to try larger ones first\n        let bestCurrentRepDist = 0;\n        let bestCurrentNumReps = 0;\n        let smallestRemainderSoFar = Infinity;\n\n        for (const dist of midEn1Dists) {\n            if (remainingDistanceForMainSet >= dist) {\n                let currentNumReps = Math.floor(remainingDistanceForMainSet / dist);\n                // Apply a cap on reps for this mid-range to avoid too many short reps\n                let maxRepsForDist = 5; // Default cap\n                if (dist >= 200) maxRepsForDist = 3;\n                else if (dist >= 150) maxRepsForDist = 4;\n                currentNumReps = Math.min(currentNumReps, maxRepsForDist);\n\n                if (currentNumReps === 0) continue;\n\n                let currentRemainder = remainingDistanceForMainSet - (currentNumReps * dist);\n                if (currentRemainder < smallestRemainderSoFar) {\n                    smallestRemainderSoFar = currentRemainder;\n                    bestCurrentRepDist = dist;\n                    bestCurrentNumReps = currentNumReps;\n                } else if (currentRemainder === smallestRemainderSoFar) {\n                    if (dist > bestCurrentRepDist) { // Prefer larger repDist if remainder is same\n                        bestCurrentRepDist = dist;\n                        bestCurrentNumReps = currentNumReps;\n                    }\n                }\n            }\n        }\n        en1RepDist = bestCurrentRepDist;\n        numEn1Reps = bestCurrentNumReps;\n    } else { // Path for > 600 yards\n        let selectedDist = en1Distances[Math.floor(Math.random() * en1Distances.length)]; // [200,300,400,500]\n        if (selectedDist > remainingDistanceForMainSet) { // Should be rare if remaining > 600\n            for (let j = en1Distances.length - 1; j >= 0; j--) {\n                if (en1Distances[j] <= remainingDistanceForMainSet) {\n                    selectedDist = en1Distances[j];\n                    break;\n                }\n            }\n        }\n        en1RepDist = selectedDist;\n        if (en1RepDist > 0) {\n            numEn1Reps = Math.floor(remainingDistanceForMainSet / en1RepDist);\n            numEn1Reps = Math.min(numEn1Reps, 15); // Cap for standard long distances\n        }\n    }\n\n    if (numEn1Reps > 0 && en1RepDist > 0) {\n        // Final check to prevent exceeding (should be redundant due to Math.floor)\n        if (numEn1Reps * en1RepDist > remainingDistanceForMainSet) {\n            numEn1Reps = Math.floor(remainingDistanceForMainSet / en1RepDist);\n        }\n        if (numEn1Reps > 0) { // Check again after potential adjustment\n            let en1Rest = `r${(Math.floor(Math.random() * (60 - 30 + 1)) + 30)}\"`;\n            sets.push(`${numEn1Reps}x${en1RepDist} ${energySystem} focus swim/kick ${en1Rest}`);\n            mainSetTotalDist = numEn1Reps * en1RepDist;\n        } else { mainSetTotalDist = 0; }\n    } else { mainSetTotalDist = 0; }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Endurance Base (${energySystem}) set.` };\n};\n","const en2Distances = [100, 200, 300, 400];\n\nexport const THRESHOLD_SUSTAINED = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100 + (Math.random() * 3 - 1.5);\n\n    if (remainingDistanceForMainSet < 25) {\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set - too short.` };\n    }\n\n    let en2RepDist = en2Distances[Math.floor(Math.random() * en2Distances.length)];\n\n    if (remainingDistanceForMainSet < en2RepDist) {\n        const possibleDists = en2Distances.filter(d => d <= remainingDistanceForMainSet);\n        if (possibleDists.length > 0) {\n            en2RepDist = possibleDists[possibleDists.length - 1];\n        } else {\n            if (remainingDistanceForMainSet >= 50) {\n                en2RepDist = Math.floor(remainingDistanceForMainSet / 50) * 50;\n                if (en2RepDist === 0) en2RepDist = 50;\n            } else if (remainingDistanceForMainSet >= 25) {\n                en2RepDist = 25;\n            } else {\n                return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set - too short.` };\n            }\n        }\n    }\n\n    let numEn2Reps = (en2RepDist > 0) ? Math.floor(remainingDistanceForMainSet / en2RepDist) : 0;\n    numEn2Reps = Math.min(numEn2Reps, 25); // Changed cap from 20 to 25\n    numEn2Reps = Math.max(numEn2Reps, 1);\n\n    if (numEn2Reps * en2RepDist > remainingDistanceForMainSet) {\n         numEn2Reps = 0;\n    }\n\n    if (numEn2Reps > 0) {\n        let en2Rest = `r${(Math.floor(Math.random() * (30 - 20 + 1)) + 20)}\"`;\n        sets.push(`${numEn2Reps}x${en2RepDist} ${energySystem} focus swim ${en2Rest}`);\n        mainSetTotalDist = numEn2Reps * en2RepDist;\n    } else {\n        mainSetTotalDist = 0;\n    }\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set.` };\n};\n","const en3Distances = [50, 100, 150, 200];\nconst en3SecondaryDistances = [200, 300, 400];\n\nexport const THRESHOLD_DEVELOPMENT = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100 - (Math.random() * 3);\n    const en3Rest = `r${(Math.floor(Math.random() * (90 - 40 + 1)) + 40)}\"`;\n\n    if (remainingDistanceForMainSet < 50) { // Minimum for EN3 is typically 50\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Threshold Development (${energySystem}) set - too short.` };\n    }\n\n    let en3RepDist = en3Distances[Math.floor(Math.random() * en3Distances.length)];\n\n    if (remainingDistanceForMainSet < en3RepDist) {\n         const possibleDists = en3Distances.filter(d => d <= remainingDistanceForMainSet);\n         if (possibleDists.length > 0) {\n             en3RepDist = possibleDists[possibleDists.length -1];\n         } else { // Should not happen if remainingDistanceForMainSet >= 50 and en3Distances includes 50\n             en3RepDist = 0; // will result in numEn3Reps = 0\n         }\n    }\n\n    let numEn3Reps = (en3RepDist > 0) ? Math.floor(remainingDistanceForMainSet / en3RepDist) : 0;\n    numEn3Reps = Math.min(numEn3Reps, 20);\n    // No Math.max(numEn3Reps, 0) needed as floor will be >=0. If en3RepDist is 0, numEn3Reps is 0.\n\n    if (numEn3Reps > 0) {\n        sets.push(`${numEn3Reps}x${en3RepDist} ${energySystem} focus swim/kb ${en3Rest}`);\n        mainSetTotalDist = numEn3Reps * en3RepDist;\n    }\n\n    let newRemainingDistance = remainingDistanceForMainSet - mainSetTotalDist;\n    if (newRemainingDistance > 400) {\n        let secondaryDist = en3SecondaryDistances[Math.floor(Math.random() * en3SecondaryDistances.length)];\n        if (newRemainingDistance < secondaryDist) { // try to pick a smaller secondary dist\n            const possibleSecDists = en3SecondaryDistances.filter(d => d <= newRemainingDistance);\n            if (possibleSecDists.length > 0) {\n                secondaryDist = possibleSecDists[possibleSecDists.length - 1];\n            } else {\n                secondaryDist = 0; // Cannot fit any secondary\n            }\n        }\n\n        let secondaryReps = 0;\n        if (secondaryDist > 0) {\n            secondaryReps = Math.floor(newRemainingDistance / secondaryDist);\n        }\n        secondaryReps = Math.min(secondaryReps, 10);\n\n        if (secondaryReps > 0) {\n            sets.push(`${secondaryReps}x${secondaryDist} ${energySystem} focus swim ${en3Rest}`);\n            mainSetTotalDist += secondaryReps * secondaryDist;\n        }\n    }\n\n    if (mainSetTotalDist === 0 && remainingDistanceForMainSet >= 50) {\n        let fallbackDist = en3Distances[0]; // Smallest standard EN3 distance (50)\n        if (remainingDistanceForMainSet < fallbackDist) fallbackDist = 0; // Should not happen if initial check is >=50\n\n        if (fallbackDist > 0) {\n             let fallbackReps = Math.floor(remainingDistanceForMainSet / fallbackDist);\n             fallbackReps = Math.min(fallbackReps, 5); // Cap fallback reps\n             if (fallbackReps > 0) {\n                sets.push(`${fallbackReps}x${fallbackDist} ${energySystem} focus swim ${en3Rest}`);\n                mainSetTotalDist = fallbackReps * fallbackDist;\n             }\n        }\n    }\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Threshold Development (${energySystem}) set.` };\n};\n","const sp1Distances = [25, 50, 75, 100];\nconst sp1Drills = [\"swim\", \"kb\", \"FU\", \"HUHO\"]; // FU = Fast Underwater, HUHO = Hypoxic Hips Out\n\nexport const SPEED_ENDURANCE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100 - (5 + Math.random() * 5);\n\n    if (remainingDistanceForMainSet < sp1Distances[0]) { // sp1Distances[0] is typically 25\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set - too short.` };\n    }\n\n    let numBlocks;\n    if (remainingDistanceForMainSet < 600) numBlocks = 1;\n    else if (remainingDistanceForMainSet < 1200) numBlocks = 2;\n    else numBlocks = 3;\n\n    let blockDistRemainingForReps = remainingDistanceForMainSet;\n    let accumulatedDist = 0;\n\n    for (let i = 0; i < numBlocks; i++) {\n        if (blockDistRemainingForReps < sp1Distances[0]) break;\n\n        let targetDistForCurrentBlock = Math.floor(blockDistRemainingForReps / (numBlocks - i));\n        let easyBreakDist = 0;\n        let addEasyBreakString = false;\n\n        if (i < numBlocks - 1 && (blockDistRemainingForReps - targetDistForCurrentBlock) > 100) { // Check if there's room for break AND next block\n            if (Math.random() > 0.5) {\n                if (targetDistForCurrentBlock > 150 && blockDistRemainingForReps - (targetDistForCurrentBlock - 50) >= 50 ) { // Ensure rep part & overall remaining is substantial\n                    easyBreakDist = 50;\n                    targetDistForCurrentBlock -= easyBreakDist;\n                    addEasyBreakString = true;\n                }\n            }\n        }\n\n        if (targetDistForCurrentBlock < sp1Distances[0] && addEasyBreakString) {\n            targetDistForCurrentBlock += easyBreakDist; // Reclaim break dist\n            easyBreakDist = 0;\n            addEasyBreakString = false;\n        }\n\n        if (targetDistForCurrentBlock < sp1Distances[0]) continue;\n\n        let repDist = sp1Distances[Math.floor(Math.random() * sp1Distances.length)];\n        if (repDist > targetDistForCurrentBlock && targetDistForCurrentBlock >= sp1Distances[0]) {\n            for (let j = sp1Distances.length - 1; j >= 0; j--) {\n                if (sp1Distances[j] <= targetDistForCurrentBlock) {\n                    repDist = sp1Distances[j];\n                    break;\n                }\n            }\n            if (repDist > targetDistForCurrentBlock && sp1Distances.length > 0 && sp1Distances[0] <= targetDistForCurrentBlock) {\n                 repDist = sp1Distances[0];\n            } else if (repDist > targetDistForCurrentBlock) { // Target too small even for smallest sp1Distance\n                continue;\n            }\n        } else if (repDist > targetDistForCurrentBlock) { // Initial random was too large, and target is smaller than smallest\n             continue;\n        }\n        if (repDist === 0 && sp1Distances.length > 0) repDist = sp1Distances[0];\n        if (repDist === 0) continue; // Should not happen if sp1Distances is not empty\n\n        let numReps = (repDist > 0) ? Math.floor(targetDistForCurrentBlock / repDist) : 0;\n        numReps = Math.min(numReps, 10); // Changed cap from 12 to 10\n\n        if (numReps > 0) {\n            const currentBlockActualRepDist = numReps * repDist;\n            let rest = `r${(Math.floor(Math.random() * (40 - 30 + 1)) + 30)}\"`;\n            let drillType = sp1Drills[Math.floor(Math.random() * sp1Drills.length)];\n            sets.push(`${numReps}x${repDist} ${drillType} (${energySystem} focus) ${rest}`);\n\n            accumulatedDist += currentBlockActualRepDist;\n            blockDistRemainingForReps -= currentBlockActualRepDist;\n\n            if (addEasyBreakString && easyBreakDist > 0) {\n                if (blockDistRemainingForReps >= easyBreakDist) {\n                    sets.push(\"50 ez + wait for top\");\n                    accumulatedDist += easyBreakDist;\n                    blockDistRemainingForReps -= easyBreakDist;\n                }\n            } else if (i < numBlocks - 1 && blockDistRemainingForReps > sp1Distances[0]) {\n                if (Math.random() > 0.3) sets.push(\"2min rest\");\n            }\n        } else if (easyBreakDist > 0) {\n             if (blockDistRemainingForReps >= easyBreakDist) {\n                sets.push(`${easyBreakDist} ez swim`);\n                accumulatedDist += easyBreakDist;\n                blockDistRemainingForReps -= easyBreakDist;\n             }\n        }\n    }\n    mainSetTotalDist = accumulatedDist;\n\n    if (mainSetTotalDist < remainingDistanceForMainSet * 0.75 && remainingDistanceForMainSet > 200) {\n        sets.length = 0;\n        mainSetTotalDist = 0; // Reset for fallback calculation\n        let fallbackRepDist = (remainingDistanceForMainSet > 400 && sp1Distances.includes(100)) ? 100 : (sp1Distances[1] || 50);\n        if (remainingDistanceForMainSet < fallbackRepDist && sp1Distances.length > 0) fallbackRepDist = (sp1Distances[0] || 25);\n\n        if (fallbackRepDist > 0) {\n            let fallbackNumReps = Math.floor(remainingDistanceForMainSet / fallbackRepDist);\n            fallbackNumReps = Math.min(fallbackNumReps, 16);\n            if (fallbackNumReps > 0) {\n                sets.push(`${fallbackNumReps}x${fallbackRepDist} swim (${energySystem} focus) r30\"`);\n                mainSetTotalDist = fallbackNumReps * fallbackRepDist;\n            }\n        }\n    }\n    if (mainSetTotalDist === 0 && remainingDistanceForMainSet >= sp1Distances[0]) {\n        let fDist = (remainingDistanceForMainSet >= 50 && sp1Distances.includes(50)) ? 50 : sp1Distances[0];\n        if (remainingDistanceForMainSet < fDist) {\n             return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set - too short for fallback.` };\n        }\n        let fReps = Math.floor(remainingDistanceForMainSet/fDist);\n        fReps = Math.min(fReps, (fDist === 50 ? 8:12) );\n        if (fReps > 0) {\n             sets.push(`${fReps}x${fDist} swim (${energySystem} focus) r30\"`);\n             mainSetTotalDist = fReps * fDist;\n        }\n    }\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set.` };\n};\n","const sp2Distances = [25, 50];\n\nexport const MAX_SPRINT = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100 - (10 + Math.random() * 15);\n    let numReps = 0;\n    let repDist = 0;\n\n    const has50 = sp2Distances.includes(50);\n    const has25 = sp2Distances.includes(25);\n\n    if (remainingDistanceForMainSet < (has25 ? 25 : (has50 ? 50 : Infinity))) {\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set - too short.` };\n    }\n\n    let initialRepDist;\n    if (has50 && remainingDistanceForMainSet >= 750) {\n        initialRepDist = 50;\n    } else if (has25) {\n        initialRepDist = 25;\n    } else if (has50) {\n        initialRepDist = 50;\n    } else {\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set - no valid distances.` };\n    }\n\n    const initialAbsoluteMaxReps = (initialRepDist === 50) ? 24 : 32; // Changed from 30:40\n    let numRepsForInitialDist = 0;\n    if (initialRepDist > 0) {\n        numRepsForInitialDist = Math.min(Math.floor(remainingDistanceForMainSet / initialRepDist), initialAbsoluteMaxReps);\n    }\n\n    let currentCalcDist = numRepsForInitialDist * initialRepDist;\n\n    repDist = initialRepDist;\n    numReps = numRepsForInitialDist;\n\n    if (initialRepDist === 25 && has50) {\n        const potentialReps50 = Math.min(Math.floor(remainingDistanceForMainSet / 50), 24); // Changed cap from 30 to 24\n        const potentialDist50 = potentialReps50 * 50;\n        const isSignificantUndershootWith25s = currentCalcDist < remainingDistanceForMainSet * 0.85;\n\n        if (isSignificantUndershootWith25s && potentialDist50 > currentCalcDist) {\n            repDist = 50;\n            numReps = potentialReps50;\n        }\n    }\n\n    if (numReps === 0 && repDist > 0 && remainingDistanceForMainSet >= repDist) {\n        numReps = 1;\n    }\n\n    if (numReps > 0 && repDist > 0) {\n        mainSetTotalDist = numReps * repDist;\n        const sp2Rest = \"1'r\";\n        sets.push(`${numReps}x${repDist} UW sprint (${energySystem} focus, breath at wall) @ ${sp2Rest}`);\n    } else {\n        mainSetTotalDist = 0;\n        sets = [];\n    }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set.` };\n};\n","export const GENERAL_ENDURANCE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100;\n    const generalDistances = [400, 300, 200, 100, 50];\n    let bestRepDist = 0;\n    let bestNumReps = 0;\n    let smallestRemainder = Infinity;\n\n    if (remainingDistanceForMainSet < 25) { // Smallest possible rep distance\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) set - too short.` };\n    }\n\n    for (const dist of generalDistances) {\n        if (remainingDistanceForMainSet >= dist) {\n            let currentNumReps = Math.floor(remainingDistanceForMainSet / dist);\n            let currentRemainder = remainingDistanceForMainSet - (currentNumReps * dist);\n            if (currentNumReps > 0) { // Only consider if at least one rep is possible\n                if (currentRemainder < smallestRemainder) {\n                    smallestRemainder = currentRemainder;\n                    bestRepDist = dist;\n                    bestNumReps = currentNumReps;\n                } else if (currentRemainder === smallestRemainder) {\n                    if (dist > bestRepDist) { // Prefer larger rep distance for same remainder\n                        bestRepDist = dist;\n                        bestNumReps = currentNumReps;\n                    }\n                }\n            }\n        }\n    }\n\n    if (bestNumReps === 0 && remainingDistanceForMainSet >= 25) {\n        // If no standard dist fits (e.g. remaining 75), make one up\n        // Try to make it a multiple of 25 or 50.\n        if (remainingDistanceForMainSet >= 50) {\n             bestRepDist = Math.floor(remainingDistanceForMainSet / 50) * 50;\n             if(bestRepDist === 0) bestRepDist = 50; // if remaining is e.g. 70, floor(70/50)*50 = 50\n        } else { // remaining is 25 to 49\n             bestRepDist = 25;\n        }\n        if (bestRepDist > 0) bestNumReps = Math.floor(remainingDistanceForMainSet / bestRepDist);\n        if (bestNumReps * bestRepDist > remainingDistanceForMainSet) bestNumReps = 0; // safety\n    }\n\n    // --- Start of new conservative adjustment logic ---\n    if (bestNumReps > 0 && bestRepDist > 0) {\n        let calculatedDist = bestNumReps * bestRepDist;\n\n        if (calculatedDist > remainingDistanceForMainSet * 0.80 && bestRepDist >= 200 && bestNumReps > 2) {\n            console.log(`DEBUG GENERAL_ENDURANCE: Conservative adjustment. Original reps: ${bestNumReps}x${bestRepDist}. Reducing reps by 1.`);\n            bestNumReps--;\n        }\n    }\n    // --- End of new conservative adjustment logic ---\n\n    if (bestNumReps > 0 && bestRepDist > 0) { // Ensure still valid after potential decrement\n        let restTime = 30;\n        if (bestRepDist >= 400) restTime = 45;\n        else if (bestRepDist >= 200) restTime = 30;\n        else if (bestRepDist >= 100) restTime = 20;\n        else restTime = 15;\n        sets.push(`${bestNumReps}x${bestRepDist} swim (${energySystem} focus) r${restTime}\"`);\n        mainSetTotalDist = bestNumReps * bestRepDist;\n    } else {\n         mainSetTotalDist = 0;\n    }\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) default set.` };\n};\n","import { ENDURANCE_BASE } from './mainSets/ENDURANCE_BASE.js';\nimport { THRESHOLD_SUSTAINED } from './mainSets/THRESHOLD_SUSTAINED.js';\nimport { THRESHOLD_DEVELOPMENT } from './mainSets/THRESHOLD_DEVELOPMENT.js';\nimport { SPEED_ENDURANCE } from './mainSets/SPEED_ENDURANCE.js';\nimport { MAX_SPRINT } from './mainSets/MAX_SPRINT.js';\nimport { GENERAL_ENDURANCE } from './mainSets/GENERAL_ENDURANCE.js';\n\nconst mainSetDefinitions = {\n    'ENDURANCE_BASE': ENDURANCE_BASE,\n    'THRESHOLD_SUSTAINED': THRESHOLD_SUSTAINED,\n    'THRESHOLD_DEVELOPMENT': THRESHOLD_DEVELOPMENT,\n    'SPEED_ENDURANCE': SPEED_ENDURANCE,\n    'MAX_SPRINT': MAX_SPRINT,\n    'GENERAL_ENDURANCE': GENERAL_ENDURANCE\n};\n\nexport { mainSetDefinitions };\n","/**\n * Selects a warmup routine.\n * There's a 90% chance of selecting a warmup from the availableWarmups array,\n * and a 10% chance of selecting the noWarmupOption.\n *\n * @param {Array<Object>} availableWarmups - An array of warmup objects. Each object should have at least 'desc' and 'dist' properties.\n * @param {Object} noWarmupOption - An object representing the option of no warmup. Should have 'desc' and 'dist'.\n * @returns {Object} The selected warmup object.\n */\nfunction selectWarmup(availableWarmups, noWarmupOption) {\n    const useWarmup = Math.random() > 0.1; // 90% chance of including a warmup\n\n    if (useWarmup && availableWarmups && availableWarmups.length > 0) {\n        return availableWarmups[Math.floor(Math.random() * availableWarmups.length)];\n    } else {\n        return noWarmupOption;\n    }\n}\n\n/**\n * Selects a cooldown routine randomly from the available options.\n *\n * @param {Array<Object>} availableCooldowns - An array of cooldown objects. Each object should have at least 'desc' and 'dist' properties.\n * @returns {Object|null} The selected cooldown object, or null if no cooldowns are available or an error occurs.\n */\nfunction selectCooldown(availableCooldowns) {\n    if (availableCooldowns && availableCooldowns.length > 0) {\n        return availableCooldowns[Math.floor(Math.random() * availableCooldowns.length)];\n    }\n    return null; // Or return a default cooldown if preferred\n}\n\n/**\n * Generates the main set for a workout based on the energy system.\n *\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {string} workoutType - The type of workout (e.g., 'THRESHOLD_SUSTAINED').\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {Object} mainSetDefinitions - Object mapping workout types to generator functions.\n * @returns {{ sets: string[], mainSetTotalDist: number, targetPacePer100: number, descriptiveMessage?: string }}\n *           An object containing the sets, total distance of the main set, target pace,\n *           and an optional descriptive message for unknown or default systems.\n */\nfunction generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions) {\n    let generator = mainSetDefinitions[workoutType];\n    let messageFromOuterScope;\n\n    if (!generator) {\n        messageFromOuterScope = `Unknown workout type: ${workoutType}. Defaulting to general endurance.`;\n        generator = mainSetDefinitions['GENERAL_ENDURANCE'];\n    }\n\n    // The generator function now expects energySystem as its first param.\n    let mainSetOutput = generator(energySystem, cssSecondsPer100, remainingDistanceForMainSet);\n\n    // Fallback condition: if the selected generator (not GENERAL_ENDURANCE) produced a very small set\n    if (mainSetOutput.mainSetTotalDist < 100 && remainingDistanceForMainSet > 100 && workoutType !== 'GENERAL_ENDURANCE') {\n        let fallbackMessage = \"(Fallback to general endurance due to low generated distance for selected workout type).\";\n\n        const originalMessage = mainSetOutput.descriptiveMessage; // Message from the original, tiny set\n        mainSetOutput = mainSetDefinitions['GENERAL_ENDURANCE'](energySystem, cssSecondsPer100, remainingDistanceForMainSet); // Rerun with GENERAL_ENDURANCE\n\n        // Construct descriptive message for fallback\n        let finalFallbackMessage = fallbackMessage;\n        if (originalMessage) { // If the original (tiny) set had a message\n            finalFallbackMessage = originalMessage + \" \" + fallbackMessage;\n        } else if (mainSetOutput.descriptiveMessage) { // If GENERAL_ENDURANCE set has a message\n            finalFallbackMessage = fallbackMessage + \" \" + mainSetOutput.descriptiveMessage;\n        }\n        mainSetOutput.descriptiveMessage = finalFallbackMessage;\n    } else {\n        // No fallback, or it was a direct 'GENERAL_ENDURANCE' call.\n        // If messageFromOuterScope was set (i.e., unknown workout type), it takes precedence\n        // unless the generator provided its own more specific message.\n        if (messageFromOuterScope) {\n            if (!mainSetOutput.descriptiveMessage) {\n                mainSetOutput.descriptiveMessage = messageFromOuterScope;\n            } else {\n                // If generator (GENERAL_ENDURANCE in this case) set a message, and it was an unknown type,\n                // combine or prioritize. For now, \"Unknown type\" message is more specific to the situation.\n                mainSetOutput.descriptiveMessage = messageFromOuterScope + \" Original generator message: \" + mainSetOutput.descriptiveMessage;\n            }\n        } else if (workoutType === 'GENERAL_ENDURANCE' && !mainSetOutput.descriptiveMessage) {\n            // If it was a direct 'GENERAL_ENDURANCE' call and the generator provided no message (unlikely with current data)\n            mainSetOutput.descriptiveMessage = `General Endurance (${energySystem}) set.`;\n        }\n    }\n    return mainSetOutput;\n}\n\nconst workoutFunctions = {\n    selectWarmup,\n    selectCooldown,\n    generateMainSet\n};\n\nexport default workoutFunctions;\n","import { warmups, noWarmupOption } from './data/warmups.js';\nimport { cooldowns } from './data/cooldowns.js';\nimport { mainSetDefinitions } from './data/mainSets.js';\nimport workoutComponents from './workoutComponents.js';\n\n// Helper function to convert MM:SS time string to total seconds per 100 units\nexport function parseCssTimeToSeconds(cssTimeStr) {\n    if (typeof cssTimeStr !== 'string') {\n        return null;\n    }\n    const parts = cssTimeStr.split(':');\n    if (parts.length === 2) {\n        const minutes = parseInt(parts[0], 10);\n        const seconds = parseFloat(parts[1]);\n        if (isNaN(minutes) || isNaN(seconds)) {\n            return null;\n        }\n        return minutes * 60 + seconds;\n    }\n    return null; // Invalid format\n}\n\n// Helper function to format total seconds per 100 units back to MM:SS\nexport function formatSecondsToMmSs(totalSeconds) {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = (totalSeconds % 60).toFixed(1); // One decimal for seconds\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n/**\n * Generates a random workout based on distance, energy system, and CSS time.\n * @param {number} totalDistanceYards - The approximate total desired workout distance in yards.\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2', 'EN3', 'SP1', 'SP2').\n * @param {string} cssTimeMmSs - The Critical Swim Speed in MM:SS format (e.g., '1:10').\n * @param {string} workoutType - The type of workout (e.g., 'threshold', 'anaerobic').\n * @returns {string} A formatted string describing the generated workout.\n */\nfunction generateWorkout(totalDistanceYards, energySystem, cssTimeMmSs, workoutType) {\n    const VERY_SHORT_WORKOUT_THRESHOLD = 600; // yards\n    // noWarmupOption is imported and can be used directly or cloned if description needs change for this specific case\n    // const noWarmupForShortOption = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n\n    const cssSecondsPer100 = parseCssTimeToSeconds(cssTimeMmSs);\n    if (cssSecondsPer100 === null) {\n        return \"Error: Invalid CSS time format. Please use MM:SS (e.g., '1:10').\";\n    }\n\n    let workoutDetails = [];\n    let currentDistanceCovered = 0;\n    const mainSetUnits = \"yards\"; // Assuming SCY based on sources unless specified otherwise [7, 9, 16]\n\n    // --- 1. Warmup Selection ---\n    let selectedWarmup;\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedWarmup = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n    } else {\n        // Re-introducing adaptive warmup logic for non-very-short workouts, with the specified modification\n        selectedWarmup = workoutComponents.selectWarmup(warmups, noWarmupOption); // Initial selection\n        if (selectedWarmup && selectedWarmup.dist > 0) {\n            const minMainSetThreshold = 200;\n            let maxAllowedWarmupDist = totalDistanceYards - minMainSetThreshold;\n\n            // Apply the more stringent percentage cap: 0.4 (40%) instead of 0.6\n            maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.4);\n\n            if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) {\n                 maxAllowedWarmupDist = totalDistanceYards * 0.4; // Fallback for small total distances if threshold makes it negative\n                                                                  // This 0.4 is different from the one above.\n                                                                  // Let's keep it as it was for this specific fallback:\n                 // maxAllowedWarmupDist = totalDistanceYards * 0.4; // This logic was for very small total distances\n                 // The logic from file before reset was:\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // This specific 0.4 should remain if it's for the negative guard, distinct from the primary cap.\n                 // Re-evaluating based on typical structure: the primary cap (now 0.4) applies first.\n                 // Then, specific conditions for very small distances adjust if it results in negative or too small.\n                 // The previous adaptive logic was:\n                 // maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.6); // This is now 0.4\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // The above line (totalDistanceYards * 0.4) was a fallback if the (totalDistanceYards - minMainSetThreshold) was negative.\n                 // It seems the logic should be:\n                 // 1. max = total - threshold\n                 // 2. max = min(max, total * NEW_PRIMARY_CAP (0.4))\n                 // 3. if max < 0 (because total was small), max = total * FALLBACK_CAP_FOR_SMALL_TOTAL (e.g. 0.4 or 0.5)\n                 // 4. if max < 50 (and total >=50), max = 50.\n                 // Let's stick to the prompt's direct change on the percentage line first.\n                 // The other parts of the adaptive logic are:\n            } // End of the \"maxAllowedWarmupDist < 0\" check\n\n            if (maxAllowedWarmupDist < 50 && totalDistanceYards >= 50) {\n                 maxAllowedWarmupDist = 50;\n            }\n            // Add a final guard if maxAllowedWarmupDist somehow ended up negative (e.g. if totalDistanceYards was < 50 but > 0)\n            if (maxAllowedWarmupDist < 0) maxAllowedWarmupDist = 0;\n\n\n            if (selectedWarmup.dist > maxAllowedWarmupDist) {\n                const suitableWarmups = warmups.filter(wu => wu.dist <= maxAllowedWarmupDist && wu.dist > 0);\n                if (suitableWarmups.length > 0) {\n                    selectedWarmup = suitableWarmups[Math.floor(Math.random() * suitableWarmups.length)];\n                } else {\n                    selectedWarmup = noWarmupOption;\n                }\n            }\n        } else if (!selectedWarmup || selectedWarmup.dist === 0) {\n            selectedWarmup = noWarmupOption;\n        }\n    }\n\n    if (selectedWarmup) {\n        workoutDetails.push(`WU: ${selectedWarmup.desc}`);\n        currentDistanceCovered += selectedWarmup.dist;\n    }\n\n    // --- 2. Main Set Generation ---\n    let mainSetDescription = \"Main Set:\";\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100;\n    let remainingDistanceForMainSet = totalDistanceYards - currentDistanceCovered;\n\n    const mainSetResult = workoutComponents.generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions);\n    sets = mainSetResult.sets;\n    mainSetTotalDist = mainSetResult.mainSetTotalDist;\n    targetPacePer100 = mainSetResult.targetPacePer100;\n\n    if (mainSetResult.descriptiveMessage) {\n        mainSetDescription += ` ${mainSetResult.descriptiveMessage}`;\n    }\n\n    workoutDetails.push(mainSetDescription);\n    sets.forEach(set => {\n        workoutDetails.push(`  - ${set}`);\n    });\n    currentDistanceCovered += mainSetTotalDist;\n\n    // --- 3. Cool-down Selection ---\n    let selectedCooldown;\n    const noCooldownForShortOption = { desc: \"No cooldown (short workout)\", dist: 0, type: \"none\" };\n\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedCooldown = noCooldownForShortOption;\n    } else {\n        // Re-introducing adaptive cooldown logic with the specified modification\n        const generalNoCooldownOption = { desc: \"No cooldown\", dist: 0, type: \"none\" }; // General purpose\n        const distanceAfterMainSet = currentDistanceCovered;\n        const distanceToTarget = totalDistanceYards - distanceAfterMainSet;\n\n        if (distanceAfterMainSet >= totalDistanceYards - 50) {\n            selectedCooldown = generalNoCooldownOption;\n        } else {\n            // Apply the more stringent buffer: 25 instead of 75\n            const suitableCooldowns = cooldowns.filter(cd => cd.dist <= distanceToTarget + 25);\n\n            if (suitableCooldowns.length > 0) {\n                selectedCooldown = suitableCooldowns[Math.floor(Math.random() * suitableCooldowns.length)];\n            } else {\n                selectedCooldown = generalNoCooldownOption;\n            }\n        }\n    }\n\n    if (selectedCooldown) {\n        workoutDetails.push(`CD: ${selectedCooldown.desc}`);\n        currentDistanceCovered += selectedCooldown.dist;\n    }\n\n    // --- 4. Final Details ---\n    workoutDetails.push(`\\nTotal estimated distance: ${currentDistanceCovered} ${mainSetUnits}`);\n    workoutDetails.push(`CSS: ${cssTimeMmSs}`);\n    workoutDetails.push(`Workout Type: ${workoutType}`); // Added Workout Type\n    workoutDetails.push(`Energy System Focus: ${energySystem.toUpperCase()}`);\n    // A rough estimate of average pace, as true average depends on actual interval times and rest\n    workoutDetails.push(`Estimated AVG pace for main set: ${formatSecondsToMmSs(targetPacePer100)} / 100 ${mainSetUnits}`);\n\n    return workoutDetails.join('\\n');\n}\n\nexport { generateWorkout }; // Keep generateWorkout exported as it's likely the main API\n\n// --- Example Usage ---\n// console.log(generateWorkout(3000, 'EN3', '1:20'));\n// console.log(generateWorkout(2000, 'SP1', '1:10'));\n// console.log(generateWorkout(1500, 'SP2', '1:15'));\n// console.log(generateWorkout(2500, 'EN2', '1:12'));\n// console.log(generateWorkout(1800, 'EN1', '1:25'));","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  // console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    // console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      // console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      // console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport { generateWorkout as generateCssWorkout } from './css.js';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  // console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  // console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      // console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  // console.log(pattern);\n\n  return pattern;\n}\n\nexport { generateCssWorkout };\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    // console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  // console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["warmups","desc","dist","type","noWarmupOption","cooldowns","en1Distances","ENDURANCE_BASE","energySystem","cssSecondsPer100","remainingDistanceForMainSet","sets","mainSetTotalDist","targetPacePer100","Math","random","descriptiveMessage","concat","en1RepDist","numEn1Reps","shortEn1Dists","_i","_shortEn1Dists","length","floor","midEn1Dists","bestCurrentRepDist","bestCurrentNumReps","smallestRemainderSoFar","Infinity","_i2","_midEn1Dists","currentNumReps","maxRepsForDist","min","currentRemainder","selectedDist","j","en1Rest","push","en2Distances","THRESHOLD_SUSTAINED","en2RepDist","possibleDists","filter","d","numEn2Reps","max","en2Rest","en3Distances","en3SecondaryDistances","THRESHOLD_DEVELOPMENT","en3Rest","en3RepDist","numEn3Reps","newRemainingDistance","secondaryDist","possibleSecDists","secondaryReps","fallbackDist","fallbackReps","sp1Distances","sp1Drills","SPEED_ENDURANCE","numBlocks","blockDistRemainingForReps","accumulatedDist","i","targetDistForCurrentBlock","easyBreakDist","addEasyBreakString","repDist","numReps","currentBlockActualRepDist","rest","drillType","fallbackRepDist","includes","fallbackNumReps","fDist","fReps","sp2Distances","MAX_SPRINT","has50","has25","initialRepDist","initialAbsoluteMaxReps","numRepsForInitialDist","currentCalcDist","potentialReps50","potentialDist50","isSignificantUndershootWith25s","sp2Rest","GENERAL_ENDURANCE","generalDistances","bestRepDist","bestNumReps","smallestRemainder","_generalDistances","calculatedDist","console","log","restTime","mainSetDefinitions","selectWarmup","availableWarmups","useWarmup","selectCooldown","availableCooldowns","generateMainSet","workoutType","generator","messageFromOuterScope","mainSetOutput","fallbackMessage","originalMessage","finalFallbackMessage","workoutFunctions","parseCssTimeToSeconds","cssTimeStr","parts","split","minutes","parseInt","seconds","parseFloat","isNaN","formatSecondsToMmSs","totalSeconds","toFixed","generateWorkout","totalDistanceYards","cssTimeMmSs","VERY_SHORT_WORKOUT_THRESHOLD","workoutDetails","currentDistanceCovered","mainSetUnits","selectedWarmup","_objectSpread","workoutComponents","minMainSetThreshold","maxAllowedWarmupDist","suitableWarmups","wu","mainSetDescription","mainSetResult","forEach","set","selectedCooldown","noCooldownForShortOption","generalNoCooldownOption","distanceAfterMainSet","distanceToTarget","suitableCooldowns","cd","toUpperCase","join","getThingViaTimeLimit","key","secondsLeft","things","number","arguments","undefined","filteredThings","_","thing","sample","repeatIntervals","generatedPattern","selectedSwim","swims","time","timeLeft","maxRepetition","interval","intervalLength","secondsToAdd","intervals","name","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","swimLength","group","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","repeat"],"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"}