{"version":3,"file":"swim-generator.umd.js","sources":["../lib/data/warmups.js","../lib/data/cooldowns.js","../lib/workoutGenerator.js","../lib/data/mainSetConfigs.js","../lib/data/mainSets.js","../lib/workoutComponents.js","../lib/css.js","../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["// Warmup options based on various sources [2, 5, 7, 8, 11, 13, 15, 17, 19, 20]\nconst warmups = [\n    { desc: \"200 no fins, 200 w fins swim\", dist: 400, type: \"swim\" }, //[2]\n    { desc: \"400 warmup (75 kick, 25 under)\", dist: 400, type: \"kick\" }, //[5]\n    { desc: \"250 pull warmup, 250 swim warmup\", dist: 500, type: \"pull/swim\" }, //[20]\n    { desc: \"250 warmup\", dist: 250, type: \"general\" }, //[8, 13]\n    { desc: \"200 warm up\", dist: 200, type: \"general\" }, //[7]\n    { desc: \"500 warmup\", dist: 500, type: \"general\" }, //[11, 17]\n    { desc: \"300 warm up\", dist: 300, type: \"general\" }, //[15]\n    { desc: \"150 warm up\", dist: 150, type: \"general\" }, //[19]\n];\n\n// Option for no warmup, as seen in some sources [1, 9]\nconst noWarmupOption = { desc: \"No warmup bitches\", dist: 0, type: \"none\" }; //[1]\n\nexport { warmups, noWarmupOption };\n","// Cool-down options based on various sources [2, 5, 7, 9, 10, 12, 13, 16, 17, 19-21]\nconst cooldowns = [\n    { desc: \"200 w fins (or combo)\", dist: 200, type: \"fins\" }, //[2]\n    { desc: \"200 swim cooldown\", dist: 200, type: \"swim\" }, //[5]\n    { desc: \"100 cool down\", dist: 100, type: \"general\" }, //[7]\n    { desc: \"300 CD\", dist: 300, type: \"general\" }, //[9]\n    { desc: \"200 CD\", dist: 200, type: \"general\" }, //[10, 16, 21]\n    { desc: \"450 cooldown (300 swim, 150 under)\", dist: 450, type: \"swim/under\" }, //[20]\n    { desc: \"100 cool\", dist: 100, type: \"general\" }, //[17]\n    { desc: \"150 cooldown and 20 minutes of stick skills\", dist: 150, type: \"general\" }, //[19]\n    { desc: \"100 fin swim cooldown\", dist: 100, type: \"fin swim\" }, //[12]\n    { desc: \"250 cool down\", dist: 250, type: \"general\" }, //[13]\n];\n\nexport { cooldowns };\n","// lib/workoutGenerator.js - V3_SCHEMA_UPDATE_MARKER_GENERATOR\n\n// --- Helper Functions ---\n\nfunction calculateTargetPace(cssSecondsPer100, paceConfig) {\n    if (!paceConfig || typeof cssSecondsPer100 !== 'number') {\n        return cssSecondsPer100;\n    }\n    let pace = cssSecondsPer100;\n    const offset = paceConfig.offset || 0;\n    const randomRange = paceConfig.randomRange || 0;\n    let randomComponent = 0;\n    if (randomRange > 0) {\n        randomComponent = Math.random() * randomRange;\n    }\n    const totalAdjustment = offset + randomComponent;\n    if (paceConfig.operator === \"+\") {\n        pace += totalAdjustment;\n    } else if (paceConfig.operator === \"-\") {\n        pace -= totalAdjustment;\n    }\n    return pace;\n}\n\nfunction formatDescriptiveMessage(template, params) {\n    if (!template) return \"No descriptive message template provided.\";\n    let message = template;\n    for (const key in params) {\n        if (params[key] !== undefined) {\n            message = message.replace(new RegExp(`{${key}}`, 'g'), params[key]);\n        }\n    }\n    message = message.replace(/{[^}]+}/g, '');\n    return message.trim();\n}\n\nfunction formatSetString(setInfo, energySystem, formatConfig) {\n    let structure = formatConfig.baseStructure || \"{reps}x{dist} {activity} ({energySystem} focus) {rest}\";\n    structure = structure.replace(\"{reps}\", setInfo.reps);\n    structure = structure.replace(\"{dist}\", setInfo.dist);\n    structure = structure.replace(\"{activity}\", setInfo.activity || formatConfig.defaultActivity || \"swim\");\n    structure = structure.replace(\"{energySystem}\", energySystem);\n    structure = structure.replace(\"{rest}\", setInfo.restString || \"\");\n    structure = structure.replace(\"{paceDesc}\", setInfo.paceDesc || \"\");\n    structure = structure.replace(\"{notes}\", setInfo.notes || \"\"); // Added notes\n    return structure.trim().replace(/\\s\\s+/g, ' ').replace(/\\s\\(@/g, ' @').replace(/\\s\\(\\s*,/g, ' (').replace(/,\\s*\\)/g, ')').replace(/\\(\\s*\\)/g, ''); // Clean up\n}\n\nfunction getRestString(repDist, restConfig, patternRestValue) {\n    if (!restConfig) return 'r10\"';\n    switch (restConfig.type) {\n        case \"fixed\": return restConfig.value;\n        case \"customFunction\":\n            if (typeof restConfig.customFunction === 'function') return restConfig.customFunction(repDist);\n            return 'r10\"';\n        case \"distanceBased\": {\n            const sortedKeys = Object.keys(restConfig.values).filter(k => k !== 'default').map(Number).sort((a, b) => b - a);\n            for (const keyDist of sortedKeys) {\n                if (repDist >= keyDist) return restConfig.values[keyDist];\n            }\n            return restConfig.values.default || 'r10\"';\n        }\n        case \"patternDefined\": return patternRestValue || \"\";\n        default: return 'r10\"';\n    }\n}\n\n// --- Strategy Implementations ---\n\nfunction generateSet_BestFitSingleRepetition(remainingDistance, strategyConfig, restConfig, energySystem, setFormattingConfig) {\n    const { setDefinitions, selectionPreference } = strategyConfig; // Use setDefinitions\n    let bestOption = { setDef: null, reps: 0, totalYardage: 0, isPreferredShorter: false };\n\n    for (const setDef of setDefinitions) { // Iterate over setDefinitions\n        const currentDist = setDef.distance;\n        if (setDef.repScheme.type === \"dynamic\" && remainingDistance >= currentDist) {\n            let currentReps = Math.floor(remainingDistance / currentDist);\n            if (currentReps === 0) continue;\n\n            const maxReps = setDef.repScheme.maxReps || Infinity;\n            currentReps = Math.min(currentReps, maxReps);\n            if (setDef.repScheme.minReps) {\n                currentReps = Math.max(currentReps, setDef.repScheme.minReps);\n                if (currentReps * currentDist > remainingDistance) continue; // Not enough for minReps\n            }\n\n\n            if (currentReps > 0) {\n                const currentTotalYardage = currentReps * currentDist;\n                const isCurrentDistPreferredShorter = selectionPreference.shorterRepValue && currentDist === selectionPreference.shorterRepValue;\n\n                if (currentTotalYardage > bestOption.totalYardage) {\n                    bestOption = { setDef, reps: currentReps, totalYardage: currentTotalYardage, isPreferredShorter: isCurrentDistPreferredShorter };\n                } else if (currentTotalYardage === bestOption.totalYardage) {\n                    if (selectionPreference.tiebreakYardage === \"preferShorterRepIfSameYardageThenMoreReps\") {\n                        if (!bestOption.isPreferredShorter && isCurrentDistPreferredShorter) {\n                            bestOption = { setDef, reps: currentReps, totalYardage: currentTotalYardage, isPreferredShorter: isCurrentDistPreferredShorter };\n                        } else if (bestOption.isPreferredShorter === isCurrentDistPreferredShorter && currentReps > bestOption.reps) {\n                            bestOption = { setDef, reps: currentReps, totalYardage: currentTotalYardage, isPreferredShorter: isCurrentDistPreferredShorter };\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (bestOption.reps > 0 && bestOption.setDef) {\n        const chosenSetDef = bestOption.setDef;\n        const rest = chosenSetDef.rest || getRestString(chosenSetDef.distance, restConfig); // Prioritize setDef.rest\n        const setInfo = {\n            reps: bestOption.reps,\n            dist: chosenSetDef.distance,\n            restString: rest,\n            activity: chosenSetDef.activity || setFormattingConfig.defaultActivity || \"swim\",\n            paceDesc: chosenSetDef.paceDescription, // Pass through if available\n            notes: chosenSetDef.notes,\n        };\n        return {\n            generatedSets: [setInfo],\n            totalDistance: bestOption.totalYardage,\n            strategySpecificSummary: `${bestOption.reps}x${chosenSetDef.distance}`,\n            restSummary: rest\n        };\n    }\n    return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"No suitable reps found.\" };\n}\n\nfunction generateSet_ClosestFitGeneral(remainingDistance, strategyConfig, restConfig, energySystem, setFormattingConfig) {\n    const { setDefinitions, minRepDistanceForFallback, conservativeAdjustment } = strategyConfig; // Use setDefinitions\n    let bestRepDist = 0;\n    let bestNumReps = 0;\n    let smallestRemainder = Infinity;\n    let chosenSetDef = null;\n\n    for (const setDef of setDefinitions) { // Iterate over setDefinitions\n        const dist = setDef.distance;\n        if (remainingDistance >= dist) {\n            let currentNumReps = Math.floor(remainingDistance / dist);\n            let currentRemainder = remainingDistance - (currentNumReps * dist);\n            if (currentNumReps > 0) {\n                if (currentRemainder < smallestRemainder) {\n                    smallestRemainder = currentRemainder;\n                    bestRepDist = dist;\n                    bestNumReps = currentNumReps;\n                    chosenSetDef = setDef;\n                } else if (currentRemainder === smallestRemainder) {\n                    if (dist > bestRepDist) {\n                        bestRepDist = dist;\n                        bestNumReps = currentNumReps;\n                        chosenSetDef = setDef;\n                    }\n                }\n            }\n        }\n    }\n\n    if (bestNumReps === 0 && remainingDistance >= minRepDistanceForFallback) {\n        if (remainingDistance >= 50) {\n             bestRepDist = Math.floor(remainingDistance / 50) * 50;\n             if(bestRepDist === 0) bestRepDist = 50;\n        } else {\n             bestRepDist = minRepDistanceForFallback;\n        }\n        if (bestRepDist > 0) bestNumReps = Math.floor(remainingDistance / bestRepDist);\n        if (bestNumReps * bestRepDist > remainingDistance || (bestNumReps === 0 && bestRepDist > 0 && remainingDistance >= bestRepDist) ) {\n            if (remainingDistance >= bestRepDist && bestRepDist > 0) bestNumReps = Math.floor(remainingDistance/bestRepDist);\n            else bestNumReps = 0;\n        }\n        if (bestNumReps > 0) { // Find a matching setDef for fallback or use defaults\n            chosenSetDef = setDefinitions.find(sd => sd.distance === bestRepDist) || { distance: bestRepDist };\n        }\n    }\n\n    if (bestNumReps > 0 && bestRepDist > 0 && conservativeAdjustment && conservativeAdjustment.enabled) {\n        let calculatedDist = bestNumReps * bestRepDist;\n        if (calculatedDist > remainingDistance * conservativeAdjustment.usageThresholdFactor &&\n            bestRepDist >= conservativeAdjustment.minRepDistance &&\n            bestNumReps >= conservativeAdjustment.minReps) {\n            bestNumReps--;\n        }\n    }\n\n    if (bestNumReps > 0 && bestRepDist > 0 && chosenSetDef) {\n        const rest = chosenSetDef.rest || getRestString(bestRepDist, restConfig);\n        const setInfo = {\n            reps: bestNumReps,\n            dist: bestRepDist,\n            restString: rest,\n            activity: chosenSetDef.activity || setFormattingConfig.defaultActivity || \"swim\",\n            paceDesc: chosenSetDef.paceDescription,\n            notes: chosenSetDef.notes,\n        };\n        return {\n            generatedSets: [setInfo],\n            totalDistance: bestNumReps * bestRepDist,\n            strategySpecificSummary: `${bestNumReps}x${bestRepDist}`,\n            restSummary: rest\n        };\n    }\n    return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"No suitable reps found.\" };\n}\n\nfunction generateSet_TargetYardageRepChoice(remainingDistance, strategyConfig, restConfig, energySystem, setFormattingConfig) {\n    const {\n        setTargetDistanceMin,\n        setTargetDistanceMaxDefault,\n        setTargetDistanceMaxCap,\n        setDefinitions, // Use setDefinitions\n        repChoiceLogic\n    } = strategyConfig;\n\n    let actualTargetYardage = Math.min(remainingDistance, setTargetDistanceMaxCap);\n    actualTargetYardage = Math.max(actualTargetYardage, setTargetDistanceMin);\n    if(setTargetDistanceMaxDefault) {\n        actualTargetYardage = Math.min(actualTargetYardage, setTargetDistanceMaxDefault);\n    }\n\n    const availableRepDistances = setDefinitions.map(sd => sd.distance).sort((a,b)=>a-b);\n    if (actualTargetYardage < availableRepDistances[0]) {\n        return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"Target yardage too low for any rep.\" };\n    }\n\n    let chosenSetDef = null;\n    const preferredSetDef = setDefinitions.find(sd => sd.distance === repChoiceLogic.preferDistance);\n\n    if (preferredSetDef && actualTargetYardage >= preferredSetDef.distance && actualTargetYardage >= repChoiceLogic.thresholdYardage) {\n        chosenSetDef = preferredSetDef;\n    } else {\n        const sortedAvailableSetDefs = setDefinitions.filter(sd => actualTargetYardage >= sd.distance).sort((a,b) => a.distance - b.distance);\n        if(sortedAvailableSetDefs.length > 0) {\n            chosenSetDef = sortedAvailableSetDefs[0];\n        }\n    }\n\n    if (!chosenSetDef) {\n         return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"Could not select rep distance for target.\" };\n    }\n\n    const repDist = chosenSetDef.distance;\n    let numReps = Math.floor(actualTargetYardage / repDist);\n    numReps = Math.max(numReps, 1);\n\n    const currentSetTotalYardage = numReps * repDist;\n\n    if (currentSetTotalYardage > 0) {\n        const rest = chosenSetDef.rest || getRestString(repDist, restConfig);\n        const setInfo = {\n            reps: numReps,\n            dist: repDist,\n            restString: rest,\n            activity: chosenSetDef.activity || setFormattingConfig.defaultActivity || \"sprint\",\n            paceDesc: chosenSetDef.paceDescription,\n            notes: chosenSetDef.notes,\n        };\n        return {\n            generatedSets: [setInfo],\n            totalDistance: currentSetTotalYardage,\n            strategySpecificSummary: `${numReps}x${repDist}`,\n            restSummary: rest\n        };\n    }\n    return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"Calculated zero yardage.\" };\n}\n\nfunction generateSet_MultiBlock(remainingDistance, strategyConfig, restConfig) {\n    const {\n        setTargetDistanceMin,\n        setTargetDistanceMaxCap,\n        targetYardagePerBlockApprox,\n        setDefinitions, // Use setDefinitions\n        drills, // Keep drills separate as it's a pool of choices for activity\n        interBlockRest\n    } = strategyConfig;\n\n    let setsOutput = [];\n    let accumulatedDistInSet = 0;\n    const availableRepDistances = setDefinitions.map(sd => sd.distance).sort((a,b) => a-b);\n    const smallestRepDist = availableRepDistances[0];\n\n    let targetOverallYardage = Math.min(remainingDistance, setTargetDistanceMaxCap);\n    targetOverallYardage = Math.max(targetOverallYardage, setTargetDistanceMin);\n\n    if (targetOverallYardage < smallestRepDist) {\n        return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"Overall target yardage too low.\" };\n    }\n\n    let numBlocks = Math.max(1, Math.ceil(targetOverallYardage / targetYardagePerBlockApprox));\n    let remainingForBlocksAllocation = targetOverallYardage;\n\n    for (let i = 0; i < numBlocks; i++) {\n        if (remainingForBlocksAllocation <= 0 || accumulatedDistInSet >= targetOverallYardage) break;\n        if (remainingForBlocksAllocation < smallestRepDist) break;\n\n        let distForCurrentBlockTarget = Math.floor(remainingForBlocksAllocation / (numBlocks - i));\n        distForCurrentBlockTarget = Math.min(distForCurrentBlockTarget, remainingForBlocksAllocation);\n\n        if (distForCurrentBlockTarget < smallestRepDist) continue;\n\n        // Select a SetDefinition for the block (randomly from those that fit)\n        const suitableSetDefs = setDefinitions.filter(sd => sd.distance <= distForCurrentBlockTarget);\n        if (suitableSetDefs.length === 0) continue;\n        let chosenSetDef = suitableSetDefs[Math.floor(Math.random() * suitableSetDefs.length)];\n\n        // If random choice too large, pick largest that fits (already somewhat handled by filter, but good check)\n        // This part of logic might need refinement if random choice is strictly preferred.\n        // For now, ensure it fits:\n        if (chosenSetDef.distance > distForCurrentBlockTarget) {\n             const possibleSetDefs = suitableSetDefs.sort((a,b) => b.distance - a.distance); // get largest\n             if (possibleSetDefs.length > 0) chosenSetDef = possibleSetDefs[0];\n             else continue;\n        }\n\n        const currentRepDist = chosenSetDef.distance;\n        const maxRepsForThisDist = chosenSetDef.repScheme.maxReps || Infinity; // Max reps for this specific distance\n\n        let numReps = Math.floor(distForCurrentBlockTarget / currentRepDist);\n        numReps = Math.min(numReps, maxRepsForThisDist);\n        numReps = Math.max(numReps, chosenSetDef.repScheme.minReps || 1);\n\n        if (numReps * currentRepDist > distForCurrentBlockTarget) {\n             numReps = Math.floor(distForCurrentBlockTarget / currentRepDist);\n        }\n        if (numReps === 0) continue;\n\n        const currentBlockActualYardage = numReps * currentRepDist;\n        if (currentBlockActualYardage > 0) {\n            const blockRepRest = chosenSetDef.rest || getRestString(currentRepDist, restConfig);\n            const drillType = chosenSetDef.activity || drills[Math.floor(Math.random() * drills.length)]; // Prefer activity from setDef\n\n            setsOutput.push({\n                reps: numReps, dist: currentRepDist, activity: drillType, restString: blockRepRest, type: 'mainSetItem',\n                paceDesc: chosenSetDef.paceDescription, notes: chosenSetDef.notes,\n            });\n            accumulatedDistInSet += currentBlockActualYardage;\n            remainingForBlocksAllocation -= currentBlockActualYardage;\n\n            if (i < numBlocks - 1 && remainingForBlocksAllocation >= smallestRepDist && accumulatedDistInSet < targetOverallYardage) {\n                const restSecondsVal = interBlockRest.minSeconds + Math.floor(Math.random() * (interBlockRest.maxSeconds - interBlockRest.minSeconds + 1));\n                const formattedBlockRestText = typeof interBlockRest.format === 'function' ?\n                    interBlockRest.format(restSecondsVal) : `${restSecondsVal}s rest`;\n                setsOutput.push({ type: 'blockRestItem', text: formattedBlockRestText });\n            }\n        }\n    }\n\n    if (accumulatedDistInSet > 0) {\n        return {\n            generatedSets: setsOutput,\n            totalDistance: accumulatedDistInSet,\n            strategySpecificSummary: `${setsOutput.filter(s=>s.type==='mainSetItem').length} block(s), total ${accumulatedDistInSet}yds`,\n            restSummary: \"Varied\"\n        };\n    }\n    return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"No blocks generated.\" };\n}\n\nfunction generateSet_PatternBased(remainingDistance, strategyConfig, restConfig, setFormattingConfig) {\n    const { setDefinitions, selectionLogic, fallbackStrategy } = strategyConfig; // Use setDefinitions\n    let viablePatterns = [];\n\n    for (const setDef of setDefinitions) { // Iterate setDefinitions\n        if (setDef.repScheme.type === 'dynamic' && setDef.distance) {\n            if (remainingDistance >= setDef.distance) {\n                let numReps = Math.floor(remainingDistance / setDef.distance);\n                if (setDef.repScheme.maxReps) numReps = Math.min(numReps, setDef.repScheme.maxReps);\n                if (setDef.repScheme.minReps) numReps = Math.max(numReps, setDef.repScheme.minReps);\n\n                if (numReps > 0 && (numReps * setDef.distance <= remainingDistance) ) {\n                    viablePatterns.push({\n                        ...setDef, // Includes original distance, rest, paceDesc, etc.\n                        reps: numReps,\n                        // dist: setDef.distance, // Already in setDef\n                        totalDist: numReps * setDef.distance,\n                        id: setDef.id || `${numReps}x${setDef.distance}` // Use existing ID or format\n                    });\n                }\n            }\n        } else if (setDef.repScheme.type === 'fixed' && setDef.totalDistance) {\n            if (remainingDistance >= setDef.totalDistance) {\n                // For fixed, reps and dist are already defined in setDef.repScheme.fixedReps and setDef.distance\n                viablePatterns.push({ ...setDef, reps: setDef.repScheme.fixedReps });\n            }\n        }\n    }\n\n    let bestFitSet = null;\n    if (viablePatterns.length > 0) {\n        if (selectionLogic === \"maxAchievedDistance\") {\n             viablePatterns.sort((a, b) => {\n                if (b.totalDist !== a.totalDist) return b.totalDist - a.totalDist;\n                // Approx original index for tie-breaking if needed (indexOf may not work directly on derived objects)\n                return setDefinitions.findIndex(sd => sd.id === a.id) - setDefinitions.findIndex(sd => sd.id === b.id);\n            });\n            bestFitSet = viablePatterns[0];\n        } else if (selectionLogic === \"prioritizeMaxDistanceThenRandom\") {\n            let maxDist = 0;\n            viablePatterns.forEach(p => { if (p.totalDist > maxDist) maxDist = p.totalDist; });\n            const bestDistancePatterns = viablePatterns.filter(p => p.totalDist === maxDist);\n            if (bestDistancePatterns.length > 0) {\n                bestFitSet = bestDistancePatterns[Math.floor(Math.random() * bestDistancePatterns.length)];\n            }\n        } else {\n            bestFitSet = viablePatterns[0];\n        }\n    }\n\n    if (!bestFitSet && fallbackStrategy && fallbackStrategy.setDefinitions && remainingDistance >= fallbackStrategy.minRepDistance) { // Check fallbackStrategy.setDefinitions\n        if (fallbackStrategy.type === \"simpleRepsMaxDistance\") {\n            let bestFallbackOption = null;\n            let maxFallbackYardage = 0;\n            for (const fbSetDef of fallbackStrategy.setDefinitions) { // Iterate fallbackStrategy.setDefinitions\n                if (remainingDistance >= fbSetDef.distance) {\n                    let numReps = Math.floor(remainingDistance / fbSetDef.distance);\n                    if (fbSetDef.repScheme && fbSetDef.repScheme.maxReps) { // Assume fallback options are dynamic\n                       numReps = Math.min(numReps, fbSetDef.repScheme.maxReps);\n                    }\n                    if (fbSetDef.repScheme && fbSetDef.repScheme.minReps) {\n                        numReps = Math.max(numReps, fbSetDef.repScheme.minReps);\n                    }\n\n                    if (numReps > 0 && (numReps * fbSetDef.distance <= remainingDistance)) {\n                        const currentYardage = numReps * fbSetDef.distance;\n                        if (currentYardage > maxFallbackYardage) {\n                            maxFallbackYardage = currentYardage;\n                            bestFallbackOption = {\n                                ...fbSetDef,\n                                reps: numReps,\n                                totalDist: currentYardage,\n                                id: fbSetDef.id || `${numReps}x${fbSetDef.distance} (fallback)`\n                            };\n                        }\n                    }\n                }\n            }\n            if (bestFallbackOption) bestFitSet = bestFallbackOption;\n        }\n    }\n\n    if (bestFitSet) {\n        const rest = bestFitSet.rest || getRestString(bestFitSet.distance, restConfig, bestFitSet.rest);\n        const setInfo = {\n            reps: bestFitSet.reps,\n            dist: bestFitSet.distance,\n            restString: rest,\n            paceDesc: bestFitSet.paceDescription,\n            activity: bestFitSet.activity || setFormattingConfig.defaultActivity || \"swim\",\n            notes: bestFitSet.notes,\n        };\n        return {\n            generatedSets: [setInfo], totalDistance: bestFitSet.totalDist,\n            strategySpecificSummary: bestFitSet.id || `${bestFitSet.reps}x${bestFitSet.distance}`,\n            restSummary: rest, paceDescription: bestFitSet.paceDescription\n        };\n    }\n    return { generatedSets: [], totalDistance: 0, strategySpecificSummary: \"No pattern or fallback matched.\" };\n}\n\n// --- Main Generator Function ---\nexport function generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, config) {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = 0;\n    let descriptiveMessage = \"\";\n\n    if (!config) {\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: \"Error: Workout configuration not provided.\" };\n    }\n\n    targetPacePer100 = calculateTargetPace(cssSecondsPer100, config.paceConfig);\n\n    const getMinRepDistForType = (cfg) => {\n        if (!cfg || !cfg.strategyConfig) return cfg?.minTotalDistanceForSet || 0;\n\n        let minDist = Infinity;\n        if (cfg.strategyConfig.setDefinitions && cfg.strategyConfig.setDefinitions.length > 0) {\n            cfg.strategyConfig.setDefinitions.forEach(sd => {\n                if (sd.distance < minDist) minDist = sd.distance;\n            });\n        }\n        // Check fallback definitions too, if they exist\n        if (cfg.strategyConfig.fallbackStrategy && cfg.strategyConfig.fallbackStrategy.setDefinitions && cfg.strategyConfig.fallbackStrategy.setDefinitions.length > 0) {\n             cfg.strategyConfig.fallbackStrategy.setDefinitions.forEach(sd => {\n                if (sd.distance < minDist) minDist = sd.distance;\n            });\n        }\n        // If still Infinity, means no distances found, use fallbackStrategy.minRepDistance or overall minTotalDistanceForSet\n        if (minDist === Infinity) {\n            minDist = cfg.strategyConfig.fallbackStrategy?.minRepDistance || cfg.minTotalDistanceForSet || 0;\n        }\n        // Final fallback to minTotalDistanceForSet if all else fails or gives 0 but minTotalDistanceForSet is higher\n        return Math.max(minDist, cfg.minTotalDistanceForSet || 0) ;\n    };\n\n\n    if (config.minTotalDistanceForSet && remainingDistanceForMainSet < config.minTotalDistanceForSet) {\n        descriptiveMessage = formatDescriptiveMessage(config.descriptiveMessages.tooShort, {\n            workoutTypeName: config.workoutTypeName,\n            minRepDistForType: String(getMinRepDistForType(config)), // Updated to use the new logic\n            remainingDistance: String(remainingDistanceForMainSet)\n        });\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage };\n    }\n\n    let strategyResult;\n    const strategyFnMap = {\n        \"bestFitSingleRepetition\": generateSet_BestFitSingleRepetition,\n        \"closestFitGeneral\": generateSet_ClosestFitGeneral,\n        \"targetYardageWithRepChoice\": generateSet_TargetYardageRepChoice,\n        \"multiBlock\": generateSet_MultiBlock,\n        \"patternBased\": generateSet_PatternBased,\n    };\n\n    const strategyFn = strategyFnMap[config.setGenerationStrategy];\n\n    if (typeof strategyFn === 'function') {\n        if (config.setGenerationStrategy === \"patternBased\") {\n            strategyResult = strategyFn(remainingDistanceForMainSet, config.strategyConfig, config.restConfig, config.setFormatting);\n        } else if (config.setGenerationStrategy === \"multiBlock\") {\n            strategyResult = strategyFn(remainingDistanceForMainSet, config.strategyConfig, config.restConfig);\n        } else {\n            strategyResult = strategyFn(remainingDistanceForMainSet, config.strategyConfig, config.restConfig, energySystem, config.setFormatting);\n        }\n    } else {\n        descriptiveMessage = `Error: Unknown/unimplemented strategy: ${config.setGenerationStrategy || 'undefined'}`;\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage };\n    }\n\n    if (strategyResult && strategyResult.generatedSets && strategyResult.generatedSets.length > 0 && strategyResult.totalDistance > 0) {\n        mainSetTotalDist = strategyResult.totalDistance;\n        strategyResult.generatedSets.forEach(item => {\n            if (item.type === 'blockRestItem') {\n                sets.push(item.text);\n            } else {\n                 sets.push(formatSetString(item, energySystem, config.setFormatting));\n            }\n        });\n\n        let paceSummaryText = \"CSS\";\n        if (config.paceConfig) {\n            const pc = config.paceConfig;\n            if (pc.offset === 0 && !pc.randomRange) { /* paceSummaryText already \"CSS\" */ }\n            else if (pc.operator && (pc.offset || pc.randomRange)) {\n                 let basePaceDesc = \"CSS \";\n                 let offsetPart = \"\";\n                 if (pc.offset) {\n                    offsetPart = `${pc.operator}${pc.offset}`;\n                 }\n                 if (pc.randomRange) {\n                    const rangeEnd = pc.offset + pc.randomRange;\n                    if (pc.offset && Math.abs(rangeEnd) !== Math.abs(pc.offset)) {\n                        offsetPart += `-${Math.abs(rangeEnd)}`;\n                    } else if (!pc.offset) {\n                        offsetPart = `${pc.operator}0-${Math.abs(pc.randomRange)}`;\n                    }\n                 }\n                 paceSummaryText = basePaceDesc + offsetPart + \"s/100m\";\n            }\n        }\n\n        descriptiveMessage = formatDescriptiveMessage(config.descriptiveMessages.success, {\n            workoutTypeName: config.workoutTypeName,\n            setSummary: strategyResult.strategySpecificSummary || \"Set generated\",\n            energySystem: energySystem,\n            totalDistance: String(mainSetTotalDist),\n            paceDescription: strategyResult.paceDescription || paceSummaryText,\n            restSummary: strategyResult.restSummary || \"Varied rest\",\n        });\n\n    } else {\n        mainSetTotalDist = 0;\n        descriptiveMessage = formatDescriptiveMessage(config.descriptiveMessages.fail, {\n            workoutTypeName: config.workoutTypeName,\n            energySystem: energySystem,\n            remainingDistance: String(remainingDistanceForMainSet),\n            details: strategyResult?.strategySpecificSummary || \"No sets generated by strategy.\"\n        });\n    }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n}\n","// lib/data/mainSetConfigs.js - V3_SCHEMA_UPDATE_MARKER_CONFIGS\n\n// Helper function for SP2 Rest (from MAX_SPRINT.js)\nconst getSp2RestString = (repDist) => {\n    let minSec, maxSec;\n    if (repDist === 25) {\n        minSec = 60; maxSec = 180;\n    } else if (repDist === 50) {\n        minSec = 180; maxSec = 300;\n    } else { // Should not happen\n        minSec = 60; maxSec = 120;\n    }\n    const totalSeconds = minSec + Math.floor(Math.random() * (maxSec - minSec + 1));\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    let restString = \"\";\n    if (minutes > 0) restString += `${minutes}'`;\n    if (seconds > 0) restString += `${seconds}\"`;\n    else if (minutes === 0 && seconds === 0) restString = '10\"';\n    if (minutes > 0 && seconds === 0) { /* e.g. 3' */ }\n    return `r${restString}`;\n};\n\n// Helper function for SP1 Rest (from SPEED_ENDURANCE.js)\nconst getSp1Rest = (repDist) => {\n    let baseRestSeconds;\n    if (repDist === 100) baseRestSeconds = 10;\n    else if (repDist === 75) baseRestSeconds = 7.5;\n    else if (repDist === 50) baseRestSeconds = 5;\n    else if (repDist === 25) baseRestSeconds = 2.5;\n    else baseRestSeconds = 5;\n    const multiplier = 2 + Math.random();\n    let restSeconds = Math.round((baseRestSeconds * multiplier) / 5) * 5;\n    restSeconds = Math.max(restSeconds, 5);\n    if (repDist === 100) restSeconds = Math.max(restSeconds, 20);\n    return `r${restSeconds}\"`;\n};\n\n// Unified SetDefinition Schema (for reference in this file)\n// {\n//     id: String (optional),\n//     distance: Number,\n//     repScheme: {\n//         type: \"dynamic\" | \"fixed\",\n//         maxReps: Number (if type=\"dynamic\"),\n//         fixedReps: Number (if type=\"fixed\"),\n//         minReps: Number (optional for \"dynamic\")\n//     },\n//     rest: String (optional),\n//     paceDescription: String (optional),\n//     activity: String (optional, defaults to \"swim\"),\n//     notes: String (optional),\n//     totalDistance: Number (optional, for type=\"fixed\")\n// }\n\nexport const ENDURANCE_BASE_CONFIG = {\n    workoutTypeName: \"EN1\",\n    minTotalDistanceForSet: 500,\n    paceConfig: { baseMetric: \"css\", offset: 5, randomRange: 10, operator: \"+\" },\n    setGenerationStrategy: \"bestFitSingleRepetition\",\n    strategyConfig: {\n        setDefinitions: [\n            { distance: 500, repScheme: { type: \"dynamic\", maxReps: 12 }, activity: \"swim/kick\" },\n            { distance: 600, repScheme: { type: \"dynamic\", maxReps: 10 }, activity: \"swim/kick\" },\n            { distance: 700, repScheme: { type: \"dynamic\", maxReps: 8 }, activity: \"swim/kick\" },\n            { distance: 800, repScheme: { type: \"dynamic\", maxReps: 7 }, activity: \"swim/kick\" },\n            { distance: 900, repScheme: { type: \"dynamic\", maxReps: 6 }, activity: \"swim/kick\" },\n            { distance: 1000, repScheme: { type: \"dynamic\", maxReps: 6 }, activity: \"swim/kick\" },\n        ],\n        selectionPreference: {\n            tiebreakYardage: \"preferShorterRepIfSameYardageThenMoreReps\",\n            shorterRepValue: 500\n        }\n    },\n    restConfig: { type: \"fixed\", value: 'r60\"' },\n    setFormatting: { baseStructure: \"{reps}x{dist} {activity} ({energySystem} focus) {rest}\", defaultActivity: \"swim/kick\" },\n    descriptiveMessages: {\n        success: \"EN1: {setSummary} ({energySystem}), CSS +5-15s/100m pace guide, 60\\\" rest.\",\n        tooShort: \"EN1: Too short. Min rep distance {minRepDistForType}, available: {remainingDistance}.\",\n        fail: \"EN1: Could not fit EN1 reps for {energySystem}. Available: {remainingDistance}.\"\n    }\n};\n\nexport const GENERAL_ENDURANCE_CONFIG = {\n    workoutTypeName: \"General Endurance\",\n    minTotalDistanceForSet: 25,\n    paceConfig: { baseMetric: \"css\", offset: 0, operator: \"+\" },\n    setGenerationStrategy: \"closestFitGeneral\",\n    strategyConfig: {\n        setDefinitions: [\n            { distance: 500, repScheme: { type: \"dynamic\", maxReps: Infinity} },\n            { distance: 400, repScheme: { type: \"dynamic\", maxReps: Infinity} },\n            { distance: 300, repScheme: { type: \"dynamic\", maxReps: Infinity} },\n            { distance: 200, repScheme: { type: \"dynamic\", maxReps: Infinity} },\n            { distance: 100, repScheme: { type: \"dynamic\", maxReps: Infinity} },\n            { distance: 50, repScheme: { type: \"dynamic\", maxReps: Infinity} },\n        ],\n        minRepDistanceForFallback: 25,\n        conservativeAdjustment: { enabled: true, usageThresholdFactor: 0.80, minRepDistance: 200, minReps: 3 }\n    },\n    restConfig: { type: \"distanceBased\", values: { 300: 'r45\"', 200: 'r30\"', 100: 'r20\"', default: 'r15\"' } },\n    setFormatting: { baseStructure: \"{reps}x{dist} swim ({energySystem} focus) {rest}\", defaultActivity: \"swim\" },\n    descriptiveMessages: {\n        success: \"General Endurance ({energySystem}) default set. {setSummary}\",\n        tooShort: \"General Endurance ({energySystem}) set - too short. Available: {remainingDistance}.\",\n        fail: \"General Endurance ({energySystem}): Could not fit set. Available: {remainingDistance}.\"\n    }\n};\n\nexport const MAX_SPRINT_CONFIG = {\n    workoutTypeName: \"SP2\",\n    minTotalDistanceForSet: 25,\n    paceConfig: { baseMetric: \"css\", offset: 10, randomRange: 5, operator: \"-\" },\n    setGenerationStrategy: \"targetYardageWithRepChoice\",\n    strategyConfig: {\n        setTargetDistanceMin: 300,\n        setTargetDistanceMaxDefault: 600,\n        setTargetDistanceMaxCap: 4500,\n        setDefinitions: [\n            { distance: 25, repScheme: { type: \"dynamic\", maxReps: Infinity }, activity: \"UW sprint\", notes: \"breath at wall\" },\n            { distance: 50, repScheme: { type: \"dynamic\", maxReps: Infinity }, activity: \"UW sprint\", notes: \"breath at wall\" },\n        ],\n        repChoiceLogic: { preferDistance: 50, thresholdYardage: 150 }\n    },\n    restConfig: { type: \"customFunction\", customFunction: getSp2RestString },\n    setFormatting: { baseStructure: \"{reps}x{dist} {activity} ({energySystem} focus, {notes}) {rest}\", defaultActivity: \"UW sprint\" },\n    descriptiveMessages: {\n        success: \"SP2: Lactate Production ({energySystem}), Near Max Effort. Set: {setSummary}. Total ~{totalDistance}yds.\",\n        tooShort: \"SP2: Too short. Min rep 25. Available: {remainingDistance}.\",\n        fail: \"SP2: Could not fit SP2 set. Available: {remainingDistance} (target yardage for SP2 is typically 300-600).\"\n    }\n};\n\nexport const SPEED_ENDURANCE_CONFIG = {\n    workoutTypeName: \"SP1\",\n    minTotalDistanceForSet: 25,\n    paceConfig: { baseMetric: \"css\", offset: 3, randomRange: 2, operator: \"-\" },\n    setGenerationStrategy: \"multiBlock\",\n    strategyConfig: {\n        setTargetDistanceMin: 400,\n        setTargetDistanceMaxCap: 4500,\n        targetYardagePerBlockApprox: 800,\n        setDefinitions: [\n            { distance: 25, repScheme: { type: \"dynamic\", maxReps: 16 } },\n            { distance: 50, repScheme: { type: \"dynamic\", maxReps: 16 } },\n            { distance: 75, repScheme: { type: \"dynamic\", maxReps: 16 } },\n            { distance: 100, repScheme: { type: \"dynamic\", maxReps: 16 } },\n        ],\n        drills: [\"swim\", \"kb\", \"FU\", \"HUHO\"],\n        interBlockRest: {\n            minSeconds: 60,\n            maxSeconds: 120,\n            format: (seconds) => {\n                const minutes = Math.floor(seconds / 60);\n                const secs = seconds % 60;\n                let timeStr;\n                if (minutes > 0) {\n                    timeStr = (secs === 0) ? `${minutes}min` : `${minutes}min ${secs}s`;\n                } else {\n                    timeStr = `${secs}s`;\n                }\n                return `${timeStr} rest between SP1 blocks`;\n            }\n        }\n    },\n    restConfig: { type: \"customFunction\", customFunction: getSp1Rest },\n    setFormatting: { baseStructure: \"{reps}x{dist} {activity} ({energySystem} focus) {rest}\" },\n    descriptiveMessages: {\n        success: \"SP1: Lactate Tolerance ({energySystem}), CSS -3-5s. Total ~{totalDistance}yds.\",\n        tooShort: \"SP1: Too short. Min rep 25. Available: {remainingDistance}.\",\n        fail: \"SP1: Could not fit SP1 set. Available: {remainingDistance} (target yardage for SP1 is typically 400-800).\"\n    }\n};\n\nexport const THRESHOLD_DEVELOPMENT_CONFIG = {\n    workoutTypeName: \"EN3\",\n    minTotalDistanceForSet: 400,\n    paceConfig: { baseMetric: \"css\", offset: 1, randomRange: 1, operator: \"-\" },\n    setGenerationStrategy: \"patternBased\",\n    strategyConfig: {\n        setDefinitions: [\n            { id: 'Nx400_css_r50', distance: 400, repScheme: { type: \"dynamic\", maxReps: 18 }, rest: 'r50\"', paceDescription: 'CSS' },\n            { id: 'Nx500_css_r60', distance: 500, repScheme: { type: \"dynamic\", maxReps: 14 }, rest: 'r60\"', paceDescription: 'CSS' },\n            { id: 'Nx600_css_r90', distance: 600, repScheme: { type: \"dynamic\", maxReps: 12 }, rest: 'r90\"', paceDescription: 'CSS' },\n        ],\n        selectionLogic: \"maxAchievedDistance\",\n        fallbackStrategy: {\n            type: \"simpleRepsMaxDistance\",\n            setDefinitions: [\n                { distance: 600, repScheme: { type: \"dynamic\", maxReps: 6 }, rest: 'r90\"', paceDescription: 'CSS -1-2s' },\n                { distance: 500, repScheme: { type: \"dynamic\", maxReps: 6 }, rest: 'r60\"', paceDescription: 'CSS -1-2s' },\n                { distance: 400, repScheme: { type: \"dynamic\", maxReps: 6 }, rest: 'r45\"', paceDescription: 'CSS -1-2s' }\n            ],\n            minRepDistance: 400,\n        }\n    },\n    restConfig: { type: \"patternDefined\" },\n    setFormatting: { baseStructure: \"{reps}x{dist} {energySystem} focus swim @ {paceDesc} {rest}\", defaultActivity: \"swim\" },\n    descriptiveMessages: {\n        success: \"EN3: {setSummary} ({energySystem}) @ {paceDescription}.\",\n        tooShort: \"EN3: Too short for EN3 sets (min rep {minRepDistForType}). Available: {remainingDistance}.\",\n        fail: \"EN3: Could not fit standard or fallback EN3 set for {energySystem}. Available: {remainingDistance}.\"\n    }\n};\n\nexport const THRESHOLD_SUSTAINED_CONFIG = {\n    workoutTypeName: \"EN2\",\n    minTotalDistanceForSet: 100,\n    paceConfig: { baseMetric: \"css\", offset: 0, operator: \"+\" },\n    setGenerationStrategy: \"patternBased\",\n    strategyConfig: {\n        setDefinitions: [\n            { id: '18x100_css_r10', distance: 100, repScheme: { type: 'fixed', fixedReps: 18 }, totalDistance: 1800, rest: 'r10\"', paceDescription: 'CSS' },\n            { id: '10x200_css_r20', distance: 200, repScheme: { type: 'fixed', fixedReps: 10 }, totalDistance: 2000, rest: 'r20\"', paceDescription: 'CSS' },\n            { id: 'Nx400_css_r40', distance: 400, repScheme: { type: 'dynamic', maxReps: 18 }, rest: 'r40\"', paceDescription: 'CSS' },\n            { id: 'Nx500_css_r50', distance: 500, repScheme: { type: 'dynamic', maxReps: 14 }, rest: 'r50\"', paceDescription: 'CSS' },\n            { id: 'Nx600_css_r60', distance: 600, repScheme: { type: 'dynamic', maxReps: 12 }, rest: 'r60\"', paceDescription: 'CSS' },\n            { id: 'Nx800_css_r90', distance: 800, repScheme: { type: 'dynamic', maxReps: 8 }, rest: 'r90\"', paceDescription: 'CSS' },\n            { id: 'Nx1000_css_r90', distance: 1000, repScheme: { type: 'dynamic', maxReps: 6 }, rest: 'r90\"', paceDescription: 'CSS' }\n        ],\n        selectionLogic: \"prioritizeMaxDistanceThenRandom\",\n        fallbackStrategy: {\n            type: \"simpleRepsMaxDistance\",\n            setDefinitions: [\n                { distance: 200, repScheme: { type: \"dynamic\", maxReps: 40 }, rest: 'r20\"', paceDescription: 'CSS' },\n                { distance: 100, repScheme: { type: \"dynamic\", maxReps: 60 }, rest: 'r10\"', paceDescription: 'CSS' }\n            ],\n            minRepDistance: 100,\n        }\n    },\n    restConfig: { type: \"patternDefined\" },\n    setFormatting: { baseStructure: \"{reps}x{dist} {energySystem} focus swim @ {paceDesc} {rest}\", defaultActivity: \"swim\" },\n    descriptiveMessages: {\n        success: \"EN2: {setSummary} ({energySystem}) @ CSS.\",\n        tooShort: \"EN2: Too short for EN2 sets. Available: {remainingDistance}.\",\n        fail: \"EN2: Could not fit standard EN2 set for {energySystem}. Available: {remainingDistance}.\"\n    }\n};\n\nexport const ALL_WORKOUT_CONFIGS = {\n    ENDURANCE_BASE: ENDURANCE_BASE_CONFIG,\n    GENERAL_ENDURANCE: GENERAL_ENDURANCE_CONFIG,\n    MAX_SPRINT: MAX_SPRINT_CONFIG,\n    SPEED_ENDURANCE: SPEED_ENDURANCE_CONFIG,\n    THRESHOLD_DEVELOPMENT: THRESHOLD_DEVELOPMENT_CONFIG,\n    THRESHOLD_SUSTAINED: THRESHOLD_SUSTAINED_CONFIG\n};\n\n// Further comments removed.\n","// lib/data/mainSets.js\nimport { generateMainSetFromConfig } from '../workoutGenerator.js';\nimport {\n    ALL_WORKOUT_CONFIGS\n    // ENDURANCE_BASE_CONFIG,\n    // GENERAL_ENDURANCE_CONFIG,\n    // MAX_SPRINT_CONFIG,\n    // SPEED_ENDURANCE_CONFIG,\n    // THRESHOLD_DEVELOPMENT_CONFIG,\n    // THRESHOLD_SUSTAINED_CONFIG\n} from './mainSetConfigs.js';\n\n// The individual functions are now replaced by calls to the generator\n\nexport const ENDURANCE_BASE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    return generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS.ENDURANCE_BASE);\n};\n\nexport const GENERAL_ENDURANCE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    return generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS.GENERAL_ENDURANCE);\n};\n\nexport const MAX_SPRINT = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    return generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS.MAX_SPRINT);\n};\n\nexport const SPEED_ENDURANCE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    return generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS.SPEED_ENDURANCE);\n};\n\nexport const THRESHOLD_DEVELOPMENT = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    return generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS.THRESHOLD_DEVELOPMENT);\n};\n\nexport const THRESHOLD_SUSTAINED = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    return generateMainSetFromConfig(energySystem, cssSecondsPer100, remainingDistanceForMainSet, ALL_WORKOUT_CONFIGS.THRESHOLD_SUSTAINED);\n};\n\n// This object is used by other parts of the application to select a main set function.\n// It now correctly points to the new wrapper functions.\nexport const mainSetFunctions = {\n    ENDURANCE_BASE: ENDURANCE_BASE,\n    GENERAL_ENDURANCE: GENERAL_ENDURANCE,\n    MAX_SPRINT: MAX_SPRINT,\n    SPEED_ENDURANCE: SPEED_ENDURANCE,\n    THRESHOLD_DEVELOPMENT: THRESHOLD_DEVELOPMENT,\n    THRESHOLD_SUSTAINED: THRESHOLD_SUSTAINED,\n};\n","/**\n * Selects a warmup routine.\n * There's a 90% chance of selecting a warmup from the availableWarmups array,\n * and a 10% chance of selecting the noWarmupOption.\n *\n * @param {Array<Object>} availableWarmups - An array of warmup objects. Each object should have at least 'desc' and 'dist' properties.\n * @param {Object} noWarmupOption - An object representing the option of no warmup. Should have 'desc' and 'dist'.\n * @returns {Object} The selected warmup object.\n */\nfunction selectWarmup(availableWarmups, noWarmupOption) {\n    const useWarmup = Math.random() > 0.1; // 90% chance of including a warmup\n\n    if (useWarmup && availableWarmups && availableWarmups.length > 0) {\n        return availableWarmups[Math.floor(Math.random() * availableWarmups.length)];\n    } else {\n        return noWarmupOption;\n    }\n}\n\n/**\n * Selects a cooldown routine randomly from the available options.\n *\n * @param {Array<Object>} availableCooldowns - An array of cooldown objects. Each object should have at least 'desc' and 'dist' properties.\n * @returns {Object|null} The selected cooldown object, or null if no cooldowns are available or an error occurs.\n */\nfunction selectCooldown(availableCooldowns) {\n    if (availableCooldowns && availableCooldowns.length > 0) {\n        return availableCooldowns[Math.floor(Math.random() * availableCooldowns.length)];\n    }\n    return null; // Or return a default cooldown if preferred\n}\n\n/**\n * Generates the main set for a workout based on the energy system.\n *\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {string} workoutType - The type of workout (e.g., 'THRESHOLD_SUSTAINED').\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {Object} mainSetDefinitions - Object mapping workout types to generator functions.\n * @returns {{ sets: string[], mainSetTotalDist: number, targetPacePer100: number, descriptiveMessage?: string }}\n *           An object containing the sets, total distance of the main set, target pace,\n *           and an optional descriptive message for unknown or default systems.\n */\nfunction generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions) {\n    let generator = mainSetDefinitions[workoutType];\n    let messageFromOuterScope;\n\n    if (!generator) {\n        messageFromOuterScope = `Unknown workout type: ${workoutType}. Defaulting to general endurance.`;\n        generator = mainSetDefinitions['GENERAL_ENDURANCE'];\n    }\n\n    // The generator function now expects energySystem as its first param.\n    let mainSetOutput = generator(energySystem, cssSecondsPer100, remainingDistanceForMainSet);\n\n    // Fallback condition: if the selected generator (not GENERAL_ENDURANCE) produced a very small set\n    if (mainSetOutput.mainSetTotalDist < 100 && remainingDistanceForMainSet > 100 && workoutType !== 'GENERAL_ENDURANCE') {\n        let fallbackMessage = \"(Fallback to general endurance due to low generated distance for selected workout type).\";\n\n        const originalMessage = mainSetOutput.descriptiveMessage; // Message from the original, tiny set\n        mainSetOutput = mainSetDefinitions['GENERAL_ENDURANCE'](energySystem, cssSecondsPer100, remainingDistanceForMainSet); // Rerun with GENERAL_ENDURANCE\n\n        // Construct descriptive message for fallback\n        let finalFallbackMessage = fallbackMessage;\n        if (originalMessage) { // If the original (tiny) set had a message\n            finalFallbackMessage = originalMessage + \" \" + fallbackMessage;\n        } else if (mainSetOutput.descriptiveMessage) { // If GENERAL_ENDURANCE set has a message\n            finalFallbackMessage = fallbackMessage + \" \" + mainSetOutput.descriptiveMessage;\n        }\n        mainSetOutput.descriptiveMessage = finalFallbackMessage;\n    } else {\n        // No fallback, or it was a direct 'GENERAL_ENDURANCE' call.\n        // If messageFromOuterScope was set (i.e., unknown workout type), it takes precedence\n        // unless the generator provided its own more specific message.\n        if (messageFromOuterScope) {\n            if (!mainSetOutput.descriptiveMessage) {\n                mainSetOutput.descriptiveMessage = messageFromOuterScope;\n            } else {\n                // If generator (GENERAL_ENDURANCE in this case) set a message, and it was an unknown type,\n                // combine or prioritize. For now, \"Unknown type\" message is more specific to the situation.\n                mainSetOutput.descriptiveMessage = messageFromOuterScope + \" Original generator message: \" + mainSetOutput.descriptiveMessage;\n            }\n        } else if (workoutType === 'GENERAL_ENDURANCE' && !mainSetOutput.descriptiveMessage) {\n            // If it was a direct 'GENERAL_ENDURANCE' call and the generator provided no message (unlikely with current data)\n            mainSetOutput.descriptiveMessage = `General Endurance (${energySystem}) set.`;\n        }\n    }\n    return mainSetOutput;\n}\n\nconst workoutFunctions = {\n    selectWarmup,\n    selectCooldown,\n    generateMainSet\n};\n\nexport default workoutFunctions;\n","import { warmups, noWarmupOption } from './data/warmups.js';\nimport { cooldowns } from './data/cooldowns.js';\nimport { mainSetFunctions } from './data/mainSets.js';\nimport workoutComponents from './workoutComponents.js';\n\n// Helper function to convert MM:SS time string to total seconds per 100 units\nexport function parseCssTimeToSeconds(cssTimeStr) {\n    if (typeof cssTimeStr !== 'string') {\n        return null;\n    }\n    const parts = cssTimeStr.split(':');\n    if (parts.length === 2) {\n        const minutes = parseInt(parts[0], 10);\n        const seconds = parseFloat(parts[1]);\n        if (isNaN(minutes) || isNaN(seconds)) {\n            return null;\n        }\n        return minutes * 60 + seconds;\n    }\n    return null; // Invalid format\n}\n\n// Helper function to format total seconds per 100 units back to MM:SS\nexport function formatSecondsToMmSs(totalSeconds) {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = (totalSeconds % 60).toFixed(1); // One decimal for seconds\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n/**\n * Generates a random workout based on distance, energy system, and CSS time.\n * @param {number} totalDistanceYards - The approximate total desired workout distance in yards.\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2', 'EN3', 'SP1', 'SP2').\n * @param {string} cssTimeMmSs - The Critical Swim Speed in MM:SS format (e.g., '1:10').\n * @param {string} workoutType - The type of workout (e.g., 'threshold', 'anaerobic').\n * @returns {string} A formatted string describing the generated workout.\n */\nfunction generateWorkout(totalDistanceYards, energySystem, cssTimeMmSs, workoutType) {\n    const VERY_SHORT_WORKOUT_THRESHOLD = 600; // yards\n    // noWarmupOption is imported and can be used directly or cloned if description needs change for this specific case\n    // const noWarmupForShortOption = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n\n    const cssSecondsPer100 = parseCssTimeToSeconds(cssTimeMmSs);\n    if (cssSecondsPer100 === null) {\n        return \"Error: Invalid CSS time format. Please use MM:SS (e.g., '1:10').\";\n    }\n\n    let workoutDetails = [];\n    let currentDistanceCovered = 0;\n    const mainSetUnits = \"yards\"; // Assuming SCY based on sources unless specified otherwise [7, 9, 16]\n\n    // --- 1. Warmup Selection ---\n    let selectedWarmup;\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedWarmup = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n    } else {\n        // Re-introducing adaptive warmup logic for non-very-short workouts, with the specified modification\n        selectedWarmup = workoutComponents.selectWarmup(warmups, noWarmupOption); // Initial selection\n        if (selectedWarmup && selectedWarmup.dist > 0) {\n            const minMainSetThreshold = 200;\n            let maxAllowedWarmupDist = totalDistanceYards - minMainSetThreshold;\n\n            // Apply the more stringent percentage cap: 0.4 (40%) instead of 0.6\n            maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.4);\n\n            if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) {\n                 maxAllowedWarmupDist = totalDistanceYards * 0.4; // Fallback for small total distances if threshold makes it negative\n                                                                  // This 0.4 is different from the one above.\n                                                                  // Let's keep it as it was for this specific fallback:\n                 // maxAllowedWarmupDist = totalDistanceYards * 0.4; // This logic was for very small total distances\n                 // The logic from file before reset was:\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // This specific 0.4 should remain if it's for the negative guard, distinct from the primary cap.\n                 // Re-evaluating based on typical structure: the primary cap (now 0.4) applies first.\n                 // Then, specific conditions for very small distances adjust if it results in negative or too small.\n                 // The previous adaptive logic was:\n                 // maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.6); // This is now 0.4\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // The above line (totalDistanceYards * 0.4) was a fallback if the (totalDistanceYards - minMainSetThreshold) was negative.\n                 // It seems the logic should be:\n                 // 1. max = total - threshold\n                 // 2. max = min(max, total * NEW_PRIMARY_CAP (0.4))\n                 // 3. if max < 0 (because total was small), max = total * FALLBACK_CAP_FOR_SMALL_TOTAL (e.g. 0.4 or 0.5)\n                 // 4. if max < 50 (and total >=50), max = 50.\n                 // Let's stick to the prompt's direct change on the percentage line first.\n                 // The other parts of the adaptive logic are:\n            } // End of the \"maxAllowedWarmupDist < 0\" check\n\n            if (maxAllowedWarmupDist < 50 && totalDistanceYards >= 50) {\n                 maxAllowedWarmupDist = 50;\n            }\n            // Add a final guard if maxAllowedWarmupDist somehow ended up negative (e.g. if totalDistanceYards was < 50 but > 0)\n            if (maxAllowedWarmupDist < 0) maxAllowedWarmupDist = 0;\n\n\n            if (selectedWarmup.dist > maxAllowedWarmupDist) {\n                const suitableWarmups = warmups.filter(wu => wu.dist <= maxAllowedWarmupDist && wu.dist > 0);\n                if (suitableWarmups.length > 0) {\n                    selectedWarmup = suitableWarmups[Math.floor(Math.random() * suitableWarmups.length)];\n                } else {\n                    selectedWarmup = noWarmupOption;\n                }\n            }\n        } else if (!selectedWarmup || selectedWarmup.dist === 0) {\n            selectedWarmup = noWarmupOption;\n        }\n    }\n\n    if (selectedWarmup) {\n        workoutDetails.push(`WU: ${selectedWarmup.desc}`);\n        currentDistanceCovered += selectedWarmup.dist;\n    }\n\n    // --- 2. Main Set Generation ---\n    let mainSetDescription = \"Main Set:\";\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100;\n    let remainingDistanceForMainSet = totalDistanceYards - currentDistanceCovered;\n\n// Map energySystem to workoutType keys\nconst energySystemToWorkoutType = {\n    'EN1': 'ENDURANCE_BASE',\n    'EN2': 'THRESHOLD_SUSTAINED',\n    'EN3': 'THRESHOLD_DEVELOPMENT',\n    'SP1': 'SPEED_ENDURANCE',\n    'SP2': 'MAX_SPRINT',\n    // Add other mappings if necessary, or a default\n};\n\nlet internalWorkoutType = energySystemToWorkoutType[energySystem.toUpperCase()];\n\nif (!internalWorkoutType) {\n    // console.warn(`Unknown energySystem: ${energySystem}. Defaulting to GENERAL_ENDURANCE if workoutType param is also not specific.`);\n    // If the original workoutType parameter was provided and is valid, it could be used.\n    // However, the new guidelines are driven by EN1, EN2 etc.\n    // So, if energySystem doesn't map, we might default or rely on the generateMainSet's default.\n    // For now, if energySystem doesn't map, internalWorkoutType will be undefined,\n    // and generateMainSet will default to GENERAL_ENDURANCE.\n    // The original 'workoutType' parameter from generateWorkout's signature is still available if needed as a fallback here.\n    // Let's make it explicit: if energySystem mapping fails, use the passed 'workoutType' parameter.\n    // If that is also undefined, generateMainSet handles the GENERAL_ENDURANCE default.\n    if (workoutType) { // workoutType is the original parameter of generateWorkout\n        internalWorkoutType = workoutType;\n    }\n    // If internalWorkoutType is still undefined, generateMainSet's default to GENERAL_ENDURANCE will occur.\n}\n\n\n// const mainSetResult = workoutComponents.generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetFunctions);\n// Replace with:\nconst mainSetResult = workoutComponents.generateMainSet(internalWorkoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetFunctions);\n    sets = mainSetResult.sets;\n    mainSetTotalDist = mainSetResult.mainSetTotalDist;\n    targetPacePer100 = mainSetResult.targetPacePer100;\n\n    if (mainSetResult.descriptiveMessage) {\n        mainSetDescription += ` ${mainSetResult.descriptiveMessage}`;\n    }\n\n    workoutDetails.push(mainSetDescription);\n    sets.forEach(set => {\n        workoutDetails.push(`  - ${set}`);\n    });\n    currentDistanceCovered += mainSetTotalDist;\n\n    // --- 3. Cool-down Selection ---\n    let selectedCooldown;\n    const noCooldownForShortOption = { desc: \"No cooldown (short workout)\", dist: 0, type: \"none\" };\n\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedCooldown = noCooldownForShortOption;\n    } else {\n        // Re-introducing adaptive cooldown logic with the specified modification\n        const generalNoCooldownOption = { desc: \"No cooldown\", dist: 0, type: \"none\" }; // General purpose\n        const distanceAfterMainSet = currentDistanceCovered;\n        const distanceToTarget = totalDistanceYards - distanceAfterMainSet;\n\n        if (distanceAfterMainSet >= totalDistanceYards - 50) {\n            selectedCooldown = generalNoCooldownOption;\n        } else {\n            // Apply the more stringent buffer: 25 instead of 75\n            const suitableCooldowns = cooldowns.filter(cd => cd.dist <= distanceToTarget + 25);\n\n            if (suitableCooldowns.length > 0) {\n                selectedCooldown = suitableCooldowns[Math.floor(Math.random() * suitableCooldowns.length)];\n            } else {\n                selectedCooldown = generalNoCooldownOption;\n            }\n        }\n    }\n\n    if (selectedCooldown) {\n        workoutDetails.push(`CD: ${selectedCooldown.desc}`);\n        currentDistanceCovered += selectedCooldown.dist;\n    }\n\n    // --- 4. Final Details ---\n    workoutDetails.push(`\\nTotal estimated distance: ${currentDistanceCovered} ${mainSetUnits}`);\n    workoutDetails.push(`CSS: ${cssTimeMmSs}`);\n    workoutDetails.push(`Workout Type: ${workoutType}`); // Added Workout Type\n    workoutDetails.push(`Energy System Focus: ${energySystem.toUpperCase()}`);\n    // A rough estimate of average pace, as true average depends on actual interval times and rest\n    workoutDetails.push(`Estimated AVG pace for main set: ${formatSecondsToMmSs(targetPacePer100)} / 100 ${mainSetUnits}`);\n\n    return workoutDetails.join('\\n');\n}\n\nexport { generateWorkout }; // Keep generateWorkout exported as it's likely the main API\n\n// --- Example Usage ---\n// console.log(generateWorkout(3000, 'EN3', '1:20'));\n// console.log(generateWorkout(2000, 'SP1', '1:10'));\n// console.log(generateWorkout(1500, 'SP2', '1:15'));\n// console.log(generateWorkout(2500, 'EN2', '1:12'));\n// console.log(generateWorkout(1800, 'EN1', '1:25'));","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  // console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 40 ?\n      Math.floor(40 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    // console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      // console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      // console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport { generateWorkout as generateCssWorkout } from './css.js';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  // console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  // console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      // console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  // console.log(pattern);\n\n  return pattern;\n}\n\nexport { generateCssWorkout };\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    // console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  // console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["warmups","desc","dist","type","noWarmupOption","cooldowns","calculateTargetPace","cssSecondsPer100","paceConfig","pace","offset","randomRange","randomComponent","Math","random","totalAdjustment","operator","formatDescriptiveMessage","template","params","message","key","undefined","replace","RegExp","concat","trim","formatSetString","setInfo","energySystem","formatConfig","structure","baseStructure","reps","activity","defaultActivity","restString","paceDesc","notes","getRestString","repDist","restConfig","patternRestValue","value","customFunction","sortedKeys","Object","keys","values","filter","k","map","Number","sort","a","b","_iterator","_createForOfIteratorHelper","_step","s","n","done","keyDist","err","e","f","generateSet_BestFitSingleRepetition","remainingDistance","strategyConfig","setFormattingConfig","setDefinitions","selectionPreference","bestOption","setDef","totalYardage","isPreferredShorter","_iterator2","_step2","currentDist","distance","repScheme","currentReps","floor","maxReps","Infinity","min","minReps","max","currentTotalYardage","isCurrentDistPreferredShorter","shorterRepValue","tiebreakYardage","chosenSetDef","rest","paceDescription","generatedSets","totalDistance","strategySpecificSummary","restSummary","generateSet_ClosestFitGeneral","minRepDistanceForFallback","conservativeAdjustment","bestRepDist","bestNumReps","smallestRemainder","_iterator3","_step3","currentNumReps","currentRemainder","find","sd","enabled","calculatedDist","usageThresholdFactor","minRepDistance","generateSet_TargetYardageRepChoice","setTargetDistanceMin","setTargetDistanceMaxDefault","setTargetDistanceMaxCap","repChoiceLogic","actualTargetYardage","availableRepDistances","preferredSetDef","preferDistance","thresholdYardage","sortedAvailableSetDefs","length","numReps","currentSetTotalYardage","generateSet_MultiBlock","targetYardagePerBlockApprox","drills","interBlockRest","setsOutput","accumulatedDistInSet","smallestRepDist","targetOverallYardage","numBlocks","ceil","remainingForBlocksAllocation","_loop","distForCurrentBlockTarget","i","suitableSetDefs","possibleSetDefs","currentRepDist","maxRepsForThisDist","currentBlockActualYardage","blockRepRest","drillType","push","restSecondsVal","minSeconds","maxSeconds","formattedBlockRestText","format","text","_ret","generateSet_PatternBased","selectionLogic","fallbackStrategy","viablePatterns","_iterator4","_step4","_objectSpread","totalDist","id","fixedReps","bestFitSet","findIndex","maxDist","forEach","p","bestDistancePatterns","bestFallbackOption","maxFallbackYardage","_iterator5","_step5","fbSetDef","currentYardage","generateMainSetFromConfig","remainingDistanceForMainSet","config","sets","mainSetTotalDist","targetPacePer100","descriptiveMessage","getMinRepDistForType","cfg","minTotalDistanceForSet","minDist","_cfg$strategyConfig$f","descriptiveMessages","tooShort","workoutTypeName","minRepDistForType","String","strategyResult","strategyFnMap","strategyFn","setGenerationStrategy","setFormatting","item","paceSummaryText","pc","basePaceDesc","offsetPart","rangeEnd","abs","success","setSummary","_strategyResult","fail","details","getSp2RestString","minSec","maxSec","totalSeconds","minutes","seconds","getSp1Rest","baseRestSeconds","multiplier","restSeconds","round","ENDURANCE_BASE_CONFIG","baseMetric","GENERAL_ENDURANCE_CONFIG","MAX_SPRINT_CONFIG","SPEED_ENDURANCE_CONFIG","secs","timeStr","THRESHOLD_DEVELOPMENT_CONFIG","THRESHOLD_SUSTAINED_CONFIG","ALL_WORKOUT_CONFIGS","ENDURANCE_BASE","GENERAL_ENDURANCE","MAX_SPRINT","SPEED_ENDURANCE","THRESHOLD_DEVELOPMENT","THRESHOLD_SUSTAINED","mainSetFunctions","selectWarmup","availableWarmups","useWarmup","selectCooldown","availableCooldowns","generateMainSet","workoutType","mainSetDefinitions","generator","messageFromOuterScope","mainSetOutput","fallbackMessage","originalMessage","finalFallbackMessage","workoutFunctions","parseCssTimeToSeconds","cssTimeStr","parts","split","parseInt","parseFloat","isNaN","formatSecondsToMmSs","toFixed","generateWorkout","totalDistanceYards","cssTimeMmSs","VERY_SHORT_WORKOUT_THRESHOLD","workoutDetails","currentDistanceCovered","mainSetUnits","selectedWarmup","workoutComponents","minMainSetThreshold","maxAllowedWarmupDist","suitableWarmups","wu","mainSetDescription","energySystemToWorkoutType","internalWorkoutType","toUpperCase","mainSetResult","set","selectedCooldown","noCooldownForShortOption","generalNoCooldownOption","distanceAfterMainSet","distanceToTarget","suitableCooldowns","cd","join","getThingViaTimeLimit","secondsLeft","things","number","arguments","filteredThings","_","thing","sample","repeatIntervals","generatedPattern","selectedSwim","swims","time","timeLeft","maxRepetition","interval","intervalLength","secondsToAdd","intervals","name","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","swimLength","group","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","repeat"],"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"}