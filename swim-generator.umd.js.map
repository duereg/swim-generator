{"version":3,"file":"swim-generator.umd.js","sources":["../lib/data/warmups.js","../lib/data/cooldowns.js","../lib/data/mainSets/ENDURANCE_BASE.js","../lib/data/mainSets/THRESHOLD_SUSTAINED.js","../lib/data/mainSets/THRESHOLD_DEVELOPMENT.js","../lib/data/mainSets/SPEED_ENDURANCE.js","../lib/data/mainSets/MAX_SPRINT.js","../lib/data/mainSets/GENERAL_ENDURANCE.js","../lib/data/mainSets.js","../lib/workoutComponents.js","../lib/css.js","../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["// Warmup options based on various sources [2, 5, 7, 8, 11, 13, 15, 17, 19, 20]\nconst warmups = [\n    { desc: \"200 no fins, 200 w fins swim\", dist: 400, type: \"swim\" }, //[2]\n    { desc: \"400 warmup (75 kick, 25 under)\", dist: 400, type: \"kick\" }, //[5]\n    { desc: \"250 pull warmup, 250 swim warmup\", dist: 500, type: \"pull/swim\" }, //[20]\n    { desc: \"250 warmup\", dist: 250, type: \"general\" }, //[8, 13]\n    { desc: \"200 warm up\", dist: 200, type: \"general\" }, //[7]\n    { desc: \"500 warmup\", dist: 500, type: \"general\" }, //[11, 17]\n    { desc: \"300 warm up\", dist: 300, type: \"general\" }, //[15]\n    { desc: \"150 warm up\", dist: 150, type: \"general\" }, //[19]\n];\n\n// Option for no warmup, as seen in some sources [1, 9]\nconst noWarmupOption = { desc: \"No warmup bitches\", dist: 0, type: \"none\" }; //[1]\n\nexport { warmups, noWarmupOption };\n","// Cool-down options based on various sources [2, 5, 7, 9, 10, 12, 13, 16, 17, 19-21]\nconst cooldowns = [\n    { desc: \"200 w fins (or combo)\", dist: 200, type: \"fins\" }, //[2]\n    { desc: \"200 swim cooldown\", dist: 200, type: \"swim\" }, //[5]\n    { desc: \"100 cool down\", dist: 100, type: \"general\" }, //[7]\n    { desc: \"300 CD\", dist: 300, type: \"general\" }, //[9]\n    { desc: \"200 CD\", dist: 200, type: \"general\" }, //[10, 16, 21]\n    { desc: \"450 cooldown (300 swim, 150 under)\", dist: 450, type: \"swim/under\" }, //[20]\n    { desc: \"100 cool\", dist: 100, type: \"general\" }, //[17]\n    { desc: \"150 cooldown and 20 minutes of stick skills\", dist: 150, type: \"general\" }, //[19]\n    { desc: \"100 fin swim cooldown\", dist: 100, type: \"fin swim\" }, //[12]\n    { desc: \"250 cool down\", dist: 250, type: \"general\" }, //[13]\n];\n\nexport { cooldowns };\n","// Content of lib/data/mainSets/ENDURANCE_BASE.js to be updated:\n\nexport const ENDURANCE_BASE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    // New pace: CSS + 5-15 seconds\n    let targetPacePer100 = cssSecondsPer100 + 5 + (Math.random() * 10);\n\n    if (remainingDistanceForMainSet < 500) {\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `EN1: Too short. Min rep distance 500, available: ${remainingDistanceForMainSet}.` };\n    }\n\n    const allPossibleRepDistances = [500, 600, 700, 800, 900, 1000];\n    let bestOption = { dist: 0, reps: 0, totalYardage: 0, is500: false };\n\n    for (const currentDist of allPossibleRepDistances) {\n        if (remainingDistanceForMainSet >= currentDist) {\n            let currentReps = Math.floor(remainingDistanceForMainSet / currentDist);\n            if (currentReps === 0) continue;\n\n            let maxRepsForCurrentDist;\n            if (currentDist === 500) maxRepsForCurrentDist = 8;\n            else if (currentDist === 600) maxRepsForCurrentDist = 8; // e.g. 8x600 is 4800\n            else if (currentDist === 700) maxRepsForCurrentDist = 7; // e.g. 7x700 is 4900\n            else if (currentDist === 800) maxRepsForCurrentDist = 6; // e.g. 6x800 is 4800\n            else if (currentDist === 900) maxRepsForCurrentDist = 5; // e.g. 5x900 is 4500\n            else if (currentDist === 1000) maxRepsForCurrentDist = 5; // e.g. 5x1000 is 5000\n            else maxRepsForCurrentDist = 1; // Should not happen with the defined list\n\n            currentReps = Math.min(currentReps, maxRepsForCurrentDist);\n\n            if (currentReps > 0) {\n                const currentTotalYardage = currentReps * currentDist;\n                const isCurrentDist500 = currentDist === 500;\n\n                if (currentTotalYardage > bestOption.totalYardage) {\n                    bestOption = { dist: currentDist, reps: currentReps, totalYardage: currentTotalYardage, is500: isCurrentDist500 };\n                } else if (currentTotalYardage === bestOption.totalYardage) {\n                    if (!bestOption.is500 && isCurrentDist500) { // Prefer 500s if yardage is same\n                        bestOption = { dist: currentDist, reps: currentReps, totalYardage: currentTotalYardage, is500: isCurrentDist500 };\n                    } else if (bestOption.is500 == isCurrentDist500 && currentReps > bestOption.reps) { // If 500-status is same, prefer more reps\n                        bestOption = { dist: currentDist, reps: currentReps, totalYardage: currentTotalYardage, is500: isCurrentDist500 };\n                    }\n                }\n            }\n        }\n    }\n\n    let en1RepDist = bestOption.dist;\n    let numEn1Reps = bestOption.reps;\n\n    if (numEn1Reps > 0 && en1RepDist > 0) {\n        // Fixed rest\n        let en1Rest = 'r60\"';\n        sets.push(`${numEn1Reps}x${en1RepDist} ${energySystem} focus swim/kick ${en1Rest}`);\n        mainSetTotalDist = numEn1Reps * en1RepDist;\n    } else {\n        // This case should ideally be minimal if remainingDistanceForMainSet >= 500\n        mainSetTotalDist = 0;\n    }\n\n    let descriptiveMessage;\n    if (mainSetTotalDist > 0) {\n         descriptiveMessage = `EN1: ${numEn1Reps}x${en1RepDist} (${energySystem}), CSS +5-15s/100m pace guide, 60\" rest.`;\n    } else if (remainingDistanceForMainSet < 500) { // Should be caught at the top\n        descriptiveMessage = `EN1: Too short. Min rep distance 500, available: ${remainingDistanceForMainSet}.`;\n    } else { // remainingDistanceForMainSet >= 500 but no suitable sets found (highly unlikely with the logic)\n        descriptiveMessage = `EN1: Could not fit EN1 reps for ${energySystem}. Available: ${remainingDistanceForMainSet}.`;\n    }\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n};\n","// Content of lib/data/mainSets/THRESHOLD_SUSTAINED.js to be updated:\n\nexport const THRESHOLD_SUSTAINED = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    // New pace: At CSS\n    let targetPacePer100 = cssSecondsPer100;\n\n    const en2SetPatterns = [\n        // Ordered by a rough preference or commonality, can be adjusted\n        { id: '18x100', reps: 18, dist: 100, rest: 'r10\"', requiredDist: 18 * 100, paceDesc: 'CSS' },\n        { id: '10x200', reps: 10, dist: 200, rest: 'r20\"', requiredDist: 10 * 200, paceDesc: 'CSS' },\n        { id: '5x400', reps: 5, dist: 400, rest: 'r40\"', requiredDist: 5 * 400, paceDesc: 'CSS' },\n        { id: '3x600', reps: 3, dist: 600, rest: 'r60\"', requiredDist: 3 * 600, paceDesc: 'CSS' },\n        // For 800s and 1000s, allow variable reps, e.g., 2-3 reps\n        // Max total yardage around 2000-3000 for these longer reps\n        { id: 'Nx800', baseDist: 800, rest: 'r90\"', maxReps: 8, paceDesc: 'CSS' }, // 3x800=2400\n        { id: 'Nx1000', baseDist: 1000, rest: 'r90\"', maxReps: 6, paceDesc: 'CSS' } // 2x1000=2000\n    ];\n\n    let bestFitSet = null;\n    let maxAchievedDistance = 0;\n\n    for (const pattern of en2SetPatterns) {\n        if (pattern.baseDist) { // For NxDist patterns (800, 1000)\n            if (remainingDistanceForMainSet >= pattern.baseDist) {\n                let numReps = Math.floor(remainingDistanceForMainSet / pattern.baseDist);\n                numReps = Math.min(numReps, pattern.maxReps);\n                if (numReps > 0) {\n                    const currentSetTotalDist = numReps * pattern.baseDist;\n                    if (currentSetTotalDist > maxAchievedDistance) {\n                        maxAchievedDistance = currentSetTotalDist;\n                        bestFitSet = {\n                            reps: numReps,\n                            dist: pattern.baseDist,\n                            rest: pattern.rest,\n                            totalDist: currentSetTotalDist,\n                            paceDesc: pattern.paceDesc,\n                            id: `${numReps}x${pattern.baseDist}`\n                        };\n                    }\n                }\n            }\n        } else { // For fixed rep x dist patterns\n            if (remainingDistanceForMainSet >= pattern.requiredDist) {\n                // If it fits, it's a candidate. Prefer sets that use more of the available distance.\n                if (pattern.requiredDist > maxAchievedDistance) {\n                    maxAchievedDistance = pattern.requiredDist;\n                    bestFitSet = {\n                        reps: pattern.reps,\n                        dist: pattern.dist,\n                        rest: pattern.rest,\n                        totalDist: pattern.requiredDist,\n                        paceDesc: pattern.paceDesc,\n                        id: pattern.id\n                    };\n                }\n            }\n        }\n    }\n\n    // Fallback: if no specific pattern fits, try to construct a simpler set.\n    // E.g., if remaining is 1200, 18x100 (1800) is too much.\n    // Perhaps multiple shorter sets or a smaller version of one.\n    // The guidelines are specific about the set structures.\n    // If remainingDistanceForMainSet is too small for any of these, it produces no set.\n    // Let's try a simpler fallback: if less than the smallest full set (1800), try to do multiples of 100s or 200s at CSS.\n    if (!bestFitSet && remainingDistanceForMainSet >= 100) {\n        let fallbackDist = 0, fallbackReps = 0, fallbackRest = '', fallbackTotal = 0;\n\n        if (remainingDistanceForMainSet >= 200) { // Try 200s first\n            fallbackDist = 200;\n            fallbackReps = Math.min(Math.floor(remainingDistanceForMainSet / 200), 9); // Cap at 9x200 (less than 10x200 pattern)\n            fallbackRest = 'r20\"';\n        } else { // Must be 100s\n            fallbackDist = 100;\n            fallbackReps = Math.min(Math.floor(remainingDistanceForMainSet / 100), 17); // Cap at 17x100\n            fallbackRest = 'r10\"';\n        }\n        if (fallbackReps > 0) {\n            fallbackTotal = fallbackReps * fallbackDist;\n            if (fallbackTotal > 0) { // Ensure it's a meaningful set\n                 bestFitSet = {\n                    reps: fallbackReps,\n                    dist: fallbackDist,\n                    rest: fallbackRest,\n                    totalDist: fallbackTotal,\n                    paceDesc: 'CSS',\n                    id: `${fallbackReps}x${fallbackDist} (fallback)`\n                };\n            }\n        }\n    }\n\n\n    let descriptiveMessage;\n\n    if (bestFitSet) {\n        sets.push(`${bestFitSet.reps}x${bestFitSet.dist} ${energySystem} focus swim @ ${bestFitSet.paceDesc} ${bestFitSet.rest}`);\n        mainSetTotalDist = bestFitSet.totalDist;\n        descriptiveMessage = `EN2: ${bestFitSet.id} (${energySystem}) @ CSS.`;\n    } else {\n        mainSetTotalDist = 0;\n        if (remainingDistanceForMainSet < 100) {\n            descriptiveMessage = `EN2: Too short for EN2 sets. Available: ${remainingDistanceForMainSet}.`;\n        } else {\n            descriptiveMessage = `EN2: Could not fit standard EN2 set for ${energySystem}. Available: ${remainingDistanceForMainSet}.`;\n        }\n    }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n};\n","// Content of lib/data/mainSets/THRESHOLD_DEVELOPMENT.js to be updated:\n\nexport const THRESHOLD_DEVELOPMENT = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    // New pace: CSS - 1 to 2 seconds\n    let targetPacePer100 = cssSecondsPer100 - 1 - Math.random(); // Results in css - 1.0 to css - 1.999...\n\n    const en3SetPatterns = [\n        // New Nx patterns for longer distances\n        { idFormat: 'Nx1000', baseDist: 1000, maxReps: 6, rest: 'r120\"', paceDesc: 'CSS -1-2s' }, // 4x1000 = 4000\n        { idFormat: 'Nx800', baseDist: 800, maxReps: 8, rest: 'r90\"', paceDesc: 'CSS -1-2s' },  // 5x800 = 4000\n        // Existing fixed patterns (can be ordered by preference or required distance)\n        { id: '4x600', reps: 4, dist: 600, rest: 'r90\"', requiredDist: 4 * 600, paceDesc: 'CSS -1-2s' },\n        { id: '4x500', reps: 4, dist: 500, rest: 'r60\"', requiredDist: 4 * 500, paceDesc: 'CSS -1-2s' },\n        { id: '4x400', reps: 4, dist: 400, rest: 'r45\"', requiredDist: 4 * 400, paceDesc: 'CSS -1-2s' }\n    ];\n\n    let bestFitSet = null;\n    let maxAchievedDistance = 0;\n\n    for (const pattern of en3SetPatterns) {\n        if (pattern.baseDist) { // For NxDist patterns (800, 1000)\n            if (remainingDistanceForMainSet >= pattern.baseDist) {\n                let numReps = Math.floor(remainingDistanceForMainSet / pattern.baseDist);\n                numReps = Math.min(numReps, pattern.maxReps);\n                if (numReps > 0) {\n                    const currentSetTotalDist = numReps * pattern.baseDist;\n                    if (currentSetTotalDist > maxAchievedDistance) {\n                        maxAchievedDistance = currentSetTotalDist;\n                        bestFitSet = {\n                            reps: numReps,\n                            dist: pattern.baseDist,\n                            rest: pattern.rest,\n                            totalDist: currentSetTotalDist,\n                            paceDesc: pattern.paceDesc,\n                            id: `${numReps}x${pattern.baseDist}` // Dynamic ID\n                        };\n                    }\n                }\n            }\n        } else { // For fixed rep x dist patterns (4x600, 4x500, 4x400)\n            if (remainingDistanceForMainSet >= pattern.requiredDist) {\n                // If it fits and is larger than any previously found NxDist set\n                if (pattern.requiredDist > maxAchievedDistance) {\n                    maxAchievedDistance = pattern.requiredDist;\n                    bestFitSet = {\n                        reps: pattern.reps,\n                        dist: pattern.dist,\n                        rest: pattern.rest,\n                        totalDist: pattern.requiredDist,\n                        paceDesc: pattern.paceDesc,\n                        id: pattern.id // Fixed ID\n                    };\n                }\n            }\n        }\n    }\n\n    // Fallback logic: if remaining distance is less than the smallest fixed set (4x400=1600)\n    // but larger than the smallest single rep (400), try to make a smaller set.\n    // This prioritizes fitting any of the defined patterns first, even if they are large.\n    // If no pattern fits (e.g. remainingDistanceForMainSet is 1200), this fallback kicks in.\n    if (!bestFitSet && remainingDistanceForMainSet >= 400) {\n        const singleRepOptions = [ // Keep baseReps for fallback scaling, but try to fill remaining\n            { dist: 600, rest: 'r90\"', paceDesc: 'CSS -1-2s', baseReps: 4 },\n            { dist: 500, rest: 'r60\"', paceDesc: 'CSS -1-2s', baseReps: 4 },\n            { dist: 400, rest: 'r45\"', paceDesc: 'CSS -1-2s', baseReps: 4 }\n        ];\n\n        let bestFallbackOption = null;\n        let maxFallbackYardage = 0;\n\n        for (const option of singleRepOptions) {\n            if (remainingDistanceForMainSet >= option.dist) { // Must be able to do at least one rep\n                let numReps = Math.floor(remainingDistanceForMainSet / option.dist);\n                // For fallback, don't necessarily cap at baseReps, try to use up the distance\n                // but still keep it reasonable, e.g. not more than maxReps of new patterns if applicable\n                // For simplicity here, let's cap at a slightly higher number like 6-8 for fallback\n                numReps = Math.min(numReps, 6); // Example cap for fallback reps\n\n                if (numReps > 0) {\n                    const currentYardage = numReps * option.dist;\n                    if (currentYardage > maxFallbackYardage) {\n                        maxFallbackYardage = currentYardage;\n                        bestFallbackOption = {\n                            reps: numReps,\n                            dist: option.dist,\n                            rest: option.rest,\n                            totalDist: currentYardage,\n                            paceDesc: option.paceDesc,\n                            id: `${numReps}x${option.dist} (fallback)`\n                        };\n                    }\n                }\n            }\n        }\n        if (bestFallbackOption) {\n            bestFitSet = bestFallbackOption; // Use this fallback set\n        }\n    }\n\n    let descriptiveMessage;\n\n    if (bestFitSet) {\n        sets.push(`${bestFitSet.reps}x${bestFitSet.dist} ${energySystem} focus swim @ ${bestFitSet.paceDesc} ${bestFitSet.rest}`);\n        mainSetTotalDist = bestFitSet.totalDist; // Use totalDist from the chosen set object\n        descriptiveMessage = `EN3: ${bestFitSet.id} (${energySystem}) @ ${bestFitSet.paceDesc}.`;\n    } else {\n        mainSetTotalDist = 0;\n        const minReq = 400; // Smallest single rep distance for any consideration\n        if (remainingDistanceForMainSet < minReq) {\n            descriptiveMessage = `EN3: Too short for EN3 sets (min rep 400). Available: ${remainingDistanceForMainSet}.`;\n        } else {\n            descriptiveMessage = `EN3: Could not fit standard or fallback EN3 set for ${energySystem}. Available: ${remainingDistanceForMainSet}.`;\n        }\n    }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n};\n","// Content of lib/data/mainSets/SPEED_ENDURANCE.js to be updated:\n\nconst sp1RepDistances = [25, 50, 75, 100]; // Valid rep distances for SP1\nconst sp1Drills = [\"swim\", \"kb\", \"FU\", \"HUHO\"]; // FU = Fast Underwater, HUHO = Hypoxic Hips Out\n\n// Helper function to get SP1 rest based on rep distance\nconst getSp1Rest = (repDist) => {\n    let baseRestSeconds;\n    if (repDist === 100) baseRestSeconds = 10; // EN2 rest for 100s\n    else if (repDist === 75) baseRestSeconds = 7.5; // Proportional\n    else if (repDist === 50) baseRestSeconds = 5;   // Proportional\n    else if (repDist === 25) baseRestSeconds = 2.5; // Proportional\n    else baseRestSeconds = 5; // Default small rest\n\n    // Double or triple EN2 equivalent rest\n    const multiplier = 2 + Math.random(); // Randomly between 2x and 3x\n    let restSeconds = Math.round((baseRestSeconds * multiplier) / 5) * 5; // Round to nearest 5s\n    restSeconds = Math.max(restSeconds, 5); // Minimum 5s\n    if (repDist === 100) restSeconds = Math.max(restSeconds, 20); // Ensure 100s get at least 20s\n\n    return `r${restSeconds}\"`;\n};\n\nexport const SPEED_ENDURANCE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    // New pace: CSS - 3 to 5 seconds\n    let targetPacePer100 = cssSecondsPer100 - 3 - (Math.random() * 2);\n\n    // SP1 overall set length: 400 to 800yd.\n    // We'll use remainingDistanceForMainSet, but cap it effectively for SP1's typical range.\n    const targetSp1TotalYardage = Math.max(400, Math.min(remainingDistanceForMainSet, 4500));\n\n    if (remainingDistanceForMainSet < sp1RepDistances[0]) { // Smallest rep is 25\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `SP1: Too short. Min rep 25. Available: ${remainingDistanceForMainSet}.` };\n    }\n\n    if (targetSp1TotalYardage < sp1RepDistances[0]) {\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `SP1: Target yardage too low. Available: ${remainingDistanceForMainSet}.` };\n    }\n\n    let numBlocks = Math.max(1, Math.ceil(targetSp1TotalYardage / 800)); // Dynamic blocks, avg ~800yd per block\n\n    let accumulatedDistInSp1Set = 0;\n    let actualRemainingForSp1Blocks = targetSp1TotalYardage;\n\n    for (let i = 0; i < numBlocks; i++) {\n        if (actualRemainingForSp1Blocks < sp1RepDistances[0]) break;\n\n        let distForCurrentBlock = Math.floor(actualRemainingForSp1Blocks / (numBlocks - i));\n        if (distForCurrentBlock < sp1RepDistances[0]) continue;\n\n        // Select rep distance for the block - try to use a mix, or pick one that fits well\n        let repDist = sp1RepDistances[Math.floor(Math.random() * sp1RepDistances.length)];\n\n        // Ensure repDist is not too large for distForCurrentBlock\n        if (repDist > distForCurrentBlock) {\n            const possibleDists = sp1RepDistances.filter(d => d <= distForCurrentBlock);\n            if (possibleDists.length > 0) {\n                repDist = possibleDists[possibleDists.length - 1]; // Largest possible that fits\n            } else {\n                continue; // No suitable repDist for this block's target distance\n            }\n        }\n        if (repDist === 0) continue;\n\n        let numReps = Math.floor(distForCurrentBlock / repDist);\n        numReps = Math.min(numReps, 16); // Cap reps per block (e.g. 16x25=400, 8x50=400, 4x100=400)\n        numReps = Math.max(numReps, 1); // Ensure at least one rep\n\n        if (numReps * repDist > distForCurrentBlock) { // Adjust if overshoot (should be rare)\n            numReps = Math.floor(distForCurrentBlock / repDist);\n        }\n\n        if (numReps > 0) {\n            const currentBlockActualYardage = numReps * repDist;\n            const sp1Rest = getSp1Rest(repDist);\n            const drillType = sp1Drills[Math.floor(Math.random() * sp1Drills.length)];\n\n            sets.push(`${numReps}x${repDist} ${drillType} (${energySystem} focus) ${sp1Rest}`);\n\n            accumulatedDistInSp1Set += currentBlockActualYardage;\n            actualRemainingForSp1Blocks -= currentBlockActualYardage;\n\n            if (i < numBlocks - 1 && actualRemainingForSp1Blocks >= sp1RepDistances[0]) {\n                // Rest between blocks: 1-2 minutes\n                const blockRestSeconds = 60 + Math.floor(Math.random() * 61); // 60 to 120 seconds\n                if (blockRestSeconds >= 60) {\n                     const minutes = Math.floor(blockRestSeconds / 60);\n                     const seconds = blockRestSeconds % 60;\n                     if (seconds === 0) sets.push(`${minutes}min rest between SP1 blocks`);\n                     else sets.push(`${minutes}min ${seconds}s rest between SP1 blocks`);\n                } else { // Should not happen with current logic\n                     sets.push(`${blockRestSeconds}s rest between SP1 blocks`);\n                }\n            }\n        }\n    }\n    mainSetTotalDist = accumulatedDistInSp1Set;\n\n    let descriptiveMessage;\n    if (mainSetTotalDist > 0) {\n        descriptiveMessage = `SP1: Lactate Tolerance (${energySystem}), CSS -3-5s. Total ~${mainSetTotalDist}yds.`;\n    } else {\n        descriptiveMessage = `SP1: Could not fit SP1 set. Available: ${remainingDistanceForMainSet}, Target SP1 range: 400-800.`;\n    }\n\n    // If mainSetTotalDist is very low compared to what was available (e.g. targetSp1TotalYardage was 400, but we only made 100)\n    // This might indicate the block division or rep selection was suboptimal.\n    // The current logic tries to fill targetSp1TotalYardage.\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n};\n","// Content of lib/data/mainSets/MAX_SPRINT.js to be updated:\n\nconst sp2RepDistances = [25, 50];\n\n// Helper function to get SP2 rest string (e.g., \"1'30\"r\" or \"3'r\")\nconst getSp2RestString = (repDist) => {\n    let minSec, maxSec;\n    if (repDist === 25) {\n        minSec = 60; // 1 min\n        maxSec = 180; // 3 min\n    } else if (repDist === 50) {\n        minSec = 180; // 3 min\n        maxSec = 300; // 5 min\n    } else { // Should not happen\n        minSec = 60;\n        maxSec = 120;\n    }\n\n    const totalSeconds = minSec + Math.floor(Math.random() * (maxSec - minSec + 1));\n\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n\n    let restString = \"\";\n    if (minutes > 0) {\n        restString += `${minutes}'`;\n    }\n    if (seconds > 0) {\n        // If there are minutes, and seconds, add a space or separator if needed,\n        // but standard notation often just concatenates e.g. 1'30\"\n        restString += `${seconds}\"`;\n    } else if (minutes === 0 && seconds === 0) { // Unlikely to be 0 total rest\n        restString = '10\"'; // Default small rest if somehow 0\n    }\n     if (minutes > 0 && seconds === 0) { // e.g. 3'\n        // No need to add 00\"\n    }\n    return `r${restString}`;\n};\n\n\nexport const MAX_SPRINT = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    // New pace: CSS -10 to -15s (near max)\n    let targetPacePer100 = cssSecondsPer100 - 10 - (Math.random() * 5);\n\n    // SP2 overall set length: 300 to 600yds.\n    const targetSp2TotalYardage = Math.max(300, Math.min(remainingDistanceForMainSet, 4500));\n\n    if (remainingDistanceForMainSet < sp2RepDistances[0]) { // Smallest rep is 25\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `SP2: Too short. Min rep 25. Available: ${remainingDistanceForMainSet}.` };\n    }\n    if (targetSp2TotalYardage < sp2RepDistances[0]) {\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `SP2: Target yardage ${targetSp2TotalYardage} too low. Min rep 25.` };\n    }\n\n    let repDist = 0;\n    let numReps = 0;\n\n    // Decide on rep distance: 25s or 50s.\n    // If targetSp2TotalYardage is small (e.g., < 150 for 50s), prefer 25s.\n    // Or, if it allows significantly more reps for 25s.\n    // Let's try to pick one and stick to it for the set.\n    // Prioritize 50s if enough yardage (e.g. >= 150-200), otherwise 25s.\n\n    const canDo50s = targetSp2TotalYardage >= 50; // Min 1 rep of 50\n    const canDo25s = targetSp2TotalYardage >= 25; // Min 1 rep of 25\n\n    if (canDo50s && targetSp2TotalYardage >= 150) { // Prefer 50s if total yardage is decent\n        repDist = 50;\n    } else if (canDo25s) {\n        repDist = 25;\n    } else { // Not enough for even a single 25\n         return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `SP2: Not enough yardage for a single rep. Target: ${targetSp2TotalYardage}.` };\n    }\n\n    numReps = Math.floor(targetSp2TotalYardage / repDist);\n    numReps = Math.max(numReps, 1); // Ensure at least 1 rep if we decided on a repDist\n\n    const actualSetTotalYardage = numReps * repDist;\n\n    if (actualSetTotalYardage > 0) {\n        const sp2Rest = getSp2RestString(repDist);\n        // Original set string: `${numReps}x${repDist} UW sprint (${energySystem} focus, breath at wall) @ ${sp2Rest}`\n        // Keeping similar style. \"UW sprint\" and \"breath at wall\" are good specifiers for max effort.\n        sets.push(`${numReps}x${repDist} UW sprint (${energySystem} focus, breath at wall) ${sp2Rest}`);\n        mainSetTotalDist = actualSetTotalYardage;\n    } else {\n        // This path should be less likely given the checks.\n        mainSetTotalDist = 0;\n    }\n\n    let descriptiveMessage;\n    if (mainSetTotalDist > 0) {\n        descriptiveMessage = `SP2: Lactate Production (${energySystem}), Near Max Effort. Set: ${numReps}x${repDist}. Total ~${mainSetTotalDist}yds.`;\n    } else {\n        descriptiveMessage = `SP2: Could not fit SP2 set. Available: ${remainingDistanceForMainSet}, Target SP2 range: 300-600.`;\n    }\n\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage };\n};\n","export const GENERAL_ENDURANCE = (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100 = cssSecondsPer100;\n    const generalDistances = [400, 300, 200, 100, 50];\n    let bestRepDist = 0;\n    let bestNumReps = 0;\n    let smallestRemainder = Infinity;\n\n    if (remainingDistanceForMainSet < 25) { // Smallest possible rep distance\n        return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) set - too short.` };\n    }\n\n    for (const dist of generalDistances) {\n        if (remainingDistanceForMainSet >= dist) {\n            let currentNumReps = Math.floor(remainingDistanceForMainSet / dist);\n            let currentRemainder = remainingDistanceForMainSet - (currentNumReps * dist);\n            if (currentNumReps > 0) { // Only consider if at least one rep is possible\n                if (currentRemainder < smallestRemainder) {\n                    smallestRemainder = currentRemainder;\n                    bestRepDist = dist;\n                    bestNumReps = currentNumReps;\n                } else if (currentRemainder === smallestRemainder) {\n                    if (dist > bestRepDist) { // Prefer larger rep distance for same remainder\n                        bestRepDist = dist;\n                        bestNumReps = currentNumReps;\n                    }\n                }\n            }\n        }\n    }\n\n    if (bestNumReps === 0 && remainingDistanceForMainSet >= 25) {\n        // If no standard dist fits (e.g. remaining 75), make one up\n        // Try to make it a multiple of 25 or 50.\n        if (remainingDistanceForMainSet >= 50) {\n             bestRepDist = Math.floor(remainingDistanceForMainSet / 50) * 50;\n             if(bestRepDist === 0) bestRepDist = 50; // if remaining is e.g. 70, floor(70/50)*50 = 50\n        } else { // remaining is 25 to 49\n             bestRepDist = 25;\n        }\n        if (bestRepDist > 0) bestNumReps = Math.floor(remainingDistanceForMainSet / bestRepDist);\n        if (bestNumReps * bestRepDist > remainingDistanceForMainSet) bestNumReps = 0; // safety\n    }\n\n    // --- Start of new conservative adjustment logic ---\n    if (bestNumReps > 0 && bestRepDist > 0) {\n        let calculatedDist = bestNumReps * bestRepDist;\n\n        if (calculatedDist > remainingDistanceForMainSet * 0.80 && bestRepDist >= 200 && bestNumReps > 2) {\n            console.log(`DEBUG GENERAL_ENDURANCE: Conservative adjustment. Original reps: ${bestNumReps}x${bestRepDist}. Reducing reps by 1.`);\n            bestNumReps--;\n        }\n    }\n    // --- End of new conservative adjustment logic ---\n\n    if (bestNumReps > 0 && bestRepDist > 0) { // Ensure still valid after potential decrement\n        let restTime = 30;\n        if (bestRepDist >= 300) restTime = 45;\n        else if (bestRepDist >= 200) restTime = 30;\n        else if (bestRepDist >= 100) restTime = 20;\n        else restTime = 15;\n        sets.push(`${bestNumReps}x${bestRepDist} swim (${energySystem} focus) r${restTime}\"`);\n        mainSetTotalDist = bestNumReps * bestRepDist;\n    } else {\n         mainSetTotalDist = 0;\n    }\n    return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) default set.` };\n};\n","import { ENDURANCE_BASE } from './mainSets/ENDURANCE_BASE.js';\nimport { THRESHOLD_SUSTAINED } from './mainSets/THRESHOLD_SUSTAINED.js';\nimport { THRESHOLD_DEVELOPMENT } from './mainSets/THRESHOLD_DEVELOPMENT.js';\nimport { SPEED_ENDURANCE } from './mainSets/SPEED_ENDURANCE.js';\nimport { MAX_SPRINT } from './mainSets/MAX_SPRINT.js';\nimport { GENERAL_ENDURANCE } from './mainSets/GENERAL_ENDURANCE.js';\n\nconst mainSetDefinitions = {\n    'ENDURANCE_BASE': ENDURANCE_BASE,\n    'THRESHOLD_SUSTAINED': THRESHOLD_SUSTAINED,\n    'THRESHOLD_DEVELOPMENT': THRESHOLD_DEVELOPMENT,\n    'SPEED_ENDURANCE': SPEED_ENDURANCE,\n    'MAX_SPRINT': MAX_SPRINT,\n    'GENERAL_ENDURANCE': GENERAL_ENDURANCE\n};\n\nexport { mainSetDefinitions };\n","/**\n * Selects a warmup routine.\n * There's a 90% chance of selecting a warmup from the availableWarmups array,\n * and a 10% chance of selecting the noWarmupOption.\n *\n * @param {Array<Object>} availableWarmups - An array of warmup objects. Each object should have at least 'desc' and 'dist' properties.\n * @param {Object} noWarmupOption - An object representing the option of no warmup. Should have 'desc' and 'dist'.\n * @returns {Object} The selected warmup object.\n */\nfunction selectWarmup(availableWarmups, noWarmupOption) {\n    const useWarmup = Math.random() > 0.1; // 90% chance of including a warmup\n\n    if (useWarmup && availableWarmups && availableWarmups.length > 0) {\n        return availableWarmups[Math.floor(Math.random() * availableWarmups.length)];\n    } else {\n        return noWarmupOption;\n    }\n}\n\n/**\n * Selects a cooldown routine randomly from the available options.\n *\n * @param {Array<Object>} availableCooldowns - An array of cooldown objects. Each object should have at least 'desc' and 'dist' properties.\n * @returns {Object|null} The selected cooldown object, or null if no cooldowns are available or an error occurs.\n */\nfunction selectCooldown(availableCooldowns) {\n    if (availableCooldowns && availableCooldowns.length > 0) {\n        return availableCooldowns[Math.floor(Math.random() * availableCooldowns.length)];\n    }\n    return null; // Or return a default cooldown if preferred\n}\n\n/**\n * Generates the main set for a workout based on the energy system.\n *\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {string} workoutType - The type of workout (e.g., 'THRESHOLD_SUSTAINED').\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {Object} mainSetDefinitions - Object mapping workout types to generator functions.\n * @returns {{ sets: string[], mainSetTotalDist: number, targetPacePer100: number, descriptiveMessage?: string }}\n *           An object containing the sets, total distance of the main set, target pace,\n *           and an optional descriptive message for unknown or default systems.\n */\nfunction generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions) {\n    let generator = mainSetDefinitions[workoutType];\n    let messageFromOuterScope;\n\n    if (!generator) {\n        messageFromOuterScope = `Unknown workout type: ${workoutType}. Defaulting to general endurance.`;\n        generator = mainSetDefinitions['GENERAL_ENDURANCE'];\n    }\n\n    // The generator function now expects energySystem as its first param.\n    let mainSetOutput = generator(energySystem, cssSecondsPer100, remainingDistanceForMainSet);\n\n    // Fallback condition: if the selected generator (not GENERAL_ENDURANCE) produced a very small set\n    if (mainSetOutput.mainSetTotalDist < 100 && remainingDistanceForMainSet > 100 && workoutType !== 'GENERAL_ENDURANCE') {\n        let fallbackMessage = \"(Fallback to general endurance due to low generated distance for selected workout type).\";\n\n        const originalMessage = mainSetOutput.descriptiveMessage; // Message from the original, tiny set\n        mainSetOutput = mainSetDefinitions['GENERAL_ENDURANCE'](energySystem, cssSecondsPer100, remainingDistanceForMainSet); // Rerun with GENERAL_ENDURANCE\n\n        // Construct descriptive message for fallback\n        let finalFallbackMessage = fallbackMessage;\n        if (originalMessage) { // If the original (tiny) set had a message\n            finalFallbackMessage = originalMessage + \" \" + fallbackMessage;\n        } else if (mainSetOutput.descriptiveMessage) { // If GENERAL_ENDURANCE set has a message\n            finalFallbackMessage = fallbackMessage + \" \" + mainSetOutput.descriptiveMessage;\n        }\n        mainSetOutput.descriptiveMessage = finalFallbackMessage;\n    } else {\n        // No fallback, or it was a direct 'GENERAL_ENDURANCE' call.\n        // If messageFromOuterScope was set (i.e., unknown workout type), it takes precedence\n        // unless the generator provided its own more specific message.\n        if (messageFromOuterScope) {\n            if (!mainSetOutput.descriptiveMessage) {\n                mainSetOutput.descriptiveMessage = messageFromOuterScope;\n            } else {\n                // If generator (GENERAL_ENDURANCE in this case) set a message, and it was an unknown type,\n                // combine or prioritize. For now, \"Unknown type\" message is more specific to the situation.\n                mainSetOutput.descriptiveMessage = messageFromOuterScope + \" Original generator message: \" + mainSetOutput.descriptiveMessage;\n            }\n        } else if (workoutType === 'GENERAL_ENDURANCE' && !mainSetOutput.descriptiveMessage) {\n            // If it was a direct 'GENERAL_ENDURANCE' call and the generator provided no message (unlikely with current data)\n            mainSetOutput.descriptiveMessage = `General Endurance (${energySystem}) set.`;\n        }\n    }\n    return mainSetOutput;\n}\n\nconst workoutFunctions = {\n    selectWarmup,\n    selectCooldown,\n    generateMainSet\n};\n\nexport default workoutFunctions;\n","import { warmups, noWarmupOption } from './data/warmups.js';\nimport { cooldowns } from './data/cooldowns.js';\nimport { mainSetDefinitions } from './data/mainSets.js';\nimport workoutComponents from './workoutComponents.js';\n\n// Helper function to convert MM:SS time string to total seconds per 100 units\nexport function parseCssTimeToSeconds(cssTimeStr) {\n    if (typeof cssTimeStr !== 'string') {\n        return null;\n    }\n    const parts = cssTimeStr.split(':');\n    if (parts.length === 2) {\n        const minutes = parseInt(parts[0], 10);\n        const seconds = parseFloat(parts[1]);\n        if (isNaN(minutes) || isNaN(seconds)) {\n            return null;\n        }\n        return minutes * 60 + seconds;\n    }\n    return null; // Invalid format\n}\n\n// Helper function to format total seconds per 100 units back to MM:SS\nexport function formatSecondsToMmSs(totalSeconds) {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = (totalSeconds % 60).toFixed(1); // One decimal for seconds\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n/**\n * Generates a random workout based on distance, energy system, and CSS time.\n * @param {number} totalDistanceYards - The approximate total desired workout distance in yards.\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2', 'EN3', 'SP1', 'SP2').\n * @param {string} cssTimeMmSs - The Critical Swim Speed in MM:SS format (e.g., '1:10').\n * @param {string} workoutType - The type of workout (e.g., 'threshold', 'anaerobic').\n * @returns {string} A formatted string describing the generated workout.\n */\nfunction generateWorkout(totalDistanceYards, energySystem, cssTimeMmSs, workoutType) {\n    const VERY_SHORT_WORKOUT_THRESHOLD = 600; // yards\n    // noWarmupOption is imported and can be used directly or cloned if description needs change for this specific case\n    // const noWarmupForShortOption = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n\n    const cssSecondsPer100 = parseCssTimeToSeconds(cssTimeMmSs);\n    if (cssSecondsPer100 === null) {\n        return \"Error: Invalid CSS time format. Please use MM:SS (e.g., '1:10').\";\n    }\n\n    let workoutDetails = [];\n    let currentDistanceCovered = 0;\n    const mainSetUnits = \"yards\"; // Assuming SCY based on sources unless specified otherwise [7, 9, 16]\n\n    // --- 1. Warmup Selection ---\n    let selectedWarmup;\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedWarmup = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n    } else {\n        // Re-introducing adaptive warmup logic for non-very-short workouts, with the specified modification\n        selectedWarmup = workoutComponents.selectWarmup(warmups, noWarmupOption); // Initial selection\n        if (selectedWarmup && selectedWarmup.dist > 0) {\n            const minMainSetThreshold = 200;\n            let maxAllowedWarmupDist = totalDistanceYards - minMainSetThreshold;\n\n            // Apply the more stringent percentage cap: 0.4 (40%) instead of 0.6\n            maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.4);\n\n            if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) {\n                 maxAllowedWarmupDist = totalDistanceYards * 0.4; // Fallback for small total distances if threshold makes it negative\n                                                                  // This 0.4 is different from the one above.\n                                                                  // Let's keep it as it was for this specific fallback:\n                 // maxAllowedWarmupDist = totalDistanceYards * 0.4; // This logic was for very small total distances\n                 // The logic from file before reset was:\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // This specific 0.4 should remain if it's for the negative guard, distinct from the primary cap.\n                 // Re-evaluating based on typical structure: the primary cap (now 0.4) applies first.\n                 // Then, specific conditions for very small distances adjust if it results in negative or too small.\n                 // The previous adaptive logic was:\n                 // maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.6); // This is now 0.4\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // The above line (totalDistanceYards * 0.4) was a fallback if the (totalDistanceYards - minMainSetThreshold) was negative.\n                 // It seems the logic should be:\n                 // 1. max = total - threshold\n                 // 2. max = min(max, total * NEW_PRIMARY_CAP (0.4))\n                 // 3. if max < 0 (because total was small), max = total * FALLBACK_CAP_FOR_SMALL_TOTAL (e.g. 0.4 or 0.5)\n                 // 4. if max < 50 (and total >=50), max = 50.\n                 // Let's stick to the prompt's direct change on the percentage line first.\n                 // The other parts of the adaptive logic are:\n            } // End of the \"maxAllowedWarmupDist < 0\" check\n\n            if (maxAllowedWarmupDist < 50 && totalDistanceYards >= 50) {\n                 maxAllowedWarmupDist = 50;\n            }\n            // Add a final guard if maxAllowedWarmupDist somehow ended up negative (e.g. if totalDistanceYards was < 50 but > 0)\n            if (maxAllowedWarmupDist < 0) maxAllowedWarmupDist = 0;\n\n\n            if (selectedWarmup.dist > maxAllowedWarmupDist) {\n                const suitableWarmups = warmups.filter(wu => wu.dist <= maxAllowedWarmupDist && wu.dist > 0);\n                if (suitableWarmups.length > 0) {\n                    selectedWarmup = suitableWarmups[Math.floor(Math.random() * suitableWarmups.length)];\n                } else {\n                    selectedWarmup = noWarmupOption;\n                }\n            }\n        } else if (!selectedWarmup || selectedWarmup.dist === 0) {\n            selectedWarmup = noWarmupOption;\n        }\n    }\n\n    if (selectedWarmup) {\n        workoutDetails.push(`WU: ${selectedWarmup.desc}`);\n        currentDistanceCovered += selectedWarmup.dist;\n    }\n\n    // --- 2. Main Set Generation ---\n    let mainSetDescription = \"Main Set:\";\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100;\n    let remainingDistanceForMainSet = totalDistanceYards - currentDistanceCovered;\n\n// Map energySystem to workoutType keys\nconst energySystemToWorkoutType = {\n    'EN1': 'ENDURANCE_BASE',\n    'EN2': 'THRESHOLD_SUSTAINED',\n    'EN3': 'THRESHOLD_DEVELOPMENT',\n    'SP1': 'SPEED_ENDURANCE',\n    'SP2': 'MAX_SPRINT',\n    // Add other mappings if necessary, or a default\n};\n\nlet internalWorkoutType = energySystemToWorkoutType[energySystem.toUpperCase()];\n\nif (!internalWorkoutType) {\n    console.warn(`Unknown energySystem: ${energySystem}. Defaulting to GENERAL_ENDURANCE if workoutType param is also not specific.`);\n    // If the original workoutType parameter was provided and is valid, it could be used.\n    // However, the new guidelines are driven by EN1, EN2 etc.\n    // So, if energySystem doesn't map, we might default or rely on the generateMainSet's default.\n    // For now, if energySystem doesn't map, internalWorkoutType will be undefined,\n    // and generateMainSet will default to GENERAL_ENDURANCE.\n    // The original 'workoutType' parameter from generateWorkout's signature is still available if needed as a fallback here.\n    // Let's make it explicit: if energySystem mapping fails, use the passed 'workoutType' parameter.\n    // If that is also undefined, generateMainSet handles the GENERAL_ENDURANCE default.\n    if (workoutType) { // workoutType is the original parameter of generateWorkout\n        internalWorkoutType = workoutType;\n    }\n    // If internalWorkoutType is still undefined, generateMainSet's default to GENERAL_ENDURANCE will occur.\n}\n\n\n// const mainSetResult = workoutComponents.generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions);\n// Replace with:\nconst mainSetResult = workoutComponents.generateMainSet(internalWorkoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions);\n    sets = mainSetResult.sets;\n    mainSetTotalDist = mainSetResult.mainSetTotalDist;\n    targetPacePer100 = mainSetResult.targetPacePer100;\n\n    if (mainSetResult.descriptiveMessage) {\n        mainSetDescription += ` ${mainSetResult.descriptiveMessage}`;\n    }\n\n    workoutDetails.push(mainSetDescription);\n    sets.forEach(set => {\n        workoutDetails.push(`  - ${set}`);\n    });\n    currentDistanceCovered += mainSetTotalDist;\n\n    // --- 3. Cool-down Selection ---\n    let selectedCooldown;\n    const noCooldownForShortOption = { desc: \"No cooldown (short workout)\", dist: 0, type: \"none\" };\n\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedCooldown = noCooldownForShortOption;\n    } else {\n        // Re-introducing adaptive cooldown logic with the specified modification\n        const generalNoCooldownOption = { desc: \"No cooldown\", dist: 0, type: \"none\" }; // General purpose\n        const distanceAfterMainSet = currentDistanceCovered;\n        const distanceToTarget = totalDistanceYards - distanceAfterMainSet;\n\n        if (distanceAfterMainSet >= totalDistanceYards - 50) {\n            selectedCooldown = generalNoCooldownOption;\n        } else {\n            // Apply the more stringent buffer: 25 instead of 75\n            const suitableCooldowns = cooldowns.filter(cd => cd.dist <= distanceToTarget + 25);\n\n            if (suitableCooldowns.length > 0) {\n                selectedCooldown = suitableCooldowns[Math.floor(Math.random() * suitableCooldowns.length)];\n            } else {\n                selectedCooldown = generalNoCooldownOption;\n            }\n        }\n    }\n\n    if (selectedCooldown) {\n        workoutDetails.push(`CD: ${selectedCooldown.desc}`);\n        currentDistanceCovered += selectedCooldown.dist;\n    }\n\n    // --- 4. Final Details ---\n    workoutDetails.push(`\\nTotal estimated distance: ${currentDistanceCovered} ${mainSetUnits}`);\n    workoutDetails.push(`CSS: ${cssTimeMmSs}`);\n    workoutDetails.push(`Workout Type: ${workoutType}`); // Added Workout Type\n    workoutDetails.push(`Energy System Focus: ${energySystem.toUpperCase()}`);\n    // A rough estimate of average pace, as true average depends on actual interval times and rest\n    workoutDetails.push(`Estimated AVG pace for main set: ${formatSecondsToMmSs(targetPacePer100)} / 100 ${mainSetUnits}`);\n\n    return workoutDetails.join('\\n');\n}\n\nexport { generateWorkout }; // Keep generateWorkout exported as it's likely the main API\n\n// --- Example Usage ---\n// console.log(generateWorkout(3000, 'EN3', '1:20'));\n// console.log(generateWorkout(2000, 'SP1', '1:10'));\n// console.log(generateWorkout(1500, 'SP2', '1:15'));\n// console.log(generateWorkout(2500, 'EN2', '1:12'));\n// console.log(generateWorkout(1800, 'EN1', '1:25'));","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  // console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 40 ?\n      Math.floor(40 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    // console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      // console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      // console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport { generateWorkout as generateCssWorkout } from './css.js';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  // console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  // console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      // console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  // console.log(pattern);\n\n  return pattern;\n}\n\nexport { generateCssWorkout };\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    // console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  // console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["warmups","desc","dist","type","noWarmupOption","cooldowns","ENDURANCE_BASE","energySystem","cssSecondsPer100","remainingDistanceForMainSet","sets","mainSetTotalDist","targetPacePer100","Math","random","descriptiveMessage","concat","allPossibleRepDistances","bestOption","reps","totalYardage","is500","_i","_allPossibleRepDistan","length","currentDist","currentReps","floor","maxRepsForCurrentDist","min","currentTotalYardage","isCurrentDist500","en1RepDist","numEn1Reps","en1Rest","push","THRESHOLD_SUSTAINED","en2SetPatterns","id","rest","requiredDist","paceDesc","baseDist","maxReps","bestFitSet","maxAchievedDistance","_en2SetPatterns","pattern","numReps","currentSetTotalDist","totalDist","fallbackDist","fallbackReps","fallbackRest","fallbackTotal","THRESHOLD_DEVELOPMENT","en3SetPatterns","idFormat","_en3SetPatterns","singleRepOptions","baseReps","bestFallbackOption","maxFallbackYardage","_i2","_singleRepOptions","option","currentYardage","minReq","sp1RepDistances","sp1Drills","getSp1Rest","repDist","baseRestSeconds","multiplier","restSeconds","round","max","SPEED_ENDURANCE","targetSp1TotalYardage","numBlocks","ceil","accumulatedDistInSp1Set","actualRemainingForSp1Blocks","_loop","distForCurrentBlock","i","possibleDists","filter","d","currentBlockActualYardage","sp1Rest","drillType","blockRestSeconds","minutes","seconds","_ret","sp2RepDistances","getSp2RestString","minSec","maxSec","totalSeconds","restString","MAX_SPRINT","targetSp2TotalYardage","canDo50s","canDo25s","actualSetTotalYardage","sp2Rest","GENERAL_ENDURANCE","generalDistances","bestRepDist","bestNumReps","smallestRemainder","Infinity","_generalDistances","currentNumReps","currentRemainder","calculatedDist","console","log","restTime","mainSetDefinitions","selectWarmup","availableWarmups","useWarmup","selectCooldown","availableCooldowns","generateMainSet","workoutType","generator","messageFromOuterScope","mainSetOutput","fallbackMessage","originalMessage","finalFallbackMessage","workoutFunctions","parseCssTimeToSeconds","cssTimeStr","parts","split","parseInt","parseFloat","isNaN","formatSecondsToMmSs","toFixed","generateWorkout","totalDistanceYards","cssTimeMmSs","VERY_SHORT_WORKOUT_THRESHOLD","workoutDetails","currentDistanceCovered","mainSetUnits","selectedWarmup","_objectSpread","workoutComponents","minMainSetThreshold","maxAllowedWarmupDist","suitableWarmups","wu","mainSetDescription","energySystemToWorkoutType","internalWorkoutType","toUpperCase","warn","mainSetResult","forEach","set","selectedCooldown","noCooldownForShortOption","generalNoCooldownOption","distanceAfterMainSet","distanceToTarget","suitableCooldowns","cd","join","getThingViaTimeLimit","key","secondsLeft","things","number","arguments","undefined","filteredThings","_","thing","sample","repeatIntervals","generatedPattern","selectedSwim","swims","time","timeLeft","maxRepetition","interval","intervalLength","secondsToAdd","intervals","name","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","result","swimLength","group","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","repeat"],"mappingsnE;EAAEF,EAAAA,IAAI,EAAE,gCAAgC;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAO,CAAC;EAAE;EACrE;EAAEF,EAAAA,IAAI,EAAE,kCAAkC;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAY,CAAC;EAAE;EAC5E;EAAEF,EAAAA,IAAI,EAAE,YAAY;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EACpD;EAAEF,EAAAA,IAAI,EAAE,aAAa;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EACrD;EAAEF,EAAAA,IAAI,EAAE,YAAY;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EACpD;EAAEF,EAAAA,IAAI,EAAE,aAAa;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EACrD;EAAEF,EAAAA,IAAI,EAAE,aAAa;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE,CACxD;;EAED;EACA,IAAMC,cAAc,GAAG;EAAEH,EAAAA,IAAI,EAAE,mBAAmB;EAAEC,EAAAA,IAAI,EAAE,CAAC;EAAEC,EAAAA,IAAI,EAAE;EAAO,CAAC,CAAC;;ECb5E;EACA,IAAME,SAAS,GAAG,CACd;EAAEJ,EAAAA,IAAI,EAAE,uBAAuB;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAO,CAAC;EAAE;EAC5D;EAAEF,EAAAA,IAAI,EAAE,mBAAmB;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAO,CAAC;EAAE;EACxD;EAAEF,EAAAA,IAAI,EAAE,eAAe;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EACvD;EAAEF,EAAAA,IAAI,EAAE,QAAQ;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EAChD;EAAEF,EAAAA,IAAI,EAAE,QAAQ;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EAChD;EAAEF,EAAAA,IAAI,EAAE,oCAAoC;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAa,CAAC;EAAE;EAC/E;EAAEF,EAAAA,IAAI,EAAE,UAAU;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EAClD;EAAEF,EAAAA,IAAI,EAAE,6CAA6C;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE;EACrF;EAAEF,EAAAA,IAAI,EAAE,uBAAuB;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAW,CAAC;EAAE;EAChE;EAAEF,EAAAA,IAAI,EAAE,eAAe;EAAEC,EAAAA,IAAI,EAAE,GAAG;EAAEC,EAAAA,IAAI,EAAE;EAAU,CAAC;EAAE,CAC1D;;ECZD;;EAEO,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAK;IAC3F,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;EACxB;EACA,EAAA,IAAIC,gBAAgB,GAAGJ,gBAAgB,GAAG,CAAC,GAAIK,IAAI,CAACC,MAAM,EAAE,GAAG,EAAG;IAElE,IAAIL,2BAA2B,GAAG,GAAG,EAAE;MACnC,OAAO;EAAEC,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,mDAAA,CAAAC,MAAA,CAAsDP,2BAA2B,EAAA,GAAA;OAAK;EAClK;EAEA,EAAA,IAAMQ,uBAAuB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;EAC/D,EAAA,IAAIC,UAAU,GAAG;EAAEhB,IAAAA,IAAI,EAAE,CAAC;EAAEiB,IAAAA,IAAI,EAAE,CAAC;EAAEC,IAAAA,YAAY,EAAE,CAAC;EAAEC,IAAAA,KAAK,EAAE;KAAO;EAEpE,EAAA,KAAA,IAAAC,EAAA,GAAA,CAAA,EAAAC,qBAAA,GAA0BN,uBAAuB,EAAAK,EAAA,GAAAC,qBAAA,CAAAC,MAAA,EAAAF,EAAA,EAAE,EAAA;EAA9C,IAAA,IAAMG,WAAW,GAAAF,qBAAA,CAAAD,EAAA,CAAA;MAClB,IAAIb,2BAA2B,IAAIgB,WAAW,EAAE;QAC5C,IAAIC,WAAW,GAAGb,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAGgB,WAAW,CAAC;QACvE,IAAIC,WAAW,KAAK,CAAC,EAAE;EAEvB,MAAA,IAAIE,qBAAqB,GAAA,MAAA;EACzB,MAAA,IAAIH,WAAW,KAAK,GAAG,EAAEG,qBAAqB,GAAG,CAAC,CAAC,KAC9C,IAAIH,WAAW,KAAK,GAAG,EAAEG,qBAAqB,GAAG,CAAC,CAAC;aACnD,IAAIH,WAAW,KAAK,GAAG,EAAEG,qBAAqB,GAAG,CAAC,CAAC;aACnD,IAAIH,WAAW,KAAK,GAAG,EAAEG,qBAAqB,GAAG,CAAC,CAAC;aACnD,IAAIH,WAAW,KAAK,GAAG,EAAEG,qBAAqB,GAAG,CAAC,CAAC;aACnD,IAAIH,WAAW,KAAK,IAAI,EAAEG,qBAAqB,GAAG,CAAC,CAAC;EAAC,WACrDA,qBAAqB,GAAG,CAAC,CAAC;;QAE/BF,WAAW,GAAGb,IAAI,CAACgB,GAAG,CAACH,WAAW,EAAEE,qBAAqB,CAAC;QAE1D,IAAIF,WAAW,GAAG,CAAC,EAAE;EACjB,QAAA,IAAMI,mBAAmB,GAAGJ,WAAW,GAAGD,WAAW;EACrD,QAAA,IAAMM,gBAAgB,GAAGN,WAAW,KAAK,GAAG;EAE5C,QAAA,IAAIK,mBAAmB,GAAGZ,UAAU,CAACE,YAAY,EAAE;EAC/CF,UAAAA,UAAU,GAAG;EAAEhB,YAAAA,IAAI,EAAEuB,WAAW;EAAEN,YAAAA,IAAI,EAAEO,WAAW;EAAEN,YAAAA,YAAY,EAAEU,mBAAmB;EAAET,YAAAA,KAAK,EAAEU;aAAkB;EACrH,SAAC,MAAM,IAAID,mBAAmB,KAAKZ,UAAU,CAACE,YAAY,EAAE;EACxD,UAAA,IAAI,CAACF,UAAU,CAACG,KAAK,IAAIU,gBAAgB,EAAE;EAAE;EACzCb,YAAAA,UAAU,GAAG;EAAEhB,cAAAA,IAAI,EAAEuB,WAAW;EAAEN,cAAAA,IAAI,EAAEO,WAAW;EAAEN,cAAAA,YAAY,EAAEU,mBAAmB;EAAET,cAAAA,KAAK,EAAEU;eAAkB;EACrH,WAAC,MAAM,IAAIb,UAAU,CAACG,KAAK,IAAIU,gBAAgB,IAAIL,WAAW,GAAGR,UAAU,CAACC,IAAI,EAAE;EAAE;EAChFD,YAAAA,UAAU,GAAG;EAAEhB,cAAAA,IAAI,EAAEuB,WAAW;EAAEN,cAAAA,IAAI,EAAEO,WAAW;EAAEN,cAAAA,YAAY,EAAEU,mBAAmB;EAAET,cAAAA,KAAK,EAAEU;eAAkB;EACrH;EACJ;EACJ;EACJ;EACJ;EAEA,EAAA,IAAIC,UAAU,GAAGd,UAAU,CAAChB,IAAI;EAChC,EAAA,IAAI+B,UAAU,GAAGf,UAAU,CAACC,IAAI;EAEhC,EAAA,IAAIc,UAAU,GAAG,CAAC,IAAID,UAAU,GAAG,CAAC,EAAE;EAClC;MACA,IAAIE,OAAO,GAAG,MAAM;EACpBxB,IAAAA,IAAI,CAACyB,IAAI,CAAA,EAAA,CAAAnB,MAAA,CAAIiB,UAAU,OAAAjB,MAAA,CAAIgB,UAAU,EAAAhB,GAAAA,CAAAA,CAAAA,MAAA,CAAIT,YAAY,EAAA,mBAAA,CAAA,CAAAS,MAAA,CAAoBkB,OAAO,CAAE,CAAC;MACnFvB,gBAAgB,GAAGsB,UAAU,GAAGD,UAAU;EAC9C,GAAC,MAAM;EACH;EACArB,IAAAA,gBAAgB,GAAG,CAAC;EACxB;EAEA,EAAA,IAAII,kBAAkB;IACtB,IAAIJ,gBAAgB,GAAG,CAAC,EAAE;EACrBI,IAAAA,kBAAkB,GAAAC,OAAAA,CAAAA,MAAA,CAAWiB,UAAU,EAAAjB,GAAAA,CAAAA,CAAAA,MAAA,CAAIgB,UAAU,EAAAhB,IAAAA,CAAAA,CAAAA,MAAA,CAAKT,YAAY,EAA0C,2CAAA,CAAA;EACrH,GAAC,MAAM,IAAIE,2BAA2B,GAAG,GAAG,EAAE;EAAE;EAC5CM,IAAAA,kBAAkB,GAAAC,mDAAAA,CAAAA,MAAA,CAAuDP,2BAA2B,EAAG,GAAA,CAAA;EAC3G,GAAC,MAAM;EAAE;MACLM,kBAAkB,GAAA,kCAAA,CAAAC,MAAA,CAAsCT,YAAY,mBAAAS,MAAA,CAAgBP,2BAA2B,EAAG,GAAA,CAAA;EACtH;IACA,OAAO;EAAEC,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEG,IAAAA,kBAAkB,EAAlBA;KAAoB;EAC3E,CAAC;;ECtED;;EAEO,IAAMqB,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAI7B,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAK;IAChG,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;EACxB;IACA,IAAIC,gBAAgB,GAAGJ,gBAAgB;EAEvC,EAAA,IAAM6B,cAAc,GAAG;EACnB;EACA,EAAA;EAAEC,IAAAA,EAAE,EAAE,QAAQ;EAAEnB,IAAAA,IAAI,EAAE,EAAE;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,EAAE,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;EAAM,GAAC,EAC5F;EAAEH,IAAAA,EAAE,EAAE,QAAQ;EAAEnB,IAAAA,IAAI,EAAE,EAAE;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,EAAE,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;EAAM,GAAC,EAC5F;EAAEH,IAAAA,EAAE,EAAE,OAAO;EAAEnB,IAAAA,IAAI,EAAE,CAAC;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,CAAC,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;EAAM,GAAC,EACzF;EAAEH,IAAAA,EAAE,EAAE,OAAO;EAAEnB,IAAAA,IAAI,EAAE,CAAC;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,CAAC,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;KAAO;EACzF;EACA;EACA,EAAA;EAAEH,IAAAA,EAAE,EAAE,OAAO;EAAEI,IAAAA,QAAQ,EAAE,GAAG;EAAEH,IAAAA,IAAI,EAAE,MAAM;EAAEI,IAAAA,OAAO,EAAE,CAAC;EAAEF,IAAAA,QAAQ,EAAE;KAAO;EAAE;EAC3E,EAAA;EAAEH,IAAAA,EAAE,EAAE,QAAQ;EAAEI,IAAAA,QAAQ,EAAE,IAAI;EAAEH,IAAAA,IAAI,EAAE,MAAM;EAAEI,IAAAA,OAAO,EAAE,CAAC;EAAEF,IAAAA,QAAQ,EAAE;EAAM,GAAC;KAC9E;IAED,IAAIG,UAAU,GAAG,IAAI;IACrB,IAAIC,mBAAmB,GAAG,CAAC;EAE3B,EAAA,KAAA,IAAAvB,EAAA,GAAA,CAAA,EAAAwB,eAAA,GAAsBT,cAAc,EAAAf,EAAA,GAAAwB,eAAA,CAAAtB,MAAA,EAAAF,EAAA,EAAE,EAAA;EAAjC,IAAA,IAAMyB,OAAO,GAAAD,eAAA,CAAAxB,EAAA,CAAA;MACd,IAAIyB,OAAO,CAACL,QAAQ,EAAE;EAAE;EACpB,MAAA,IAAIjC,2BAA2B,IAAIsC,OAAO,CAACL,QAAQ,EAAE;UACjD,IAAIM,OAAO,GAAGnC,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAGsC,OAAO,CAACL,QAAQ,CAAC;UACxEM,OAAO,GAAGnC,IAAI,CAACgB,GAAG,CAACmB,OAAO,EAAED,OAAO,CAACJ,OAAO,CAAC;UAC5C,IAAIK,OAAO,GAAG,CAAC,EAAE;EACb,UAAA,IAAMC,mBAAmB,GAAGD,OAAO,GAAGD,OAAO,CAACL,QAAQ;YACtD,IAAIO,mBAAmB,GAAGJ,mBAAmB,EAAE;EAC3CA,YAAAA,mBAAmB,GAAGI,mBAAmB;EACzCL,YAAAA,UAAU,GAAG;EACTzB,cAAAA,IAAI,EAAE6B,OAAO;gBACb9C,IAAI,EAAE6C,OAAO,CAACL,QAAQ;gBACtBH,IAAI,EAAEQ,OAAO,CAACR,IAAI;EAClBW,cAAAA,SAAS,EAAED,mBAAmB;gBAC9BR,QAAQ,EAAEM,OAAO,CAACN,QAAQ;gBAC1BH,EAAE,EAAA,EAAA,CAAAtB,MAAA,CAAKgC,OAAO,OAAAhC,MAAA,CAAI+B,OAAO,CAACL,QAAQ;eACrC;EACL;EACJ;EACJ;EACJ,KAAC,MAAM;EAAE;EACL,MAAA,IAAIjC,2BAA2B,IAAIsC,OAAO,CAACP,YAAY,EAAE;EACrD;EACA,QAAA,IAAIO,OAAO,CAACP,YAAY,GAAGK,mBAAmB,EAAE;YAC5CA,mBAAmB,GAAGE,OAAO,CAACP,YAAY;EAC1CI,UAAAA,UAAU,GAAG;cACTzB,IAAI,EAAE4B,OAAO,CAAC5B,IAAI;cAClBjB,IAAI,EAAE6C,OAAO,CAAC7C,IAAI;cAClBqC,IAAI,EAAEQ,OAAO,CAACR,IAAI;cAClBW,SAAS,EAAEH,OAAO,CAACP,YAAY;cAC/BC,QAAQ,EAAEM,OAAO,CAACN,QAAQ;cAC1BH,EAAE,EAAES,OAAO,CAACT;aACf;EACL;EACJ;EACJ;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,IAAI,CAACM,UAAU,IAAInC,2BAA2B,IAAI,GAAG,EAAE;MACnD,IAAI0C,YAAY,GAAG,CAAC;EAAEC,MAAAA,YAAY,GAAG,CAAC;EAAEC,MAAAA,YAAY,GAAG,EAAE;EAAEC,MAAAA,aAAa,GAAG,CAAC;MAE5E,IAAI7C,2BAA2B,IAAI,GAAG,EAAE;EAAE;EACtC0C,MAAAA,YAAY,GAAG,GAAG;EAClBC,MAAAA,YAAY,GAAGvC,IAAI,CAACgB,GAAG,CAAChB,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1E4C,MAAAA,YAAY,GAAG,MAAM;EACzB,KAAC,MAAM;EAAE;EACLF,MAAAA,YAAY,GAAG,GAAG;EAClBC,MAAAA,YAAY,GAAGvC,IAAI,CAACgB,GAAG,CAAChB,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;EAC3E4C,MAAAA,YAAY,GAAG,MAAM;EACzB;MACA,IAAID,YAAY,GAAG,CAAC,EAAE;QAClBE,aAAa,GAAGF,YAAY,GAAGD,YAAY;QAC3C,IAAIG,aAAa,GAAG,CAAC,EAAE;EAAE;EACpBV,QAAAA,UAAU,GAAG;EACVzB,UAAAA,IAAI,EAAEiC,YAAY;EAClBlD,UAAAA,IAAI,EAAEiD,YAAY;EAClBZ,UAAAA,IAAI,EAAEc,YAAY;EAClBH,UAAAA,SAAS,EAAEI,aAAa;EACxBb,UAAAA,QAAQ,EAAE,KAAK;EACfH,UAAAA,EAAE,KAAAtB,MAAA,CAAKoC,YAAY,EAAApC,GAAAA,CAAAA,CAAAA,MAAA,CAAImC,YAAY,EAAA,aAAA;WACtC;EACL;EACJ;EACJ;EAGA,EAAA,IAAIpC,kBAAkB;EAEtB,EAAA,IAAI6B,UAAU,EAAE;EACZlC,IAAAA,IAAI,CAACyB,IAAI,CAAAnB,EAAAA,CAAAA,MAAA,CAAI4B,UAAU,CAACzB,IAAI,EAAAH,GAAAA,CAAAA,CAAAA,MAAA,CAAI4B,UAAU,CAAC1C,IAAI,EAAA,GAAA,CAAA,CAAAc,MAAA,CAAIT,YAAY,EAAA,gBAAA,CAAA,CAAAS,MAAA,CAAiB4B,UAAU,CAACH,QAAQ,EAAAzB,GAAAA,CAAAA,CAAAA,MAAA,CAAI4B,UAAU,CAACL,IAAI,CAAE,CAAC;MACzH5B,gBAAgB,GAAGiC,UAAU,CAACM,SAAS;MACvCnC,kBAAkB,GAAA,OAAA,CAAAC,MAAA,CAAW4B,UAAU,CAACN,EAAE,EAAAtB,IAAAA,CAAAA,CAAAA,MAAA,CAAKT,YAAY,EAAU,UAAA,CAAA;EACzE,GAAC,MAAM;EACHI,IAAAA,gBAAgB,GAAG,CAAC;MACpB,IAAIF,2BAA2B,GAAG,GAAG,EAAE;EACnCM,MAAAA,kBAAkB,GAAAC,0CAAAA,CAAAA,MAAA,CAA8CP,2BAA2B,EAAG,GAAA,CAAA;EAClG,KAAC,MAAM;QACHM,kBAAkB,GAAA,0CAAA,CAAAC,MAAA,CAA8CT,YAAY,mBAAAS,MAAA,CAAgBP,2BAA2B,EAAG,GAAA,CAAA;EAC9H;EACJ;IAEA,OAAO;EAAEC,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEG,IAAAA,kBAAkB,EAAlBA;KAAoB;EAC3E,CAAC;;EC/GD;;EAEO,IAAMwC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIhD,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAK;IAClG,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;EACxB;EACA,EAAA,IAAIC,gBAAgB,GAAGJ,gBAAgB,GAAG,CAAC,GAAGK,IAAI,CAACC,MAAM,EAAE,CAAC;;EAE5D,EAAA,IAAM0C,cAAc,GAAG;EACnB;EACA,EAAA;EAAEC,IAAAA,QAAQ,EAAE,QAAQ;EAAEf,IAAAA,QAAQ,EAAE,IAAI;EAAEC,IAAAA,OAAO,EAAE,CAAC;EAAEJ,IAAAA,IAAI,EAAE,OAAO;EAAEE,IAAAA,QAAQ,EAAE;KAAa;EAAE;EAC1F,EAAA;EAAEgB,IAAAA,QAAQ,EAAE,OAAO;EAAEf,IAAAA,QAAQ,EAAE,GAAG;EAAEC,IAAAA,OAAO,EAAE,CAAC;EAAEJ,IAAAA,IAAI,EAAE,MAAM;EAAEE,IAAAA,QAAQ,EAAE;KAAa;EAAG;EACxF;EACA,EAAA;EAAEH,IAAAA,EAAE,EAAE,OAAO;EAAEnB,IAAAA,IAAI,EAAE,CAAC;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,CAAC,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;EAAY,GAAC,EAC/F;EAAEH,IAAAA,EAAE,EAAE,OAAO;EAAEnB,IAAAA,IAAI,EAAE,CAAC;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,CAAC,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;EAAY,GAAC,EAC/F;EAAEH,IAAAA,EAAE,EAAE,OAAO;EAAEnB,IAAAA,IAAI,EAAE,CAAC;EAAEjB,IAAAA,IAAI,EAAE,GAAG;EAAEqC,IAAAA,IAAI,EAAE,MAAM;MAAEC,YAAY,EAAE,CAAC,GAAG,GAAG;EAAEC,IAAAA,QAAQ,EAAE;EAAY,GAAC,CAClG;IAED,IAAIG,UAAU,GAAG,IAAI;IACrB,IAAIC,mBAAmB,GAAG,CAAC;EAE3B,EAAA,KAAA,IAAAvB,EAAA,GAAA,CAAA,EAAAoC,eAAA,GAAsBF,cAAc,EAAAlC,EAAA,GAAAoC,eAAA,CAAAlC,MAAA,EAAAF,EAAA,EAAE,EAAA;EAAjC,IAAA,IAAMyB,OAAO,GAAAW,eAAA,CAAApC,EAAA,CAAA;MACd,IAAIyB,OAAO,CAACL,QAAQ,EAAE;EAAE;EACpB,MAAA,IAAIjC,2BAA2B,IAAIsC,OAAO,CAACL,QAAQ,EAAE;UACjD,IAAIM,OAAO,GAAGnC,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAGsC,OAAO,CAACL,QAAQ,CAAC;UACxEM,OAAO,GAAGnC,IAAI,CAACgB,GAAG,CAACmB,OAAO,EAAED,OAAO,CAACJ,OAAO,CAAC;UAC5C,IAAIK,OAAO,GAAG,CAAC,EAAE;EACb,UAAA,IAAMC,mBAAmB,GAAGD,OAAO,GAAGD,OAAO,CAACL,QAAQ;YACtD,IAAIO,mBAAmB,GAAGJ,mBAAmB,EAAE;EAC3CA,YAAAA,mBAAmB,GAAGI,mBAAmB;EACzCL,YAAAA,UAAU,GAAG;EACTzB,cAAAA,IAAI,EAAE6B,OAAO;gBACb9C,IAAI,EAAE6C,OAAO,CAACL,QAAQ;gBACtBH,IAAI,EAAEQ,OAAO,CAACR,IAAI;EAClBW,cAAAA,SAAS,EAAED,mBAAmB;gBAC9BR,QAAQ,EAAEM,OAAO,CAACN,QAAQ;gBAC1BH,EAAE,EAAA,EAAA,CAAAtB,MAAA,CAAKgC,OAAO,EAAA,GAAA,CAAA,CAAAhC,MAAA,CAAI+B,OAAO,CAACL,QAAQ,CAAE;eACvC;EACL;EACJ;EACJ;EACJ,KAAC,MAAM;EAAE;EACL,MAAA,IAAIjC,2BAA2B,IAAIsC,OAAO,CAACP,YAAY,EAAE;EACrD;EACA,QAAA,IAAIO,OAAO,CAACP,YAAY,GAAGK,mBAAmB,EAAE;YAC5CA,mBAAmB,GAAGE,OAAO,CAACP,YAAY;EAC1CI,UAAAA,UAAU,GAAG;cACTzB,IAAI,EAAE4B,OAAO,CAAC5B,IAAI;cAClBjB,IAAI,EAAE6C,OAAO,CAAC7C,IAAI;cAClBqC,IAAI,EAAEQ,OAAO,CAACR,IAAI;cAClBW,SAAS,EAAEH,OAAO,CAACP,YAAY;cAC/BC,QAAQ,EAAEM,OAAO,CAACN,QAAQ;EAC1BH,YAAAA,EAAE,EAAES,OAAO,CAACT,EAAE;aACjB;EACL;EACJ;EACJ;EACJ;;EAEA;EACA;EACA;EACA;EACA,EAAA,IAAI,CAACM,UAAU,IAAInC,2BAA2B,IAAI,GAAG,EAAE;EACnD,IAAA,IAAMkD,gBAAgB,GAAG;EAAE;EACvB,IAAA;EAAEzD,MAAAA,IAAI,EAAE,GAAG;EAAEqC,MAAAA,IAAI,EAAE,MAAM;EAAEE,MAAAA,QAAQ,EAAE,WAAW;EAAEmB,MAAAA,QAAQ,EAAE;EAAE,KAAC,EAC/D;EAAE1D,MAAAA,IAAI,EAAE,GAAG;EAAEqC,MAAAA,IAAI,EAAE,MAAM;EAAEE,MAAAA,QAAQ,EAAE,WAAW;EAAEmB,MAAAA,QAAQ,EAAE;EAAE,KAAC,EAC/D;EAAE1D,MAAAA,IAAI,EAAE,GAAG;EAAEqC,MAAAA,IAAI,EAAE,MAAM;EAAEE,MAAAA,QAAQ,EAAE,WAAW;EAAEmB,MAAAA,QAAQ,EAAE;EAAE,KAAC,CAClE;MAED,IAAIC,kBAAkB,GAAG,IAAI;MAC7B,IAAIC,kBAAkB,GAAG,CAAC;EAE1B,IAAA,KAAA,IAAAC,GAAA,GAAA,CAAA,EAAAC,iBAAA,GAAqBL,gBAAgB,EAAAI,GAAA,GAAAC,iBAAA,CAAAxC,MAAA,EAAAuC,GAAA,EAAE,EAAA;EAAlC,MAAA,IAAME,MAAM,GAAAD,iBAAA,CAAAD,GAAA,CAAA;EACb,MAAA,IAAItD,2BAA2B,IAAIwD,MAAM,CAAC/D,IAAI,EAAE;EAAE;UAC9C,IAAI8C,QAAO,GAAGnC,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAGwD,MAAM,CAAC/D,IAAI,CAAC;EACnE;EACA;EACA;UACA8C,QAAO,GAAGnC,IAAI,CAACgB,GAAG,CAACmB,QAAO,EAAE,CAAC,CAAC,CAAC;;UAE/B,IAAIA,QAAO,GAAG,CAAC,EAAE;EACb,UAAA,IAAMkB,cAAc,GAAGlB,QAAO,GAAGiB,MAAM,CAAC/D,IAAI;YAC5C,IAAIgE,cAAc,GAAGJ,kBAAkB,EAAE;EACrCA,YAAAA,kBAAkB,GAAGI,cAAc;EACnCL,YAAAA,kBAAkB,GAAG;EACjB1C,cAAAA,IAAI,EAAE6B,QAAO;gBACb9C,IAAI,EAAE+D,MAAM,CAAC/D,IAAI;gBACjBqC,IAAI,EAAE0B,MAAM,CAAC1B,IAAI;EACjBW,cAAAA,SAAS,EAAEgB,cAAc;gBACzBzB,QAAQ,EAAEwB,MAAM,CAACxB,QAAQ;gBACzBH,EAAE,EAAA,EAAA,CAAAtB,MAAA,CAAKgC,QAAO,OAAAhC,MAAA,CAAIiD,MAAM,CAAC/D,IAAI,EAAA,aAAA;eAChC;EACL;EACJ;EACJ;EACJ;EACA,IAAA,IAAI2D,kBAAkB,EAAE;QACpBjB,UAAU,GAAGiB,kBAAkB,CAAC;EACpC;EACJ;EAEA,EAAA,IAAI9C,kBAAkB;EAEtB,EAAA,IAAI6B,UAAU,EAAE;EACZlC,IAAAA,IAAI,CAACyB,IAAI,CAAAnB,EAAAA,CAAAA,MAAA,CAAI4B,UAAU,CAACzB,IAAI,EAAAH,GAAAA,CAAAA,CAAAA,MAAA,CAAI4B,UAAU,CAAC1C,IAAI,EAAA,GAAA,CAAA,CAAAc,MAAA,CAAIT,YAAY,EAAA,gBAAA,CAAA,CAAAS,MAAA,CAAiB4B,UAAU,CAACH,QAAQ,EAAAzB,GAAAA,CAAAA,CAAAA,MAAA,CAAI4B,UAAU,CAACL,IAAI,CAAE,CAAC;EACzH5B,IAAAA,gBAAgB,GAAGiC,UAAU,CAACM,SAAS,CAAC;EACxCnC,IAAAA,kBAAkB,WAAAC,MAAA,CAAW4B,UAAU,CAACN,EAAE,EAAAtB,IAAAA,CAAAA,CAAAA,MAAA,CAAKT,YAAY,UAAAS,MAAA,CAAO4B,UAAU,CAACH,QAAQ,EAAG,GAAA,CAAA;EAC5F,GAAC,MAAM;EACH9B,IAAAA,gBAAgB,GAAG,CAAC;EACpB,IAAA,IAAMwD,MAAM,GAAG,GAAG,CAAC;MACnB,IAAI1D,2BAA2B,GAAG0D,MAAM,EAAE;EACtCpD,MAAAA,kBAAkB,GAAAC,wDAAAA,CAAAA,MAAA,CAA4DP,2BAA2B,EAAG,GAAA,CAAA;EAChH,KAAC,MAAM;QACHM,kBAAkB,GAAA,sDAAA,CAAAC,MAAA,CAA0DT,YAAY,mBAAAS,MAAA,CAAgBP,2BAA2B,EAAG,GAAA,CAAA;EAC1I;EACJ;IAEA,OAAO;EAAEC,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEG,IAAAA,kBAAkB,EAAlBA;KAAoB;EAC3E,CAAC;;ECvHD;;EAEA,IAAMqD,eAAe,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;EAC1C,IAAMC,SAAS,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;;EAE/C;EACA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,OAAO,EAAK;EAC5B,EAAA,IAAIC,eAAe;IACnB,IAAID,OAAO,KAAK,GAAG,EAAEC,eAAe,GAAG,EAAE,CAAC;SACrC,IAAID,OAAO,KAAK,EAAE,EAAEC,eAAe,GAAG,GAAG,CAAC;SAC1C,IAAID,OAAO,KAAK,EAAE,EAAEC,eAAe,GAAG,CAAC,CAAC;SACxC,IAAID,OAAO,KAAK,EAAE,EAAEC,eAAe,GAAG,GAAG,CAAC;EAAC,OAC3CA,eAAe,GAAG,CAAC,CAAC;;EAEzB;IACA,IAAMC,UAAU,GAAG,CAAC,GAAG5D,IAAI,CAACC,MAAM,EAAE,CAAC;EACrC,EAAA,IAAI4D,WAAW,GAAG7D,IAAI,CAAC8D,KAAK,CAAEH,eAAe,GAAGC,UAAU,GAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACrEC,WAAW,GAAG7D,IAAI,CAAC+D,GAAG,CAACF,WAAW,EAAE,CAAC,CAAC,CAAC;EACvC,EAAA,IAAIH,OAAO,KAAK,GAAG,EAAEG,WAAW,GAAG7D,IAAI,CAAC+D,GAAG,CAACF,WAAW,EAAE,EAAE,CAAC,CAAC;;IAE7D,OAAA1D,GAAAA,CAAAA,MAAA,CAAW0D,WAAW,EAAA,IAAA,CAAA;EAC1B,CAAC;EAEM,IAAMG,eAAe,GAAG,SAAlBA,eAAeA,CAAItE,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAK;IAC5F,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;EACxB;EACA,EAAA,IAAIC,gBAAgB,GAAGJ,gBAAgB,GAAG,CAAC,GAAIK,IAAI,CAACC,MAAM,EAAE,GAAG,CAAE;;EAEjE;EACA;EACA,EAAA,IAAMgE,qBAAqB,GAAGjE,IAAI,CAAC+D,GAAG,CAAC,GAAG,EAAE/D,IAAI,CAACgB,GAAG,CAACpB,2BAA2B,EAAE,IAAI,CAAC,CAAC;EAExF,EAAA,IAAIA,2BAA2B,GAAG2D,eAAe,CAAC,CAAC,CAAC,EAAE;EAAE;MACpD,OAAO;EAAE1D,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,yCAAA,CAAAC,MAAA,CAA4CP,2BAA2B,EAAA,GAAA;OAAK;EACxJ;EAEA,EAAA,IAAIqE,qBAAqB,GAAGV,eAAe,CAAC,CAAC,CAAC,EAAE;MAC3C,OAAO;EAAE1D,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,0CAAA,CAAAC,MAAA,CAA6CP,2BAA2B,EAAA,GAAA;OAAK;EAC1J;EAEA,EAAA,IAAIsE,SAAS,GAAGlE,IAAI,CAAC+D,GAAG,CAAC,CAAC,EAAE/D,IAAI,CAACmE,IAAI,CAACF,qBAAqB,GAAG,GAAG,CAAC,CAAC,CAAC;;IAEpE,IAAIG,uBAAuB,GAAG,CAAC;IAC/B,IAAIC,2BAA2B,GAAGJ,qBAAqB;IAAC,IAAAK,KAAA,GAAAA,SAAAA,KAAAA,GAEpB;EAChC,MAAA,IAAID,2BAA2B,GAAGd,eAAe,CAAC,CAAC,CAAC,EAAA,OAAA,CAAA,CAAA;EAEpD,MAAA,IAAIgB,mBAAmB,GAAGvE,IAAI,CAACc,KAAK,CAACuD,2BAA2B,IAAIH,SAAS,GAAGM,CAAC,CAAC,CAAC;EACnF,MAAA,IAAID,mBAAmB,GAAGhB,eAAe,CAAC,CAAC,CAAC,EAAA,OAAA,CAAA,CAAA;;EAE5C;EACA,MAAA,IAAIG,OAAO,GAAGH,eAAe,CAACvD,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAGsD,eAAe,CAAC5C,MAAM,CAAC,CAAC;;EAEjF;QACA,IAAI+C,OAAO,GAAGa,mBAAmB,EAAE;EAC/B,QAAA,IAAME,aAAa,GAAGlB,eAAe,CAACmB,MAAM,CAAC,UAAAC,CAAC,EAAA;YAAA,OAAIA,CAAC,IAAIJ,mBAAmB;WAAC,CAAA;EAC3E,QAAA,IAAIE,aAAa,CAAC9D,MAAM,GAAG,CAAC,EAAE;YAC1B+C,OAAO,GAAGe,aAAa,CAACA,aAAa,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAAC;EACtD,SAAC,MAAM;EAAA,UAAA,OAAA,CAAA,CAAA;EACO;EACd;EACJ;QACA,IAAI+C,OAAO,KAAK,CAAC,EAAA,OAAA,CAAA,CAAA;QAEjB,IAAIvB,OAAO,GAAGnC,IAAI,CAACc,KAAK,CAACyD,mBAAmB,GAAGb,OAAO,CAAC;QACvDvB,OAAO,GAAGnC,IAAI,CAACgB,GAAG,CAACmB,OAAO,EAAE,EAAE,CAAC,CAAC;QAChCA,OAAO,GAAGnC,IAAI,CAAC+D,GAAG,CAAC5B,OAAO,EAAE,CAAC,CAAC,CAAC;;EAE/B,MAAA,IAAIA,OAAO,GAAGuB,OAAO,GAAGa,mBAAmB,EAAE;EAAE;UAC3CpC,OAAO,GAAGnC,IAAI,CAACc,KAAK,CAACyD,mBAAmB,GAAGb,OAAO,CAAC;EACvD;QAEA,IAAIvB,OAAO,GAAG,CAAC,EAAE;EACb,QAAA,IAAMyC,yBAAyB,GAAGzC,OAAO,GAAGuB,OAAO;EACnD,QAAA,IAAMmB,OAAO,GAAGpB,UAAU,CAACC,OAAO,CAAC;EACnC,QAAA,IAAMoB,SAAS,GAAGtB,SAAS,CAACxD,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAGuD,SAAS,CAAC7C,MAAM,CAAC,CAAC;UAEzEd,IAAI,CAACyB,IAAI,CAAAnB,EAAAA,CAAAA,MAAA,CAAIgC,OAAO,EAAA,GAAA,CAAA,CAAAhC,MAAA,CAAIuD,OAAO,EAAA,GAAA,CAAA,CAAAvD,MAAA,CAAI2E,SAAS,EAAA3E,IAAAA,CAAAA,CAAAA,MAAA,CAAKT,YAAY,cAAAS,MAAA,CAAW0E,OAAO,CAAE,CAAC;EAElFT,QAAAA,uBAAuB,IAAIQ,yBAAyB;EACpDP,QAAAA,2BAA2B,IAAIO,yBAAyB;EAExD,QAAA,IAAIJ,CAAC,GAAGN,SAAS,GAAG,CAAC,IAAIG,2BAA2B,IAAId,eAAe,CAAC,CAAC,CAAC,EAAE;EACxE;EACA,UAAA,IAAMwB,gBAAgB,GAAG,EAAE,GAAG/E,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;YAC7D,IAAI8E,gBAAgB,IAAI,EAAE,EAAE;cACvB,IAAMC,OAAO,GAAGhF,IAAI,CAACc,KAAK,CAACiE,gBAAgB,GAAG,EAAE,CAAC;EACjD,YAAA,IAAME,OAAO,GAAGF,gBAAgB,GAAG,EAAE;cACrC,IAAIE,OAAO,KAAK,CAAC,EAAEpF,IAAI,CAACyB,IAAI,CAAAnB,EAAAA,CAAAA,MAAA,CAAI6E,OAAO,EAA6B,6BAAA,CAAA,CAAC,CAAC,KACjEnF,IAAI,CAACyB,IAAI,CAAA,EAAA,CAAAnB,MAAA,CAAI6E,OAAO,EAAA,MAAA,CAAA,CAAA7E,MAAA,CAAO8E,OAAO,EAAA,2BAAA,CAA2B,CAAC;EACxE,WAAC,MAAM;EAAE;EACJpF,YAAAA,IAAI,CAACyB,IAAI,CAAA,EAAA,CAAAnB,MAAA,CAAI4E,gBAAgB,8BAA2B,CAAC;EAC9D;EACJ;EACJ;OACH;MAAAG,IAAA;IAnDD,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,EAAEM,CAAC,EAAE,EAAA;EAAAU,IAAAA,IAAA,GAAAZ,KAAA,EAAA;EAAA,IAAA,IAAAY,IAAA,KACwB,CAAA,EAAA;EAAM,IAAA,IAAAA,IAAA,KAGd,CAAA,EAAA;EAAS;EAgD3DpF,EAAAA,gBAAgB,GAAGsE,uBAAuB;EAE1C,EAAA,IAAIlE,kBAAkB;IACtB,IAAIJ,gBAAgB,GAAG,CAAC,EAAE;MACtBI,kBAAkB,GAAA,0BAAA,CAAAC,MAAA,CAA8BT,YAAY,2BAAAS,MAAA,CAAwBL,gBAAgB,EAAM,MAAA,CAAA;EAC9G,GAAC,MAAM;EACHI,IAAAA,kBAAkB,GAAAC,yCAAAA,CAAAA,MAAA,CAA6CP,2BAA2B,EAA8B,8BAAA,CAAA;EAC5H;;EAEA;EACA;EACA;;IAEA,OAAO;EAAEC,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEG,IAAAA,kBAAkB,EAAlBA;KAAoB;EAC3E,CAAC;;EChHD;;EAEA,IAAMiF,eAAe,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;;EAEhC;EACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAI1B,OAAO,EAAK;IAClC,IAAI2B,MAAM,EAAEC,MAAM;IAClB,IAAI5B,OAAO,KAAK,EAAE,EAAE;MAChB2B,MAAM,GAAG,EAAE,CAAC;MACZC,MAAM,GAAG,GAAG,CAAC;EACjB,GAAC,MAAM,IAAI5B,OAAO,KAAK,EAAE,EAAE;MACvB2B,MAAM,GAAG,GAAG,CAAC;MACbC,MAAM,GAAG,GAAG,CAAC;EACjB,GAAC,MAAM;EAAE;EACLD,IAAAA,MAAM,GAAG,EAAE;EACXC,IAAAA,MAAM,GAAG,GAAG;EAChB;IAEA,IAAMC,YAAY,GAAGF,MAAM,GAAGrF,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,IAAIqF,MAAM,GAAGD,MAAM,GAAG,CAAC,CAAC,CAAC;IAE/E,IAAML,OAAO,GAAGhF,IAAI,CAACc,KAAK,CAACyE,YAAY,GAAG,EAAE,CAAC;EAC7C,EAAA,IAAMN,OAAO,GAAGM,YAAY,GAAG,EAAE;IAEjC,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIR,OAAO,GAAG,CAAC,EAAE;EACbQ,IAAAA,UAAU,IAAArF,EAAAA,CAAAA,MAAA,CAAO6E,OAAO,EAAG,GAAA,CAAA;EAC/B;IACA,IAAIC,OAAO,GAAG,CAAC,EAAE;EACb;EACA;EACAO,IAAAA,UAAU,IAAArF,EAAAA,CAAAA,MAAA,CAAO8E,OAAO,EAAG,IAAA,CAAA;KAC9B,MAAM,IAAID,OAAO,KAAK,CAAC,IAAIC,OAAO,KAAK,CAAC,EAAE;EAAE;MACzCO,UAAU,GAAG,KAAK,CAAC;EACvB;IAIA,OAAArF,GAAAA,CAAAA,MAAA,CAAWqF,UAAU,CAAA;EACzB,CAAC;EAGM,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAI/F,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAK;IACvF,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;EACxB;EACA,EAAA,IAAIC,gBAAgB,GAAGJ,gBAAgB,GAAG,EAAE,GAAIK,IAAI,CAACC,MAAM,EAAE,GAAG,CAAE;;EAElE;EACA,EAAA,IAAMyF,qBAAqB,GAAG1F,IAAI,CAAC+D,GAAG,CAAC,GAAG,EAAE/D,IAAI,CAACgB,GAAG,CAACpB,2BAA2B,EAAE,IAAI,CAAC,CAAC;EAExF,EAAA,IAAIA,2BAA2B,GAAGuF,eAAe,CAAC,CAAC,CAAC,EAAE;EAAE;MACpD,OAAO;EAAEtF,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,yCAAA,CAAAC,MAAA,CAA4CP,2BAA2B,EAAA,GAAA;OAAK;EACxJ;EACA,EAAA,IAAI8F,qBAAqB,GAAGP,eAAe,CAAC,CAAC,CAAC,EAAE;MAC3C,OAAO;EAAEtF,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,sBAAA,CAAAC,MAAA,CAAyBuF,qBAAqB,EAAA,uBAAA;OAAyB;EACpJ;IAEA,IAAIhC,OAAO,GAAG,CAAC;IACf,IAAIvB,OAAO,GAAG,CAAC;;EAEf;EACA;EACA;EACA;EACA;;EAEA,EAAA,IAAMwD,QAAQ,GAAGD,qBAAqB,IAAI,EAAE,CAAC;EAC7C,EAAA,IAAME,QAAQ,GAAGF,qBAAqB,IAAI,EAAE,CAAC;;EAE7C,EAAA,IAAIC,QAAQ,IAAID,qBAAqB,IAAI,GAAG,EAAE;EAAE;EAC5ChC,IAAAA,OAAO,GAAG,EAAE;KACf,MAAM,IAAIkC,QAAQ,EAAE;EACjBlC,IAAAA,OAAO,GAAG,EAAE;EAChB,GAAC,MAAM;EAAE;MACJ,OAAO;EAAE7D,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,oDAAA,CAAAC,MAAA,CAAuDuF,qBAAqB,EAAA,GAAA;OAAK;EAC9J;IAEAvD,OAAO,GAAGnC,IAAI,CAACc,KAAK,CAAC4E,qBAAqB,GAAGhC,OAAO,CAAC;IACrDvB,OAAO,GAAGnC,IAAI,CAAC+D,GAAG,CAAC5B,OAAO,EAAE,CAAC,CAAC,CAAC;;EAE/B,EAAA,IAAM0D,qBAAqB,GAAG1D,OAAO,GAAGuB,OAAO;IAE/C,IAAImC,qBAAqB,GAAG,CAAC,EAAE;EAC3B,IAAA,IAAMC,OAAO,GAAGV,gBAAgB,CAAC1B,OAAO,CAAC;EACzC;EACA;EACA7D,IAAAA,IAAI,CAACyB,IAAI,CAAA,EAAA,CAAAnB,MAAA,CAAIgC,OAAO,OAAAhC,MAAA,CAAIuD,OAAO,EAAAvD,cAAAA,CAAAA,CAAAA,MAAA,CAAeT,YAAY,EAAA,0BAAA,CAAA,CAAAS,MAAA,CAA2B2F,OAAO,CAAE,CAAC;EAC/FhG,IAAAA,gBAAgB,GAAG+F,qBAAqB;EAC5C,GAAC,MAAM;EACH;EACA/F,IAAAA,gBAAgB,GAAG,CAAC;EACxB;EAEA,EAAA,IAAII,kBAAkB;IACtB,IAAIJ,gBAAgB,GAAG,CAAC,EAAE;EACtBI,IAAAA,kBAAkB,+BAAAC,MAAA,CAA+BT,YAAY,EAAA,2BAAA,CAAA,CAAAS,MAAA,CAA4BgC,OAAO,EAAAhC,GAAAA,CAAAA,CAAAA,MAAA,CAAIuD,OAAO,EAAA,WAAA,CAAA,CAAAvD,MAAA,CAAYL,gBAAgB,EAAM,MAAA,CAAA;EACjJ,GAAC,MAAM;EACHI,IAAAA,kBAAkB,GAAAC,yCAAAA,CAAAA,MAAA,CAA6CP,2BAA2B,EAA8B,8BAAA,CAAA;EAC5H;IAEA,OAAO;EAAEC,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEG,IAAAA,kBAAkB,EAAlBA;KAAoB;EAC3E,CAAC;;ECrGM,IAAM6F,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIrG,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAK;IAC9F,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,gBAAgB,GAAGJ,gBAAgB;EACvC,EAAA,IAAMqG,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IACjD,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,iBAAiB,GAAGC,QAAQ;IAEhC,IAAIxG,2BAA2B,GAAG,EAAE,EAAE;EAAE;MACpC,OAAO;EAAEC,MAAAA,IAAI,EAAJA,IAAI;EAAEC,MAAAA,gBAAgB,EAAE,CAAC;EAAEC,MAAAA,gBAAgB,EAAhBA,gBAAgB;QAAEG,kBAAkB,EAAA,qBAAA,CAAAC,MAAA,CAAwBT,YAAY,EAAA,oBAAA;OAAsB;EACtI;EAEA,EAAA,KAAA,IAAAe,EAAA,GAAA,CAAA,EAAA4F,iBAAA,GAAmBL,gBAAgB,EAAAvF,EAAA,GAAA4F,iBAAA,CAAA1F,MAAA,EAAAF,EAAA,EAAE,EAAA;EAAhC,IAAA,IAAMpB,IAAI,GAAAgH,iBAAA,CAAA5F,EAAA,CAAA;MACX,IAAIb,2BAA2B,IAAIP,IAAI,EAAE;QACrC,IAAIiH,cAAc,GAAGtG,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAGP,IAAI,CAAC;EACnE,MAAA,IAAIkH,gBAAgB,GAAG3G,2BAA2B,GAAI0G,cAAc,GAAGjH,IAAK;QAC5E,IAAIiH,cAAc,GAAG,CAAC,EAAE;EAAE;UACtB,IAAIC,gBAAgB,GAAGJ,iBAAiB,EAAE;EACtCA,UAAAA,iBAAiB,GAAGI,gBAAgB;EACpCN,UAAAA,WAAW,GAAG5G,IAAI;EAClB6G,UAAAA,WAAW,GAAGI,cAAc;EAChC,SAAC,MAAM,IAAIC,gBAAgB,KAAKJ,iBAAiB,EAAE;YAC/C,IAAI9G,IAAI,GAAG4G,WAAW,EAAE;EAAE;EACtBA,YAAAA,WAAW,GAAG5G,IAAI;EAClB6G,YAAAA,WAAW,GAAGI,cAAc;EAChC;EACJ;EACJ;EACJ;EACJ;EAEA,EAAA,IAAIJ,WAAW,KAAK,CAAC,IAAItG,2BAA2B,IAAI,EAAE,EAAE;EACxD;EACA;MACA,IAAIA,2BAA2B,IAAI,EAAE,EAAE;QAClCqG,WAAW,GAAGjG,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAG,EAAE,CAAC,GAAG,EAAE;QAC/D,IAAGqG,WAAW,KAAK,CAAC,EAAEA,WAAW,GAAG,EAAE,CAAC;EAC5C,KAAC,MAAM;EAAE;EACJA,MAAAA,WAAW,GAAG,EAAE;EACrB;EACA,IAAA,IAAIA,WAAW,GAAG,CAAC,EAAEC,WAAW,GAAGlG,IAAI,CAACc,KAAK,CAAClB,2BAA2B,GAAGqG,WAAW,CAAC;MACxF,IAAIC,WAAW,GAAGD,WAAW,GAAGrG,2BAA2B,EAAEsG,WAAW,GAAG,CAAC,CAAC;EACjF;;EAEA;EACA,EAAA,IAAIA,WAAW,GAAG,CAAC,IAAID,WAAW,GAAG,CAAC,EAAE;EACpC,IAAA,IAAIO,cAAc,GAAGN,WAAW,GAAGD,WAAW;EAE9C,IAAA,IAAIO,cAAc,GAAG5G,2BAA2B,GAAG,IAAI,IAAIqG,WAAW,IAAI,GAAG,IAAIC,WAAW,GAAG,CAAC,EAAE;QAC9FO,OAAO,CAACC,GAAG,CAAA,mEAAA,CAAAvG,MAAA,CAAqE+F,WAAW,EAAA,GAAA,CAAA,CAAA/F,MAAA,CAAI8F,WAAW,EAAA,uBAAA,CAAuB,CAAC;EAClIC,MAAAA,WAAW,EAAE;EACjB;EACJ;EACA;;EAEA,EAAA,IAAIA,WAAW,GAAG,CAAC,IAAID,WAAW,GAAG,CAAC,EAAE;EAAE;MACtC,IAAIU,QAAQ,GAAG,EAAE;EACjB,IAAA,IAAIV,WAAW,IAAI,GAAG,EAAEU,QAAQ,GAAG,EAAE,CAAC,KACjC,IAAIV,WAAW,IAAI,GAAG,EAAEU,QAAQ,GAAG,EAAE,CAAC,KACtC,IAAIV,WAAW,IAAI,GAAG,EAAEU,QAAQ,GAAG,EAAE,CAAC,KACtCA,QAAQ,GAAG,EAAE;EAClB9G,IAAAA,IAAI,CAACyB,IAAI,CAAA,EAAA,CAAAnB,MAAA,CAAI+F,WAAW,OAAA/F,MAAA,CAAI8F,WAAW,EAAA9F,SAAAA,CAAAA,CAAAA,MAAA,CAAUT,YAAY,EAAA,WAAA,CAAA,CAAAS,MAAA,CAAYwG,QAAQ,OAAG,CAAC;MACrF7G,gBAAgB,GAAGoG,WAAW,GAAGD,WAAW;EAChD,GAAC,MAAM;EACFnG,IAAAA,gBAAgB,GAAG,CAAC;EACzB;IACA,OAAO;EAAED,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAAEC,IAAAA,gBAAgB,EAAhBA,gBAAgB;MAAEG,kBAAkB,EAAA,qBAAA,CAAAC,MAAA,CAAwBT,YAAY,EAAA,gBAAA;KAAkB;EAC/H,CAAC;;EC7DD,IAAMkH,kBAAkB,GAAG;EACvB,EAAA,gBAAgB,EAAEnH,cAAc;EAChC,EAAA,qBAAqB,EAAE8B,mBAAmB;EAC1C,EAAA,uBAAuB,EAAEmB,qBAAqB;EAC9C,EAAA,iBAAiB,EAAEsB,eAAe;EAClC,EAAA,YAAY,EAAEyB,UAAU;EACxB,EAAA,mBAAmB,EAAEM;EACzB,CAAC;;ECdD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASc,YAAYA,CAACC,gBAAgB,EAAEvH,cAAc,EAAE;IACpD,IAAMwH,SAAS,GAAG/G,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;;IAEtC,IAAI8G,SAAS,IAAID,gBAAgB,IAAIA,gBAAgB,CAACnG,MAAM,GAAG,CAAC,EAAE;EAC9D,IAAA,OAAOmG,gBAAgB,CAAC9G,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAG6G,gBAAgB,CAACnG,MAAM,CAAC,CAAC;EAChF,GAAC,MAAM;EACH,IAAA,OAAOpB,cAAc;EACzB;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,SAASyH,cAAcA,CAACC,kBAAkB,EAAE;EACxC,EAAA,IAAIA,kBAAkB,IAAIA,kBAAkB,CAACtG,MAAM,GAAG,CAAC,EAAE;EACrD,IAAA,OAAOsG,kBAAkB,CAACjH,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAGgH,kBAAkB,CAACtG,MAAM,CAAC,CAAC;EACpF;IACA,OAAO,IAAI,CAAC;EAChB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASuG,eAAeA,CAACC,WAAW,EAAEzH,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAEgH,kBAAkB,EAAE;EACnH,EAAA,IAAIQ,SAAS,GAAGR,kBAAkB,CAACO,WAAW,CAAC;EAC/C,EAAA,IAAIE,qBAAqB;IAEzB,IAAI,CAACD,SAAS,EAAE;EACZC,IAAAA,qBAAqB,GAAAlH,wBAAAA,CAAAA,MAAA,CAA4BgH,WAAW,EAAoC,oCAAA,CAAA;EAChGC,IAAAA,SAAS,GAAGR,kBAAkB,CAAC,mBAAmB,CAAC;EACvD;;EAEA;IACA,IAAIU,aAAa,GAAGF,SAAS,CAAC1H,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,CAAC;;EAE1F;EACA,EAAA,IAAI0H,aAAa,CAACxH,gBAAgB,GAAG,GAAG,IAAIF,2BAA2B,GAAG,GAAG,IAAIuH,WAAW,KAAK,mBAAmB,EAAE;MAClH,IAAII,eAAe,GAAG,0FAA0F;EAEhH,IAAA,IAAMC,eAAe,GAAGF,aAAa,CAACpH,kBAAkB,CAAC;EACzDoH,IAAAA,aAAa,GAAGV,kBAAkB,CAAC,mBAAmB,CAAC,CAAClH,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,CAAC,CAAC;;EAErH;MACA,IAAI6H,oBAAoB,GAAGF,eAAe;EAC1C,IAAA,IAAIC,eAAe,EAAE;EAAE;EACnBC,MAAAA,oBAAoB,GAAGD,eAAe,GAAG,GAAG,GAAGD,eAAe;EAClE,KAAC,MAAM,IAAID,aAAa,CAACpH,kBAAkB,EAAE;EAAE;EAC3CuH,MAAAA,oBAAoB,GAAGF,eAAe,GAAG,GAAG,GAAGD,aAAa,CAACpH,kBAAkB;EACnF;MACAoH,aAAa,CAACpH,kBAAkB,GAAGuH,oBAAoB;EAC3D,GAAC,MAAM;EACH;EACA;EACA;EACA,IAAA,IAAIJ,qBAAqB,EAAE;EACvB,MAAA,IAAI,CAACC,aAAa,CAACpH,kBAAkB,EAAE;UACnCoH,aAAa,CAACpH,kBAAkB,GAAGmH,qBAAqB;EAC5D,OAAC,MAAM;EACH;EACA;UACAC,aAAa,CAACpH,kBAAkB,GAAGmH,qBAAqB,GAAG,+BAA+B,GAAGC,aAAa,CAACpH,kBAAkB;EACjI;OACH,MAAM,IAAIiH,WAAW,KAAK,mBAAmB,IAAI,CAACG,aAAa,CAACpH,kBAAkB,EAAE;EACjF;EACAoH,MAAAA,aAAa,CAACpH,kBAAkB,GAAA,qBAAA,CAAAC,MAAA,CAAyBT,YAAY,EAAQ,QAAA,CAAA;EACjF;EACJ;EACA,EAAA,OAAO4H,aAAa;EACxB;EAEA,IAAMI,gBAAgB,GAAG;EACrBb,EAAAA,YAAY,EAAZA,YAAY;EACZG,EAAAA,cAAc,EAAdA,cAAc;EACdE,EAAAA,eAAe,EAAfA;EACJ,CAAC;;EC7FD;EACO,SAASS,qBAAqBA,CAACC,UAAU,EAAE;EAC9C,EAAA,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;EAChC,IAAA,OAAO,IAAI;EACf;EACA,EAAA,IAAMC,KAAK,GAAGD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;EACnC,EAAA,IAAID,KAAK,CAAClH,MAAM,KAAK,CAAC,EAAE;MACpB,IAAMqE,OAAO,GAAG+C,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MACtC,IAAM5C,OAAO,GAAG+C,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MACpC,IAAII,KAAK,CAACjD,OAAO,CAAC,IAAIiD,KAAK,CAAChD,OAAO,CAAC,EAAE;EAClC,MAAA,OAAO,IAAI;EACf;EACA,IAAA,OAAOD,OAAO,GAAG,EAAE,GAAGC,OAAO;EACjC;IACA,OAAO,IAAI,CAAC;EAChB;;EAEA;EACO,SAASiD,mBAAmBA,CAAC3C,YAAY,EAAE;IAC9C,IAAMP,OAAO,GAAGhF,IAAI,CAACc,KAAK,CAACyE,YAAY,GAAG,EAAE,CAAC;EAC7C,EAAA,IAAMN,OAAO,GAAG,CAACM,YAAY,GAAG,EAAE,EAAE4C,OAAO,CAAC,CAAC,CAAC,CAAC;EAC/C,EAAA,OAAA,EAAA,CAAAhI,MAAA,CAAU6E,OAAO,EAAA7E,GAAAA,CAAAA,CAAAA,MAAA,CAAI8E,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAA9E,CAAAA,MAAA,CAAG8E,OAAO,CAAA;EAC1D;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASmD,iBAAeA,CAACC,kBAAkB,EAAE3I,YAAY,EAAE4I,WAAW,EAAEnB,WAAW,EAAE;EACjF,EAAA,IAAMoB,4BAA4B,GAAG,GAAG,CAAC;EACzC;EACA;;EAEA,EAAA,IAAM5I,gBAAgB,GAAGgI,qBAAqB,CAACW,WAAW,CAAC;IAC3D,IAAI3I,gBAAgB,KAAK,IAAI,EAAE;EAC3B,IAAA,OAAO,kEAAkE;EAC7E;IAEA,IAAI6I,cAAc,GAAG,EAAE;IACvB,IAAIC,sBAAsB,GAAG,CAAC;EAC9B,EAAA,IAAMC,YAAY,GAAG,OAAO,CAAC;;EAE7B;EACA,EAAA,IAAIC,cAAc;IAClB,IAAIN,kBAAkB,GAAGE,4BAA4B,EAAE;EACnDI,IAAAA,cAAc,GAAAC,cAAA,CAAAA,cAAA,KAAQrJ,cAAc,CAAA,EAAA,EAAA,EAAA;EAAEH,MAAAA,IAAI,EAAE;OAA6B,CAAA;EAC7E,GAAC,MAAM;EACH;MACAuJ,cAAc,GAAGE,gBAAiB,CAAChC,YAAY,CAAC1H,OAAO,EAAEI,cAAc,CAAC,CAAC;EACzE,IAAA,IAAIoJ,cAAc,IAAIA,cAAc,CAACtJ,IAAI,GAAG,CAAC,EAAE;QAC3C,IAAMyJ,mBAAmB,GAAG,GAAG;EAC/B,MAAA,IAAIC,oBAAoB,GAAGV,kBAAkB,GAAGS,mBAAmB;;EAEnE;QACAC,oBAAoB,GAAG/I,IAAI,CAACgB,GAAG,CAAC+H,oBAAoB,EAAEV,kBAAkB,GAAG,GAAG,CAAC;EAE/E,MAAA,IAAIU,oBAAoB,GAAG,CAAC,IAAIV,kBAAkB,GAAG,CAAC,EAAE;EACnDU,QAAAA,oBAAoB,GAAGV,kBAAkB,GAAG,GAAG,CAAC;EACC;EACA;EACjD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACL,OAAC;;EAED,MAAA,IAAIU,oBAAoB,GAAG,EAAE,IAAIV,kBAAkB,IAAI,EAAE,EAAE;EACtDU,QAAAA,oBAAoB,GAAG,EAAE;EAC9B;EACA;EACA,MAAA,IAAIA,oBAAoB,GAAG,CAAC,EAAEA,oBAAoB,GAAG,CAAC;EAGtD,MAAA,IAAIJ,cAAc,CAACtJ,IAAI,GAAG0J,oBAAoB,EAAE;EAC5C,QAAA,IAAMC,eAAe,GAAG7J,OAAO,CAACuF,MAAM,CAAC,UAAAuE,EAAE,EAAA;YAAA,OAAIA,EAAE,CAAC5J,IAAI,IAAI0J,oBAAoB,IAAIE,EAAE,CAAC5J,IAAI,GAAG,CAAC;WAAC,CAAA;EAC5F,QAAA,IAAI2J,eAAe,CAACrI,MAAM,GAAG,CAAC,EAAE;EAC5BgI,UAAAA,cAAc,GAAGK,eAAe,CAAChJ,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAG+I,eAAe,CAACrI,MAAM,CAAC,CAAC;EACxF,SAAC,MAAM;EACHgI,UAAAA,cAAc,GAAGpJ,cAAc;EACnC;EACJ;OACH,MAAM,IAAI,CAACoJ,cAAc,IAAIA,cAAc,CAACtJ,IAAI,KAAK,CAAC,EAAE;EACrDsJ,MAAAA,cAAc,GAAGpJ,cAAc;EACnC;EACJ;EAEA,EAAA,IAAIoJ,cAAc,EAAE;MAChBH,cAAc,CAAClH,IAAI,CAAAnB,MAAAA,CAAAA,MAAA,CAAQwI,cAAc,CAACvJ,IAAI,CAAE,CAAC;MACjDqJ,sBAAsB,IAAIE,cAAc,CAACtJ,IAAI;EACjD;;EAEA;IACA,IAAI6J,kBAAkB,GAAG,WAAW;IACpC,IAAIrJ,IAAI,GAAG,EAAE;IACb,IAAIC,gBAAgB,GAAG,CAAC;EACxB,EAAA,IAAIC,gBAAgB;EACpB,EAAA,IAAIH,2BAA2B,GAAGyI,kBAAkB,GAAGI,sBAAsB;;EAEjF;EACA,EAAA,IAAMU,yBAAyB,GAAG;EAC9B,IAAA,KAAK,EAAE,gBAAgB;EACvB,IAAA,KAAK,EAAE,qBAAqB;EAC5B,IAAA,KAAK,EAAE,uBAAuB;EAC9B,IAAA,KAAK,EAAE,iBAAiB;EACxB,IAAA,KAAK,EAAE;EACP;KACH;IAED,IAAIC,mBAAmB,GAAGD,yBAAyB,CAACzJ,YAAY,CAAC2J,WAAW,EAAE,CAAC;IAE/E,IAAI,CAACD,mBAAmB,EAAE;EACtB3C,IAAAA,OAAO,CAAC6C,IAAI,CAAA,wBAAA,CAAAnJ,MAAA,CAA0BT,YAAY,iFAA8E,CAAC;EACjI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAA,IAAIyH,WAAW,EAAE;EAAE;EACfiC,MAAAA,mBAAmB,GAAGjC,WAAW;EACrC;EACA;EACJ;;EAGA;EACA;EACA,EAAA,IAAMoC,aAAa,GAAGV,gBAAiB,CAAC3B,eAAe,CAACkC,mBAAmB,EAAE1J,YAAY,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAEgH,kBAAkB,CAAC;IACzJ/G,IAAI,GAAG0J,aAAa,CAAC1J,IAAI;IACzBC,gBAAgB,GAAGyJ,aAAa,CAACzJ,gBAAgB;IACjDC,gBAAgB,GAAGwJ,aAAa,CAACxJ,gBAAgB;IAEjD,IAAIwJ,aAAa,CAACrJ,kBAAkB,EAAE;EAClCgJ,IAAAA,kBAAkB,QAAA/I,MAAA,CAAQoJ,aAAa,CAACrJ,kBAAkB,CAAE;EAChE;EAEAsI,EAAAA,cAAc,CAAClH,IAAI,CAAC4H,kBAAkB,CAAC;EACvCrJ,EAAAA,IAAI,CAAC2J,OAAO,CAAC,UAAAC,GAAG,EAAI;EAChBjB,IAAAA,cAAc,CAAClH,IAAI,CAAA,MAAA,CAAAnB,MAAA,CAAQsJ,GAAG,CAAE,CAAC;EACrC,GAAC,CAAC;EACFhB,EAAAA,sBAAsB,IAAI3I,gBAAgB;;EAE1C;EACA,EAAA,IAAI4J,gBAAgB;EACpB,EAAA,IAAMC,wBAAwB,GAAG;EAAEvK,IAAAA,IAAI,EAAE,6BAA6B;EAAEC,IAAAA,IAAI,EAAE,CAAC;EAAEC,IAAAA,IAAI,EAAE;KAAQ;IAE/F,IAAI+I,kBAAkB,GAAGE,4BAA4B,EAAE;EACnDmB,IAAAA,gBAAgB,GAAGC,wBAAwB;EAC/C,GAAC,MAAM;EACH;EACA,IAAA,IAAMC,uBAAuB,GAAG;EAAExK,MAAAA,IAAI,EAAE,aAAa;EAAEC,MAAAA,IAAI,EAAE,CAAC;EAAEC,MAAAA,IAAI,EAAE;EAAO,KAAC,CAAC;MAC/E,IAAMuK,oBAAoB,GAAGpB,sBAAsB;EACnD,IAAA,IAAMqB,gBAAgB,GAAGzB,kBAAkB,GAAGwB,oBAAoB;EAElE,IAAA,IAAIA,oBAAoB,IAAIxB,kBAAkB,GAAG,EAAE,EAAE;EACjDqB,MAAAA,gBAAgB,GAAGE,uBAAuB;EAC9C,KAAC,MAAM;EACH;EACA,MAAA,IAAMG,iBAAiB,GAAGvK,SAAS,CAACkF,MAAM,CAAC,UAAAsF,EAAE,EAAA;EAAA,QAAA,OAAIA,EAAE,CAAC3K,IAAI,IAAIyK,gBAAgB,GAAG,EAAE;SAAC,CAAA;EAElF,MAAA,IAAIC,iBAAiB,CAACpJ,MAAM,GAAG,CAAC,EAAE;EAC9B+I,QAAAA,gBAAgB,GAAGK,iBAAiB,CAAC/J,IAAI,CAACc,KAAK,CAACd,IAAI,CAACC,MAAM,EAAE,GAAG8J,iBAAiB,CAACpJ,MAAM,CAAC,CAAC;EAC9F,OAAC,MAAM;EACH+I,QAAAA,gBAAgB,GAAGE,uBAAuB;EAC9C;EACJ;EACJ;EAEA,EAAA,IAAIF,gBAAgB,EAAE;MAClBlB,cAAc,CAAClH,IAAI,CAAAnB,MAAAA,CAAAA,MAAA,CAAQuJ,gBAAgB,CAACtK,IAAI,CAAE,CAAC;MACnDqJ,sBAAsB,IAAIiB,gBAAgB,CAACrK,IAAI;EACnD;;EAEA;IACAmJ,cAAc,CAAClH,IAAI,CAAA,8BAAA,CAAAnB,MAAA,CAAgCsI,sBAAsB,EAAA,GAAA,CAAA,CAAAtI,MAAA,CAAIuI,YAAY,CAAE,CAAC;EAC5FF,EAAAA,cAAc,CAAClH,IAAI,CAAA,OAAA,CAAAnB,MAAA,CAASmI,WAAW,CAAE,CAAC;IAC1CE,cAAc,CAAClH,IAAI,CAAAnB,gBAAAA,CAAAA,MAAA,CAAkBgH,WAAW,CAAE,CAAC,CAAC;IACpDqB,cAAc,CAAClH,IAAI,CAAA,uBAAA,CAAAnB,MAAA,CAAyBT,YAAY,CAAC2J,WAAW,EAAE,CAAE,CAAC;EACzE;EACAb,EAAAA,cAAc,CAAClH,IAAI,CAAAnB,mCAAAA,CAAAA,MAAA,CAAqC+H,mBAAmB,CAACnI,gBAAgB,CAAC,EAAAI,SAAAA,CAAAA,CAAAA,MAAA,CAAUuI,YAAY,CAAE,CAAC;EAEtH,EAAA,OAAOF,cAAc,CAACyB,IAAI,CAAC,IAAI,CAAC;EACpC;;EAIA;EACA;EACA;EACA;EACA;EACA;;ECrNO,SAASC,oBAAoBA,CAACC,GAAG,EAAEC,WAAW,EAAEC,MAAM,EAAc;EAAA,EAAA,IAAZC,MAAM,GAAAC,SAAA,CAAA5J,MAAA,GAAA,CAAA,IAAA4J,SAAA,CAAA,CAAA,CAAA,KAAAC,SAAA,GAAAD,SAAA,CAAA,CAAA,CAAA,GAAG,CAAC;IACvE,IAAIE,cAAc,GAAGC,CAAC,CAAChG,MAAM,CAAC2F,MAAM,EAAE,UAAAM,KAAK,EAAA;EAAA,IAAA,OAAKA,KAAK,CAACR,GAAG,CAAC,GAAGG,MAAM,IAAKF,WAAW;KAAC,CAAA;EACpF,EAAA,OAAOM,CAAC,CAACE,MAAM,CAACH,cAAc,CAAC;EACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECDO,SAASI,eAAeA,CAACT,WAAW,EAAEU,gBAAgB,EAAE;IAC7D,IAAIV,WAAW,GAAG,EAAE,EAAE;EACpB;EACA,IAAA,OAAOU,gBAAgB;EACzB;;EAEA;;IAEA,IAAI7F,OAAO,GAAG,CAAC;IACf,IAAI8F,YAAY,GAAGb,oBAAoB,CAAC,MAAM,EAAEE,WAAW,EAAEY,KAAK,CAAC;;EAEnE;;EAEA,EAAA,OAAO/F,OAAO,GAAG8F,YAAY,CAACE,IAAI,IAAIb,WAAW,EAAE;EACjD,IAAA,IAAIc,QAAQ,GAAGd,WAAW,GAAGnF,OAAO;MACpC,IAAIkG,aAAa,GAAGnL,IAAI,CAACc,KAAK,CAACoK,QAAQ,GAAGH,YAAY,CAACE,IAAI,CAAC;;EAE5D;MACAE,aAAa,GAAIA,aAAa,GAAGJ,YAAY,CAACK,QAAQ,GAAI,EAAE,GAC1DpL,IAAI,CAACc,KAAK,CAAC,EAAE,GAAGiK,YAAY,CAACK,QAAQ,CAAC,GACtCD,aAAa;MAEf,IAAIE,cAAc,GAAGX,CAAC,CAACzK,MAAM,CAAC,CAAC,EAAEkL,aAAa,CAAC;EAC/C,IAAA,IAAIG,YAAY,GAAGP,YAAY,CAACE,IAAI,GAAGI,cAAc;;EAErD;;EAEApG,IAAAA,OAAO,IAAIqG,YAAY;MACvBR,gBAAgB,CAAC7F,OAAO,IAAIqG,YAAY;EACxCR,IAAAA,gBAAgB,CAACS,SAAS,CAACjK,IAAI,CAC7B;QACEhC,IAAI,EAAEyL,YAAY,CAACS,IAAI;EACvB7K,MAAAA,MAAM,EAAEoK,YAAY,CAACK,QAAQ,GAAG,EAAE,GAAGC,cAAc;EACnDf,MAAAA,MAAM,EAAE,CAAC;EACTW,MAAAA,IAAI,EAAEK;EACR,KACF,CAAC;EACH;EAEA,EAAA,OAAOR,gBAAgB;EACzB;;ECzCA,SAASW,eAAeA,CAACrB,WAAW,EAAEiB,cAAc,EAAEf,MAAM,EAAE;EAC5D,EAAA,IAAIF,WAAW,GAAG,EAAE,GAAGE,MAAM,EAAE;EAC7B;EACA,IAAA,OAAO,IAAI;EACb;EAEA,EAAA,IAAIoB,UAAU;IACd,IAAIC,SAAS,GAAG,CAAC;EAEjB,EAAA,IAAIC,aAAa,GAAGlB,CAAC,CAACmB,SAAS,CAACb,KAAK,CAAC;IAEtC,OAAO,CAACU,UAAU,EAAE;EAClBC,IAAAA,SAAS,EAAE;EACXD,IAAAA,UAAU,GAAGhB,CAAC,CAACE,MAAM,CAACgB,aAAa,CAAC;EAEpC,IAAA,IAAKF,UAAU,CAACT,IAAI,GAAGX,MAAM,GAAIF,WAAW,EAAE;EAC5C;QACAwB,aAAa,GAAGlB,CAAC,CAAChG,MAAM,CAACkH,aAAa,EAAE,UAAAE,IAAI,EAAA;EAAA,QAAA,OAAIA,IAAI,CAACb,IAAI,GAAGS,UAAU,CAACT,IAAI;SAAC,CAAA;EAC5ES,MAAAA,UAAU,GAAG,IAAI;EACnB,KAAC,MAAM,IAAKA,UAAU,CAACN,QAAQ,GAAGC,cAAc,IAAMA,cAAc,GAAGK,UAAU,CAACN,QAAQ,KAAK,CAAE,EAAE;EACjG;QACAQ,aAAa,GAAGlB,CAAC,CAAChG,MAAM,CAACkH,aAAa,EAAE,UAAAE,IAAI,EAAA;EAAA,QAAA,OAAIA,IAAI,CAACV,QAAQ,GAAGM,UAAU,CAACN,QAAQ;SAAC,CAAA;EACpFM,MAAAA,UAAU,GAAG,IAAI;EACnB;MAEA,IAAIC,SAAS,GAAG,EAAE,EAAE;EAAC,MAAA,MAAM,IAAII,KAAK,CAAA5L,OAAAA,CAAAA,MAAA,CAASiK,WAAW,EAAA,GAAA,CAAA,CAAAjK,MAAA,CAAIkL,cAAc,EAAAlL,GAAAA,CAAAA,CAAAA,MAAA,CAAImK,MAAM,CAAE,CAAC;EAAC;EAC1F;EAEA,EAAA,OAAOoB,UAAU;EACnB;EAEA,SAASM,oBAAoBA,CAACC,eAAe,EAAE;EAC7C,EAAA,OAAOvB,CAAC,CAACwB,MAAM,CAACD,eAAe,CAAC/J,OAAO,EAAE,UAACiK,MAAM,EAAE1C,GAAG,EAAK;EACxD,IAAA,IAAI2C,UAAU,GAAG3C,GAAG,CAAC2B,QAAQ,CAAC,CAAC,CAAC;EAEhC,IAAA,IAAG,CAACe,MAAM,CAAC1C,GAAG,CAAC4C,KAAK,CAAC,EAAE;EACrBF,MAAAA,MAAM,CAAC1C,GAAG,CAAC4C,KAAK,CAAC,GAAG;EAAE/B,QAAAA,MAAM,EAAE,CAAC;EAAEe,QAAAA,cAAc,EAAEe;SAAW;EAC9D,KAAC,MAAM;QACLD,MAAM,CAAC1C,GAAG,CAAC4C,KAAK,CAAC,CAAC/B,MAAM,IAAI,CAAC;QAC7B6B,MAAM,CAAC1C,GAAG,CAAC4C,KAAK,CAAC,CAAChB,cAAc,GAAGX,CAAC,CAAC1J,GAAG,CAAC,CAACmL,MAAM,CAAC1C,GAAG,CAAC4C,KAAK,CAAC,CAAChB,cAAc,EAAEe,UAAU,CAAC,CAAC;EAC1F;EAEA,IAAA,OAAOD,MAAM;KACd,EAAE,EAAE,CAAC;EACR;EAEA,SAASG,oBAAoBA,CAAClC,WAAW,EAAE6B,eAAe,EAAEM,eAAe,EAAE;IAC3E,IAAIC,cAAc,GAAG,EAAE;EAEvB,EAAA,IAAI3M,IAAI,GAAGoM,eAAe,CAAC/J,OAAO,CAACvB,MAAM;;EAEzC;IACA+J,CAAC,CAAClB,OAAO,CAAC+C,eAAe,EAAE,UAACE,SAAS,EAAEtC,GAAG,EAAK;EAC7C,IAAA,IAAIuC,YAAY,GAAGT,eAAe,CAACS,YAAY;MAC/C,IAAIC,aAAa,GAAG,CAAC9M,IAAI,GAAG4M,SAAS,CAACnC,MAAM,IAAIoC,YAAY,GAAG,EAAE;EACjE,IAAA,IAAI3B,YAAY,GAAGU,eAAe,CAChCrB,WAAW,GAAGuC,aAAa,EAC3BF,SAAS,CAACpB,cAAc,EACxBoB,SAAS,CAACnC,MAAM,GAAGoC,YACrB,CAAC;EAEDF,IAAAA,cAAc,CAACrC,GAAG,CAAC,GAAGY,YAAY;EACpC,GAAC,CAAC;EAEF,EAAA,OAAOyB,cAAc;EACvB;EAEO,SAASI,sBAAsBA,CAACxC,WAAW,EAAEU,gBAAgB,EAAEmB,eAAe,EAAE;IACrF,IAAI7B,WAAW,GAAG,EAAE,EAAE;EACpB;EACA,IAAA,OAAOU,gBAAgB;EACzB;EAEA,EAAA,IAAIyB,eAAe,GAAGP,oBAAoB,CAACC,eAAe,CAAC;IAC3D,IAAIO,cAAc,GAAGF,oBAAoB,CAAClC,WAAW,EAAE6B,eAAe,EAAEM,eAAe,CAAC;;EAExF;IACA7B,CAAC,CAAClB,OAAO,CAACyC,eAAe,CAAC/J,OAAO,EAAE,UAAAA,OAAO,EAAI;EAC5C,IAAA,IAAI6I,YAAY,GAAGyB,cAAc,CAACtK,OAAO,CAACmK,KAAK,CAAC;EAChD,IAAA,IAAIQ,YAAY,GAAG3K,OAAO,CAACkJ,QAAQ,CAAC,CAAC,CAAC;EACtC,IAAA,IAAIgB,UAAU,GAAGlK,OAAO,CAACkJ,QAAQ,CAAC,CAAC,CAAC;;EAEpC;EACA,IAAA,IAAI0B,kBAAkB,GAAGV,UAAU,GAAGrB,YAAY,CAACK,QAAQ;MAC3D,IAAI2B,aAAa,GAAGhC,YAAY,CAACE,IAAI,GAAG4B,YAAY,GAAIC,kBAAmB;MAE3EhC,gBAAgB,CAAC7F,OAAO,IAAI8H,aAAa;EACzCjC,IAAAA,gBAAgB,CAACS,SAAS,CAACjK,IAAI,CAC7B;QACEhC,IAAI,EAAEyL,YAAY,CAACS,IAAI;QACvB7K,MAAM,EAAEyL,UAAU,GAAG,EAAE;EACvB9B,MAAAA,MAAM,EAAEuC,YAAY;EACpB5B,MAAAA,IAAI,EAAEF,YAAY,CAACE,IAAI,GAAG6B;EAC5B,KACF,CAAC;EACH,GAAC,CAAC;EAEF,EAAA,OAAOhC,gBAAgB;EACzB;;EC9FA,SAASkC,UAAUA,CAACC,SAAS,EAAEC,SAAS,EAAE;IACxC,OAAOD,SAAS,CAAC3N,IAAI,KAAK4N,SAAS,CAAC5N,IAAI,IACnC2N,SAAS,CAACtM,MAAM,KAAKuM,SAAS,CAACvM,MAAM,IACrCsM,SAAS,CAAChC,IAAI,KAAKiC,SAAS,CAACjC,IAAI;EACxC;EAEA,SAASkC,aAAaA,CAACjL,OAAO,EAAE;EAC9B;IACAA,OAAO,CAAC+C,OAAO,IAAI,CAAC;IAEpByF,CAAC,CAAClB,OAAO,CAACtH,OAAO,CAACqJ,SAAS,EAAE,UAAAH,QAAQ,EAAI;MACvCA,QAAQ,CAACzK,MAAM,IAAI,CAAC;MACpByK,QAAQ,CAACH,IAAI,IAAI,CAAC;EACpB,GAAC,CAAC;EACJ;EAEA,SAASmC,eAAeA,CAAClL,OAAO,EAAE;EAChC;IACAA,OAAO,CAAC+C,OAAO,IAAI,CAAC;IAEpByF,CAAC,CAAClB,OAAO,CAACtH,OAAO,CAACqJ,SAAS,EAAE,UAAAH,QAAQ,EAAI;MACvCA,QAAQ,CAACd,MAAM,IAAI,CAAC;EACtB,GAAC,CAAC;EACJ;EAEA,SAAS+C,eAAeA,CAACnL,OAAO,EAAE;EAChCA,EAAAA,OAAO,CAACqJ,SAAS,GAAGrJ,OAAO,CAACqJ,SAAS,CAACW,MAAM,CAAC,UAACoB,IAAI,EAAElC,QAAQ,EAAK;EAC/D,IAAA,IAAImC,eAAe,GAAGD,IAAI,CAAC3M,MAAM;MAEjC,IAAG4M,eAAe,KAAK,CAAC,EAAE;EACxBD,MAAAA,IAAI,CAAChM,IAAI,CAAC8J,QAAQ,CAAC;EACnB,MAAA,OAAOkC,IAAI;EACb;MAEA,IAAIN,UAAU,CAACM,IAAI,CAACC,eAAe,GAAE,CAAC,CAAC,EAAEnC,QAAQ,CAAC,EAAE;EAClD;QACAkC,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC,CAACjD,MAAM,IAAIc,QAAQ,CAACd,MAAM;EACrD,KAAC,MAAM;EACLgD,MAAAA,IAAI,CAAChM,IAAI,CAAC8J,QAAQ,CAAC;EACrB;EAEA,IAAA,OAAOkC,IAAI;KACZ,EAAE,EAAE,CAAC;;EAEN;;EAEA,EAAA,OAAOpL,OAAO;EAChB;EAIO,SAASsL,eAAeA,CAACvI,OAAO,EAAoD;IAAA,IAAlD6F,gBAAgB,GAAAP,SAAA,CAAA5J,MAAA,GAAA4J,CAAAA,IAAAA,SAAA,CAAAC,CAAAA,CAAAA,KAAAA,SAAA,GAAAD,SAAA,CAAG,CAAA,CAAA,GAAA;EAAEtF,IAAAA,OAAO,EAAE,CAAC;EAAEsG,IAAAA,SAAS,EAAE;KAAI;IACvF,IAAItG,OAAO,GAAG,EAAE,EAAE;EAChB;EACA,IAAA,OAAO6F,gBAAgB;EACzB;;EAEA;;EAEA,EAAA,IAAII,QAAQ,GAAGjG,OAAO,GAAG6F,gBAAgB,CAAC7F,OAAO;IACjD,IAAIgH,eAAe,GAAG/B,oBAAoB,CAAC,SAAS,EAAEgB,QAAQ,EAAEuC,QAAQ,CAAC;;EAEzE;;EAEA,EAAA,IAAIxB,eAAe,CAACyB,MAAM,KAAK,IAAI,EAAE;EACnC,IAAA,OAAO7C,eAAe,CAACK,QAAQ,EAAEJ,gBAAgB,CAAC;EACpD,GAAC,MAAM;EACL,IAAA,OAAO8B,sBAAsB,CAAC1B,QAAQ,EAAEJ,gBAAgB,EAAEmB,eAAe,CAAC;EAC5E;EACF;EAEO,SAAS7D,eAAeA,CAACnD,OAAO,EAAE;IACvC,IAAI,CAACA,OAAO,EAAE;EAAE,IAAA,MAAM,IAAI8G,KAAK,CAAC,eAAe,CAAC;EAAE;EAElD,EAAA,IAAI7J,OAAO,GAAGsL,eAAe,CAACvI,OAAO,CAAC;EAEtC,EAAA,OAAQ/C,OAAO,CAAC+C,OAAO,GAAIA,OAAO,GAAG,CAAE,IAAM/C,OAAO,CAAC+C,OAAO,IAAI,EAAG,EAAE;EACnE,IAAA,QAAOyF,CAAC,CAACzK,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC;EAClB,MAAA,KAAK,CAAC;UACJkN,aAAa,CAACjL,OAAO,CAAC;EACtB,QAAA;EACF,MAAA,KAAK,CAAC;UACJkL,eAAe,CAAClL,OAAO,CAAC;EACxB,QAAA;EACF,MAAA,KAAK,CAAC;EACJ;EACAsL,QAAAA,eAAe,CAACvI,OAAO,EAAE/C,OAAO,CAAC;EACjC,QAAA;EACJ;EACF;EAEA,EAAA,OAAO+C,OAAO,GAAG/C,OAAO,CAAC+C,OAAO,IAAI,EAAE,EAAE;EACtCuI,IAAAA,eAAe,CAACvI,OAAO,EAAE/C,OAAO,CAAC;EACnC;EAEAA,EAAAA,OAAO,GAAGmL,eAAe,CAACnL,OAAO,CAAC;EAElC,EAAA,OAAOA,OAAO;EAChB;;;;;;;;;;"}