{"version":3,"file":"swim-generator.umd.js","sources":["../lib/data/warmups.js","../lib/data/cooldowns.js","../lib/data/mainSets.js","../lib/workoutComponents.js","../lib/css.js","../lib/getThingViaTimeLimit.js","../lib/repeatIntervals.js","../lib/createPattern.js","../lib/index.js"],"sourcesContent":["// Warmup options based on various sources [2, 5, 7, 8, 11, 13, 15, 17, 19, 20]\nconst warmups = [\n    { desc: \"200 no fins, 200 w fins swim\", dist: 400, type: \"swim\" }, //[2]\n    { desc: \"400 warmup (75 kick, 25 under)\", dist: 400, type: \"kick\" }, //[5]\n    { desc: \"250 pull warmup, 250 swim warmup\", dist: 500, type: \"pull/swim\" }, //[20]\n    { desc: \"250 warmup\", dist: 250, type: \"general\" }, //[8, 13]\n    { desc: \"200 warm up\", dist: 200, type: \"general\" }, //[7]\n    { desc: \"500 warmup\", dist: 500, type: \"general\" }, //[11, 17]\n    { desc: \"300 warm up\", dist: 300, type: \"general\" }, //[15]\n    { desc: \"150 warm up\", dist: 150, type: \"general\" }, //[19]\n];\n\n// Option for no warmup, as seen in some sources [1, 9]\nconst noWarmupOption = { desc: \"No warmup bitches\", dist: 0, type: \"none\" }; //[1]\n\nexport { warmups, noWarmupOption };\n","// Cool-down options based on various sources [2, 5, 7, 9, 10, 12, 13, 16, 17, 19-21]\nconst cooldowns = [\n    { desc: \"200 w fins (or combo)\", dist: 200, type: \"fins\" }, //[2]\n    { desc: \"200 swim cooldown\", dist: 200, type: \"swim\" }, //[5]\n    { desc: \"100 cool down\", dist: 100, type: \"general\" }, //[7]\n    { desc: \"300 CD\", dist: 300, type: \"general\" }, //[9]\n    { desc: \"200 CD\", dist: 200, type: \"general\" }, //[10, 16, 21]\n    { desc: \"450 cooldown (300 swim, 150 under)\", dist: 450, type: \"swim/under\" }, //[20]\n    { desc: \"100 cool\", dist: 100, type: \"general\" }, //[17]\n    { desc: \"150 cooldown and 20 minutes of stick skills\", dist: 150, type: \"general\" }, //[19]\n    { desc: \"100 fin swim cooldown\", dist: 100, type: \"fin swim\" }, //[12]\n    { desc: \"250 cool down\", dist: 250, type: \"general\" }, //[13]\n];\n\nexport { cooldowns };\n","// Sample distances based on comments in original css.js\nconst en1Distances = [200, 300, 400, 500];\nconst en2Distances = [100, 200, 300, 400];\nconst en3Distances = [50, 100, 150, 200];\nconst en3SecondaryDistances = [200, 300, 400];\nconst sp1Distances = [25, 50, 75, 100];\nconst sp1Drills = [\"swim\", \"kb\", \"FU\", \"HUHO\"]; // FU = Fast Underwater, HUHO = Hypoxic Hips Out\nconst sp2Distances = [25, 50];\n// const sp2RepsMapping = { 25: 24, 50: 16 }; // Keep commented out as per previous fixes\n\n// Functions now keyed by workoutType, but still accept energySystem for potential future differentiation\nconst mainSetDefinitions = {\n    'ENDURANCE_BASE': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 + (Math.random() * 5);\n\n        if (remainingDistanceForMainSet < 25) {\n            return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Endurance Base (${energySystem}) set - too short.` };\n        }\n\n        let en1RepDist = 0;\n        let numEn1Reps = 0;\n\n        if (remainingDistanceForMainSet < 200) { // Path for 25-199 yards\n            const shortEn1Dists = [150, 125, 100, 75, 50, 25]; // Largest to smallest\n            for (const dist of shortEn1Dists) {\n                if (remainingDistanceForMainSet >= dist) {\n                    en1RepDist = dist;\n                    numEn1Reps = Math.floor(remainingDistanceForMainSet / en1RepDist);\n                    break; // Found the largest fitting repDist from short list\n                }\n            }\n        } else if (remainingDistanceForMainSet <= 600) { // Path for 200-600 yards\n            const midEn1Dists = [300, 250, 200, 150, 100, 75, 50]; // Ordered to try larger ones first\n            let bestCurrentRepDist = 0;\n            let bestCurrentNumReps = 0;\n            let smallestRemainderSoFar = Infinity;\n\n            for (const dist of midEn1Dists) {\n                if (remainingDistanceForMainSet >= dist) {\n                    let currentNumReps = Math.floor(remainingDistanceForMainSet / dist);\n                    // Apply a cap on reps for this mid-range to avoid too many short reps\n                    let maxRepsForDist = 5; // Default cap\n                    if (dist >= 200) maxRepsForDist = 3;\n                    else if (dist >= 150) maxRepsForDist = 4;\n                    currentNumReps = Math.min(currentNumReps, maxRepsForDist);\n\n                    if (currentNumReps === 0) continue;\n\n                    let currentRemainder = remainingDistanceForMainSet - (currentNumReps * dist);\n                    if (currentRemainder < smallestRemainderSoFar) {\n                        smallestRemainderSoFar = currentRemainder;\n                        bestCurrentRepDist = dist;\n                        bestCurrentNumReps = currentNumReps;\n                    } else if (currentRemainder === smallestRemainderSoFar) {\n                        if (dist > bestCurrentRepDist) { // Prefer larger repDist if remainder is same\n                            bestCurrentRepDist = dist;\n                            bestCurrentNumReps = currentNumReps;\n                        }\n                    }\n                }\n            }\n            en1RepDist = bestCurrentRepDist;\n            numEn1Reps = bestCurrentNumReps;\n        } else { // Path for > 600 yards\n            let selectedDist = en1Distances[Math.floor(Math.random() * en1Distances.length)]; // [200,300,400,500]\n            if (selectedDist > remainingDistanceForMainSet) { // Should be rare if remaining > 600\n                for (let j = en1Distances.length - 1; j >= 0; j--) {\n                    if (en1Distances[j] <= remainingDistanceForMainSet) {\n                        selectedDist = en1Distances[j];\n                        break;\n                    }\n                }\n            }\n            en1RepDist = selectedDist;\n            if (en1RepDist > 0) {\n                numEn1Reps = Math.floor(remainingDistanceForMainSet / en1RepDist);\n                numEn1Reps = Math.min(numEn1Reps, 15); // Cap for standard long distances\n            }\n        }\n\n        if (numEn1Reps > 0 && en1RepDist > 0) {\n            // Final check to prevent exceeding (should be redundant due to Math.floor)\n            if (numEn1Reps * en1RepDist > remainingDistanceForMainSet) {\n                numEn1Reps = Math.floor(remainingDistanceForMainSet / en1RepDist);\n            }\n            if (numEn1Reps > 0) { // Check again after potential adjustment\n                let en1Rest = `r${(Math.floor(Math.random() * (60 - 30 + 1)) + 30)}\"`;\n                sets.push(`${numEn1Reps}x${en1RepDist} ${energySystem} focus swim/kick ${en1Rest}`);\n                mainSetTotalDist = numEn1Reps * en1RepDist;\n            } else { mainSetTotalDist = 0; }\n        } else { mainSetTotalDist = 0; }\n\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Endurance Base (${energySystem}) set.` };\n    },\n\n    'THRESHOLD_SUSTAINED': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 + (Math.random() * 3 - 1.5);\n\n        if (remainingDistanceForMainSet < 25) {\n             return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set - too short.` };\n        }\n\n        let en2RepDist = en2Distances[Math.floor(Math.random() * en2Distances.length)];\n\n        if (remainingDistanceForMainSet < en2RepDist) {\n            const possibleDists = en2Distances.filter(d => d <= remainingDistanceForMainSet);\n            if (possibleDists.length > 0) {\n                en2RepDist = possibleDists[possibleDists.length - 1];\n            } else {\n                if (remainingDistanceForMainSet >= 50) {\n                    en2RepDist = Math.floor(remainingDistanceForMainSet / 50) * 50;\n                    if (en2RepDist === 0) en2RepDist = 50;\n                } else if (remainingDistanceForMainSet >= 25) {\n                    en2RepDist = 25;\n                } else {\n                    return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set - too short.` };\n                }\n            }\n        }\n\n        let numEn2Reps = (en2RepDist > 0) ? Math.floor(remainingDistanceForMainSet / en2RepDist) : 0;\n        numEn2Reps = Math.min(numEn2Reps, 25); // Changed cap from 20 to 25\n        numEn2Reps = Math.max(numEn2Reps, 1);\n\n        if (numEn2Reps * en2RepDist > remainingDistanceForMainSet) {\n             numEn2Reps = 0;\n        }\n\n        if (numEn2Reps > 0) {\n            let en2Rest = `r${(Math.floor(Math.random() * (30 - 20 + 1)) + 20)}\"`;\n            sets.push(`${numEn2Reps}x${en2RepDist} ${energySystem} focus swim ${en2Rest}`);\n            mainSetTotalDist = numEn2Reps * en2RepDist;\n        } else {\n            mainSetTotalDist = 0;\n        }\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Threshold Sustained (${energySystem}) set.` };\n    },\n\n    'THRESHOLD_DEVELOPMENT': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 - (Math.random() * 3);\n        const en3Rest = `r${(Math.floor(Math.random() * (90 - 40 + 1)) + 40)}\"`;\n\n        if (remainingDistanceForMainSet < 50) { // Minimum for EN3 is typically 50\n             return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Threshold Development (${energySystem}) set - too short.` };\n        }\n\n        let en3RepDist = en3Distances[Math.floor(Math.random() * en3Distances.length)];\n\n        if (remainingDistanceForMainSet < en3RepDist) {\n             const possibleDists = en3Distances.filter(d => d <= remainingDistanceForMainSet);\n             if (possibleDists.length > 0) {\n                 en3RepDist = possibleDists[possibleDists.length -1];\n             } else { // Should not happen if remainingDistanceForMainSet >= 50 and en3Distances includes 50\n                 en3RepDist = 0; // will result in numEn3Reps = 0\n             }\n        }\n\n        let numEn3Reps = (en3RepDist > 0) ? Math.floor(remainingDistanceForMainSet / en3RepDist) : 0;\n        numEn3Reps = Math.min(numEn3Reps, 20);\n        // No Math.max(numEn3Reps, 0) needed as floor will be >=0. If en3RepDist is 0, numEn3Reps is 0.\n\n        if (numEn3Reps > 0) {\n            sets.push(`${numEn3Reps}x${en3RepDist} ${energySystem} focus swim/kb ${en3Rest}`);\n            mainSetTotalDist = numEn3Reps * en3RepDist;\n        }\n\n        let newRemainingDistance = remainingDistanceForMainSet - mainSetTotalDist;\n        if (newRemainingDistance > 400) {\n            let secondaryDist = en3SecondaryDistances[Math.floor(Math.random() * en3SecondaryDistances.length)];\n            if (newRemainingDistance < secondaryDist) { // try to pick a smaller secondary dist\n                const possibleSecDists = en3SecondaryDistances.filter(d => d <= newRemainingDistance);\n                if (possibleSecDists.length > 0) {\n                    secondaryDist = possibleSecDists[possibleSecDists.length - 1];\n                } else {\n                    secondaryDist = 0; // Cannot fit any secondary\n                }\n            }\n\n            let secondaryReps = 0;\n            if (secondaryDist > 0) {\n                secondaryReps = Math.floor(newRemainingDistance / secondaryDist);\n            }\n            secondaryReps = Math.min(secondaryReps, 10);\n\n            if (secondaryReps > 0) {\n                sets.push(`${secondaryReps}x${secondaryDist} ${energySystem} focus swim ${en3Rest}`);\n                mainSetTotalDist += secondaryReps * secondaryDist;\n            }\n        }\n\n        if (mainSetTotalDist === 0 && remainingDistanceForMainSet >= 50) {\n            let fallbackDist = en3Distances[0]; // Smallest standard EN3 distance (50)\n            if (remainingDistanceForMainSet < fallbackDist) fallbackDist = 0; // Should not happen if initial check is >=50\n\n            if (fallbackDist > 0) {\n                 let fallbackReps = Math.floor(remainingDistanceForMainSet / fallbackDist);\n                 fallbackReps = Math.min(fallbackReps, 5); // Cap fallback reps\n                 if (fallbackReps > 0) {\n                    sets.push(`${fallbackReps}x${fallbackDist} ${energySystem} focus swim ${en3Rest}`);\n                    mainSetTotalDist = fallbackReps * fallbackDist;\n                 }\n            }\n        }\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Threshold Development (${energySystem}) set.` };\n    },\n\n    'SPEED_ENDURANCE': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 - (5 + Math.random() * 5);\n\n        if (remainingDistanceForMainSet < sp1Distances[0]) { // sp1Distances[0] is typically 25\n            return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set - too short.` };\n        }\n\n        let numBlocks;\n        if (remainingDistanceForMainSet < 600) numBlocks = 1;\n        else if (remainingDistanceForMainSet < 1200) numBlocks = 2;\n        else numBlocks = 3;\n\n        let blockDistRemainingForReps = remainingDistanceForMainSet;\n        let accumulatedDist = 0;\n\n        for (let i = 0; i < numBlocks; i++) {\n            if (blockDistRemainingForReps < sp1Distances[0]) break;\n\n            let targetDistForCurrentBlock = Math.floor(blockDistRemainingForReps / (numBlocks - i));\n            let easyBreakDist = 0;\n            let addEasyBreakString = false;\n\n            if (i < numBlocks - 1 && (blockDistRemainingForReps - targetDistForCurrentBlock) > 100) { // Check if there's room for break AND next block\n                if (Math.random() > 0.5) {\n                    if (targetDistForCurrentBlock > 150 && blockDistRemainingForReps - (targetDistForCurrentBlock - 50) >= 50 ) { // Ensure rep part & overall remaining is substantial\n                        easyBreakDist = 50;\n                        targetDistForCurrentBlock -= easyBreakDist;\n                        addEasyBreakString = true;\n                    }\n                }\n            }\n\n            if (targetDistForCurrentBlock < sp1Distances[0] && addEasyBreakString) {\n                targetDistForCurrentBlock += easyBreakDist; // Reclaim break dist\n                easyBreakDist = 0;\n                addEasyBreakString = false;\n            }\n\n            if (targetDistForCurrentBlock < sp1Distances[0]) continue;\n\n            let repDist = sp1Distances[Math.floor(Math.random() * sp1Distances.length)];\n            if (repDist > targetDistForCurrentBlock && targetDistForCurrentBlock >= sp1Distances[0]) {\n                for (let j = sp1Distances.length - 1; j >= 0; j--) {\n                    if (sp1Distances[j] <= targetDistForCurrentBlock) {\n                        repDist = sp1Distances[j];\n                        break;\n                    }\n                }\n                if (repDist > targetDistForCurrentBlock && sp1Distances.length > 0 && sp1Distances[0] <= targetDistForCurrentBlock) {\n                     repDist = sp1Distances[0];\n                } else if (repDist > targetDistForCurrentBlock) { // Target too small even for smallest sp1Distance\n                    continue;\n                }\n            } else if (repDist > targetDistForCurrentBlock) { // Initial random was too large, and target is smaller than smallest\n                 continue;\n            }\n            if (repDist === 0 && sp1Distances.length > 0) repDist = sp1Distances[0];\n            if (repDist === 0) continue; // Should not happen if sp1Distances is not empty\n\n            let numReps = (repDist > 0) ? Math.floor(targetDistForCurrentBlock / repDist) : 0;\n            numReps = Math.min(numReps, 10); // Changed cap from 12 to 10\n\n            if (numReps > 0) {\n                const currentBlockActualRepDist = numReps * repDist;\n                let rest = `r${(Math.floor(Math.random() * (40 - 30 + 1)) + 30)}\"`;\n                let drillType = sp1Drills[Math.floor(Math.random() * sp1Drills.length)];\n                sets.push(`${numReps}x${repDist} ${drillType} (${energySystem} focus) ${rest}`);\n\n                accumulatedDist += currentBlockActualRepDist;\n                blockDistRemainingForReps -= currentBlockActualRepDist;\n\n                if (addEasyBreakString && easyBreakDist > 0) {\n                    if (blockDistRemainingForReps >= easyBreakDist) {\n                        sets.push(\"50 ez + wait for top\");\n                        accumulatedDist += easyBreakDist;\n                        blockDistRemainingForReps -= easyBreakDist;\n                    }\n                } else if (i < numBlocks - 1 && blockDistRemainingForReps > sp1Distances[0]) {\n                    if (Math.random() > 0.3) sets.push(\"2min rest\");\n                }\n            } else if (easyBreakDist > 0) {\n                 if (blockDistRemainingForReps >= easyBreakDist) {\n                    sets.push(`${easyBreakDist} ez swim`);\n                    accumulatedDist += easyBreakDist;\n                    blockDistRemainingForReps -= easyBreakDist;\n                 }\n            }\n        }\n        mainSetTotalDist = accumulatedDist;\n\n        if (mainSetTotalDist < remainingDistanceForMainSet * 0.75 && remainingDistanceForMainSet > 200) {\n            sets.length = 0;\n            mainSetTotalDist = 0; // Reset for fallback calculation\n            let fallbackRepDist = (remainingDistanceForMainSet > 400 && sp1Distances.includes(100)) ? 100 : (sp1Distances[1] || 50);\n            if (remainingDistanceForMainSet < fallbackRepDist && sp1Distances.length > 0) fallbackRepDist = (sp1Distances[0] || 25);\n\n            if (fallbackRepDist > 0) {\n                let fallbackNumReps = Math.floor(remainingDistanceForMainSet / fallbackRepDist);\n                fallbackNumReps = Math.min(fallbackNumReps, 16);\n                if (fallbackNumReps > 0) {\n                    sets.push(`${fallbackNumReps}x${fallbackRepDist} swim (${energySystem} focus) r30\"`);\n                    mainSetTotalDist = fallbackNumReps * fallbackRepDist;\n                }\n            }\n        }\n        if (mainSetTotalDist === 0 && remainingDistanceForMainSet >= sp1Distances[0]) {\n            let fDist = (remainingDistanceForMainSet >= 50 && sp1Distances.includes(50)) ? 50 : sp1Distances[0];\n            if (remainingDistanceForMainSet < fDist) {\n                 return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set - too short for fallback.` };\n            }\n            let fReps = Math.floor(remainingDistanceForMainSet/fDist);\n            fReps = Math.min(fReps, (fDist === 50 ? 8:12) );\n            if (fReps > 0) {\n                 sets.push(`${fReps}x${fDist} swim (${energySystem} focus) r30\"`);\n                 mainSetTotalDist = fReps * fDist;\n            }\n        }\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Speed Endurance (${energySystem}) set.` };\n    },\n\n    'MAX_SPRINT': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100 - (10 + Math.random() * 15);\n        let numReps = 0;\n        let repDist = 0;\n\n        const has50 = sp2Distances.includes(50);\n        const has25 = sp2Distances.includes(25);\n\n        if (remainingDistanceForMainSet < (has25 ? 25 : (has50 ? 50 : Infinity))) {\n             return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set - too short.` };\n        }\n\n        let initialRepDist;\n        if (has50 && remainingDistanceForMainSet >= 750) {\n            initialRepDist = 50;\n        } else if (has25) {\n            initialRepDist = 25;\n        } else if (has50) {\n            initialRepDist = 50;\n        } else {\n             return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set - no valid distances.` };\n        }\n\n        const initialAbsoluteMaxReps = (initialRepDist === 50) ? 24 : 32; // Changed from 30:40\n        let numRepsForInitialDist = 0;\n        if (initialRepDist > 0) {\n            numRepsForInitialDist = Math.min(Math.floor(remainingDistanceForMainSet / initialRepDist), initialAbsoluteMaxReps);\n        }\n\n        let currentCalcDist = numRepsForInitialDist * initialRepDist;\n\n        repDist = initialRepDist;\n        numReps = numRepsForInitialDist;\n\n        if (initialRepDist === 25 && has50) {\n            const potentialReps50 = Math.min(Math.floor(remainingDistanceForMainSet / 50), 24); // Changed cap from 30 to 24\n            const potentialDist50 = potentialReps50 * 50;\n            const isSignificantUndershootWith25s = currentCalcDist < remainingDistanceForMainSet * 0.85;\n\n            if (isSignificantUndershootWith25s && potentialDist50 > currentCalcDist) {\n                repDist = 50;\n                numReps = potentialReps50;\n            }\n        }\n\n        if (numReps === 0 && repDist > 0 && remainingDistanceForMainSet >= repDist) {\n            numReps = 1;\n        }\n\n        if (numReps > 0 && repDist > 0) {\n            mainSetTotalDist = numReps * repDist;\n            const sp2Rest = \"1'r\";\n            sets.push(`${numReps}x${repDist} UW sprint (${energySystem} focus, breath at wall) @ ${sp2Rest}`);\n        } else {\n            mainSetTotalDist = 0;\n            sets = [];\n        }\n\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `Max Sprint (${energySystem}) set.` };\n    },\n\n    'GENERAL_ENDURANCE': (energySystem, cssSecondsPer100, remainingDistanceForMainSet) => {\n        let sets = [];\n        let mainSetTotalDist = 0;\n        let targetPacePer100 = cssSecondsPer100;\n        const generalDistances = [400, 300, 200, 100, 50];\n        let bestRepDist = 0;\n        let bestNumReps = 0;\n        let smallestRemainder = Infinity;\n\n        if (remainingDistanceForMainSet < 25) { // Smallest possible rep distance\n            return { sets, mainSetTotalDist: 0, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) set - too short.` };\n        }\n\n        for (const dist of generalDistances) {\n            if (remainingDistanceForMainSet >= dist) {\n                let currentNumReps = Math.floor(remainingDistanceForMainSet / dist);\n                let currentRemainder = remainingDistanceForMainSet - (currentNumReps * dist);\n                if (currentNumReps > 0) { // Only consider if at least one rep is possible\n                    if (currentRemainder < smallestRemainder) {\n                        smallestRemainder = currentRemainder;\n                        bestRepDist = dist;\n                        bestNumReps = currentNumReps;\n                    } else if (currentRemainder === smallestRemainder) {\n                        if (dist > bestRepDist) { // Prefer larger rep distance for same remainder\n                            bestRepDist = dist;\n                            bestNumReps = currentNumReps;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (bestNumReps === 0 && remainingDistanceForMainSet >= 25) {\n            // If no standard dist fits (e.g. remaining 75), make one up\n            // Try to make it a multiple of 25 or 50.\n            if (remainingDistanceForMainSet >= 50) {\n                 bestRepDist = Math.floor(remainingDistanceForMainSet / 50) * 50;\n                 if(bestRepDist === 0) bestRepDist = 50; // if remaining is e.g. 70, floor(70/50)*50 = 50\n            } else { // remaining is 25 to 49\n                 bestRepDist = 25;\n            }\n            if (bestRepDist > 0) bestNumReps = Math.floor(remainingDistanceForMainSet / bestRepDist);\n            if (bestNumReps * bestRepDist > remainingDistanceForMainSet) bestNumReps = 0; // safety\n        }\n\n        // --- Start of new conservative adjustment logic ---\n        if (bestNumReps > 0 && bestRepDist > 0) {\n            let calculatedDist = bestNumReps * bestRepDist;\n\n            if (calculatedDist > remainingDistanceForMainSet * 0.80 && bestRepDist >= 200 && bestNumReps > 2) {\n                console.log(`DEBUG GENERAL_ENDURANCE: Conservative adjustment. Original reps: ${bestNumReps}x${bestRepDist}. Reducing reps by 1.`);\n                bestNumReps--;\n            }\n        }\n        // --- End of new conservative adjustment logic ---\n\n        if (bestNumReps > 0 && bestRepDist > 0) { // Ensure still valid after potential decrement\n            let restTime = 30;\n            if (bestRepDist >= 400) restTime = 45;\n            else if (bestRepDist >= 200) restTime = 30;\n            else if (bestRepDist >= 100) restTime = 20;\n            else restTime = 15;\n            sets.push(`${bestNumReps}x${bestRepDist} swim (${energySystem} focus) r${restTime}\"`);\n            mainSetTotalDist = bestNumReps * bestRepDist;\n        } else {\n             mainSetTotalDist = 0;\n        }\n        return { sets, mainSetTotalDist, targetPacePer100, descriptiveMessage: `General Endurance (${energySystem}) default set.` };\n    }\n};\n\nexport { mainSetDefinitions };\n","/**\n * Selects a warmup routine.\n * There's a 90% chance of selecting a warmup from the availableWarmups array,\n * and a 10% chance of selecting the noWarmupOption.\n *\n * @param {Array<Object>} availableWarmups - An array of warmup objects. Each object should have at least 'desc' and 'dist' properties.\n * @param {Object} noWarmupOption - An object representing the option of no warmup. Should have 'desc' and 'dist'.\n * @returns {Object} The selected warmup object.\n */\nfunction selectWarmup(availableWarmups, noWarmupOption) {\n    const useWarmup = Math.random() > 0.1; // 90% chance of including a warmup\n\n    if (useWarmup && availableWarmups && availableWarmups.length > 0) {\n        return availableWarmups[Math.floor(Math.random() * availableWarmups.length)];\n    } else {\n        return noWarmupOption;\n    }\n}\n\n/**\n * Selects a cooldown routine randomly from the available options.\n *\n * @param {Array<Object>} availableCooldowns - An array of cooldown objects. Each object should have at least 'desc' and 'dist' properties.\n * @returns {Object|null} The selected cooldown object, or null if no cooldowns are available or an error occurs.\n */\nfunction selectCooldown(availableCooldowns) {\n    if (availableCooldowns && availableCooldowns.length > 0) {\n        return availableCooldowns[Math.floor(Math.random() * availableCooldowns.length)];\n    }\n    return null; // Or return a default cooldown if preferred\n}\n\n/**\n * Generates the main set for a workout based on the energy system.\n *\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {string} workoutType - The type of workout (e.g., 'THRESHOLD_SUSTAINED').\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2').\n * @param {number} cssSecondsPer100 - Critical Swim Speed in seconds per 100 units.\n * @param {number} remainingDistanceForMainSet - The distance available for the main set.\n * @param {Object} mainSetDefinitions - Object mapping workout types to generator functions.\n * @returns {{ sets: string[], mainSetTotalDist: number, targetPacePer100: number, descriptiveMessage?: string }}\n *           An object containing the sets, total distance of the main set, target pace,\n *           and an optional descriptive message for unknown or default systems.\n */\nfunction generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions) {\n    let generator = mainSetDefinitions[workoutType];\n    let messageFromOuterScope;\n\n    if (!generator) {\n        messageFromOuterScope = `Unknown workout type: ${workoutType}. Defaulting to general endurance.`;\n        generator = mainSetDefinitions['GENERAL_ENDURANCE'];\n    }\n\n    // The generator function now expects energySystem as its first param.\n    let mainSetOutput = generator(energySystem, cssSecondsPer100, remainingDistanceForMainSet);\n\n    // Fallback condition: if the selected generator (not GENERAL_ENDURANCE) produced a very small set\n    if (mainSetOutput.mainSetTotalDist < 100 && remainingDistanceForMainSet > 100 && workoutType !== 'GENERAL_ENDURANCE') {\n        let fallbackMessage = \"(Fallback to general endurance due to low generated distance for selected workout type).\";\n\n        const originalMessage = mainSetOutput.descriptiveMessage; // Message from the original, tiny set\n        mainSetOutput = mainSetDefinitions['GENERAL_ENDURANCE'](energySystem, cssSecondsPer100, remainingDistanceForMainSet); // Rerun with GENERAL_ENDURANCE\n\n        // Construct descriptive message for fallback\n        let finalFallbackMessage = fallbackMessage;\n        if (originalMessage) { // If the original (tiny) set had a message\n            finalFallbackMessage = originalMessage + \" \" + fallbackMessage;\n        } else if (mainSetOutput.descriptiveMessage) { // If GENERAL_ENDURANCE set has a message\n            finalFallbackMessage = fallbackMessage + \" \" + mainSetOutput.descriptiveMessage;\n        }\n        mainSetOutput.descriptiveMessage = finalFallbackMessage;\n    } else {\n        // No fallback, or it was a direct 'GENERAL_ENDURANCE' call.\n        // If messageFromOuterScope was set (i.e., unknown workout type), it takes precedence\n        // unless the generator provided its own more specific message.\n        if (messageFromOuterScope) {\n            if (!mainSetOutput.descriptiveMessage) {\n                mainSetOutput.descriptiveMessage = messageFromOuterScope;\n            } else {\n                // If generator (GENERAL_ENDURANCE in this case) set a message, and it was an unknown type,\n                // combine or prioritize. For now, \"Unknown type\" message is more specific to the situation.\n                mainSetOutput.descriptiveMessage = messageFromOuterScope + \" Original generator message: \" + mainSetOutput.descriptiveMessage;\n            }\n        } else if (workoutType === 'GENERAL_ENDURANCE' && !mainSetOutput.descriptiveMessage) {\n            // If it was a direct 'GENERAL_ENDURANCE' call and the generator provided no message (unlikely with current data)\n            mainSetOutput.descriptiveMessage = `General Endurance (${energySystem}) set.`;\n        }\n    }\n    return mainSetOutput;\n}\n\nconst workoutFunctions = {\n    selectWarmup,\n    selectCooldown,\n    generateMainSet\n};\n\nexport default workoutFunctions;\n","import { warmups, noWarmupOption } from './data/warmups.js';\nimport { cooldowns } from './data/cooldowns.js';\nimport { mainSetDefinitions } from './data/mainSets.js';\nimport workoutComponents from './workoutComponents.js';\n\n// Helper function to convert MM:SS time string to total seconds per 100 units\nexport function parseCssTimeToSeconds(cssTimeStr) {\n    if (typeof cssTimeStr !== 'string') {\n        return null;\n    }\n    const parts = cssTimeStr.split(':');\n    if (parts.length === 2) {\n        const minutes = parseInt(parts[0], 10);\n        const seconds = parseFloat(parts[1]);\n        if (isNaN(minutes) || isNaN(seconds)) {\n            return null;\n        }\n        return minutes * 60 + seconds;\n    }\n    return null; // Invalid format\n}\n\n// Helper function to format total seconds per 100 units back to MM:SS\nexport function formatSecondsToMmSs(totalSeconds) {\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = (totalSeconds % 60).toFixed(1); // One decimal for seconds\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\n/**\n * Generates a random workout based on distance, energy system, and CSS time.\n * @param {number} totalDistanceYards - The approximate total desired workout distance in yards.\n * @param {string} energySystem - The energy system focus (e.g., 'EN1', 'EN2', 'EN3', 'SP1', 'SP2').\n * @param {string} cssTimeMmSs - The Critical Swim Speed in MM:SS format (e.g., '1:10').\n * @param {string} workoutType - The type of workout (e.g., 'threshold', 'anaerobic').\n * @returns {string} A formatted string describing the generated workout.\n */\nfunction generateWorkout(totalDistanceYards, energySystem, cssTimeMmSs, workoutType) {\n    const VERY_SHORT_WORKOUT_THRESHOLD = 600; // yards\n    // noWarmupOption is imported and can be used directly or cloned if description needs change for this specific case\n    // const noWarmupForShortOption = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n\n    const cssSecondsPer100 = parseCssTimeToSeconds(cssTimeMmSs);\n    if (cssSecondsPer100 === null) {\n        return \"Error: Invalid CSS time format. Please use MM:SS (e.g., '1:10').\";\n    }\n\n    let workoutDetails = [];\n    let currentDistanceCovered = 0;\n    const mainSetUnits = \"yards\"; // Assuming SCY based on sources unless specified otherwise [7, 9, 16]\n\n    // --- 1. Warmup Selection ---\n    let selectedWarmup;\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedWarmup = { ...noWarmupOption, desc: \"No warmup (short workout)\" };\n    } else {\n        // Re-introducing adaptive warmup logic for non-very-short workouts, with the specified modification\n        selectedWarmup = workoutComponents.selectWarmup(warmups, noWarmupOption); // Initial selection\n        if (selectedWarmup && selectedWarmup.dist > 0) {\n            const minMainSetThreshold = 200;\n            let maxAllowedWarmupDist = totalDistanceYards - minMainSetThreshold;\n\n            // Apply the more stringent percentage cap: 0.4 (40%) instead of 0.6\n            maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.4);\n\n            if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) {\n                 maxAllowedWarmupDist = totalDistanceYards * 0.4; // Fallback for small total distances if threshold makes it negative\n                                                                  // This 0.4 is different from the one above.\n                                                                  // Let's keep it as it was for this specific fallback:\n                 // maxAllowedWarmupDist = totalDistanceYards * 0.4; // This logic was for very small total distances\n                 // The logic from file before reset was:\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // This specific 0.4 should remain if it's for the negative guard, distinct from the primary cap.\n                 // Re-evaluating based on typical structure: the primary cap (now 0.4) applies first.\n                 // Then, specific conditions for very small distances adjust if it results in negative or too small.\n                 // The previous adaptive logic was:\n                 // maxAllowedWarmupDist = Math.min(maxAllowedWarmupDist, totalDistanceYards * 0.6); // This is now 0.4\n                 // if (maxAllowedWarmupDist < 0 && totalDistanceYards > 0) { maxAllowedWarmupDist = totalDistanceYards * 0.4; }\n                 // The above line (totalDistanceYards * 0.4) was a fallback if the (totalDistanceYards - minMainSetThreshold) was negative.\n                 // It seems the logic should be:\n                 // 1. max = total - threshold\n                 // 2. max = min(max, total * NEW_PRIMARY_CAP (0.4))\n                 // 3. if max < 0 (because total was small), max = total * FALLBACK_CAP_FOR_SMALL_TOTAL (e.g. 0.4 or 0.5)\n                 // 4. if max < 50 (and total >=50), max = 50.\n                 // Let's stick to the prompt's direct change on the percentage line first.\n                 // The other parts of the adaptive logic are:\n            } // End of the \"maxAllowedWarmupDist < 0\" check\n\n            if (maxAllowedWarmupDist < 50 && totalDistanceYards >= 50) {\n                 maxAllowedWarmupDist = 50;\n            }\n            // Add a final guard if maxAllowedWarmupDist somehow ended up negative (e.g. if totalDistanceYards was < 50 but > 0)\n            if (maxAllowedWarmupDist < 0) maxAllowedWarmupDist = 0;\n\n\n            if (selectedWarmup.dist > maxAllowedWarmupDist) {\n                const suitableWarmups = warmups.filter(wu => wu.dist <= maxAllowedWarmupDist && wu.dist > 0);\n                if (suitableWarmups.length > 0) {\n                    selectedWarmup = suitableWarmups[Math.floor(Math.random() * suitableWarmups.length)];\n                } else {\n                    selectedWarmup = noWarmupOption;\n                }\n            }\n        } else if (!selectedWarmup || selectedWarmup.dist === 0) {\n            selectedWarmup = noWarmupOption;\n        }\n    }\n\n    if (selectedWarmup) {\n        workoutDetails.push(`WU: ${selectedWarmup.desc}`);\n        currentDistanceCovered += selectedWarmup.dist;\n    }\n\n    // --- 2. Main Set Generation ---\n    let mainSetDescription = \"Main Set:\";\n    let sets = [];\n    let mainSetTotalDist = 0;\n    let targetPacePer100;\n    let remainingDistanceForMainSet = totalDistanceYards - currentDistanceCovered;\n\n    const mainSetResult = workoutComponents.generateMainSet(workoutType, energySystem, cssSecondsPer100, remainingDistanceForMainSet, mainSetDefinitions);\n    sets = mainSetResult.sets;\n    mainSetTotalDist = mainSetResult.mainSetTotalDist;\n    targetPacePer100 = mainSetResult.targetPacePer100;\n\n    if (mainSetResult.descriptiveMessage) {\n        mainSetDescription += ` ${mainSetResult.descriptiveMessage}`;\n    }\n\n    workoutDetails.push(mainSetDescription);\n    sets.forEach(set => {\n        workoutDetails.push(`  - ${set}`);\n    });\n    currentDistanceCovered += mainSetTotalDist;\n\n    // --- 3. Cool-down Selection ---\n    let selectedCooldown;\n    const noCooldownForShortOption = { desc: \"No cooldown (short workout)\", dist: 0, type: \"none\" };\n\n    if (totalDistanceYards < VERY_SHORT_WORKOUT_THRESHOLD) {\n        selectedCooldown = noCooldownForShortOption;\n    } else {\n        // Re-introducing adaptive cooldown logic with the specified modification\n        const generalNoCooldownOption = { desc: \"No cooldown\", dist: 0, type: \"none\" }; // General purpose\n        const distanceAfterMainSet = currentDistanceCovered;\n        const distanceToTarget = totalDistanceYards - distanceAfterMainSet;\n\n        if (distanceAfterMainSet >= totalDistanceYards - 50) {\n            selectedCooldown = generalNoCooldownOption;\n        } else {\n            // Apply the more stringent buffer: 25 instead of 75\n            const suitableCooldowns = cooldowns.filter(cd => cd.dist <= distanceToTarget + 25);\n\n            if (suitableCooldowns.length > 0) {\n                selectedCooldown = suitableCooldowns[Math.floor(Math.random() * suitableCooldowns.length)];\n            } else {\n                selectedCooldown = generalNoCooldownOption;\n            }\n        }\n    }\n\n    if (selectedCooldown) {\n        workoutDetails.push(`CD: ${selectedCooldown.desc}`);\n        currentDistanceCovered += selectedCooldown.dist;\n    }\n\n    // --- 4. Final Details ---\n    workoutDetails.push(`\\nTotal estimated distance: ${currentDistanceCovered} ${mainSetUnits}`);\n    workoutDetails.push(`CSS: ${cssTimeMmSs}`);\n    workoutDetails.push(`Workout Type: ${workoutType}`); // Added Workout Type\n    workoutDetails.push(`Energy System Focus: ${energySystem.toUpperCase()}`);\n    // A rough estimate of average pace, as true average depends on actual interval times and rest\n    workoutDetails.push(`Estimated AVG pace for main set: ${formatSecondsToMmSs(targetPacePer100)} / 100 ${mainSetUnits}`);\n\n    return workoutDetails.join('\\n');\n}\n\nexport { generateWorkout }; // Keep generateWorkout exported as it's likely the main API\n\n// --- Example Usage ---\n// console.log(generateWorkout(3000, 'EN3', '1:20'));\n// console.log(generateWorkout(2000, 'SP1', '1:10'));\n// console.log(generateWorkout(1500, 'SP2', '1:15'));\n// console.log(generateWorkout(2500, 'EN2', '1:12'));\n// console.log(generateWorkout(1800, 'EN1', '1:25'));","import _ from 'lodash';\n\nexport function getThingViaTimeLimit(key, secondsLeft, things, number = 1) {\n  let filteredThings = _.filter(things, thing => (thing[key] * number) <= secondsLeft);\n  return _.sample(filteredThings);\n}\n","import _ from 'lodash';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport swims from './data/swims.json';\n\nexport function repeatIntervals(secondsLeft, generatedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('repeatIntervals');\n\n  let seconds = 0;\n  let selectedSwim = getThingViaTimeLimit(\"time\", secondsLeft, swims);\n\n  // console.log(`repeating interval of type ${selectedSwim.name}`)\n\n  while (seconds + selectedSwim.time <= secondsLeft) {\n    let timeLeft = secondsLeft - seconds;\n    let maxRepetition = Math.floor(timeLeft / selectedSwim.time);\n\n    // attempt to keep max length 200 or less\n    maxRepetition = (maxRepetition * selectedSwim.interval) > 8 ?\n      Math.floor(8 / selectedSwim.interval) :\n      maxRepetition;\n\n    let intervalLength = _.random(1, maxRepetition);\n    let secondsToAdd = selectedSwim.time * intervalLength;\n\n    // console.log('adding swim', selectedSwim);\n\n    seconds += secondsToAdd;\n    generatedPattern.seconds += secondsToAdd;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: selectedSwim.interval * 25 * intervalLength,\n        number: 1,\n        time: secondsToAdd\n      }\n    );\n  }\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport swims from './data/swims.json';\n\nfunction getSwimByLength(secondsLeft, intervalLength, number) {\n  if (secondsLeft < 20 * number) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning null`);\n    return null;\n  }\n\n  let selectSwim;\n  let numThings = 0;\n\n  let filteredSwims = _.cloneDeep(swims);\n\n  while (!selectSwim) {\n    numThings++;\n    selectSwim = _.sample(filteredSwims);\n\n    if ((selectSwim.time * number) > secondsLeft) {\n      // console.log(`swim too long ${selectSwim.time} ${number} ${secondsLeft}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.time < selectSwim.time);\n      selectSwim = null;\n    } else if ((selectSwim.interval > intervalLength) || (intervalLength % selectSwim.interval !== 0)) {\n      // console.log(`interval too long ${selectSwim.interval} ${intervalLength}`);\n      filteredSwims = _.filter(filteredSwims, swim => swim.interval < selectSwim.interval);\n      selectSwim = null;\n    }\n\n    if (numThings > 20) {throw new Error(`fuck ${secondsLeft} ${intervalLength} ${number}`);}\n  }\n\n  return selectSwim;\n}\n\nfunction createSwimGroupCount(selectedPattern) {\n  return _.reduce(selectedPattern.pattern, (result, set) => {\n    let swimLength = set.interval[1];\n\n    if(!result[set.group]) {\n      result[set.group] = { number: 1, intervalLength: swimLength}\n    } else {\n      result[set.group].number += 1;\n      result[set.group].intervalLength = _.min([result[set.group].intervalLength, swimLength]);\n    }\n\n    return result;\n  }, {});\n}\n\nfunction mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount) {\n  let groupsWithSwim = {};\n\n  let sets = selectedPattern.pattern.length;\n\n  // Find a swim which will fit the pattern and the time remaining\n  _.forEach(groupsWithCount, (groupSize, key) => {\n    let intervalSize = selectedPattern.intervalSize;\n    let otherSetTimes = (sets - groupSize.number) * intervalSize * 20;\n    let selectedSwim = getSwimByLength(\n      secondsLeft - otherSetTimes,\n      groupSize.intervalLength,\n      groupSize.number * intervalSize\n    );\n\n    groupsWithSwim[key] = selectedSwim;\n  });\n\n  return groupsWithSwim;\n}\n\nexport function createSwimsFromPattern(secondsLeft, generatedPattern, selectedPattern) {\n  if (secondsLeft < 20) {\n    // console.log(`weird amount of time left: ${secondsLeft}. returning original pattern`);\n    return generatedPattern;\n  }\n\n  let groupsWithCount = createSwimGroupCount(selectedPattern);\n  let groupsWithSwim = mapSwimGroupsToSwims(secondsLeft, selectedPattern, groupsWithCount);\n\n  // once we've figured out which swims go where, generate the intervals\n  _.forEach(selectedPattern.pattern, pattern => {\n    let selectedSwim = groupsWithSwim[pattern.group];\n    let numIntervals = pattern.interval[0];\n    let swimLength = pattern.interval[1];\n\n    // Some swims are > 1 lap\n    let intervalMultiplier = swimLength / selectedSwim.interval;\n    let totalSwimTime = selectedSwim.time * numIntervals * (intervalMultiplier);\n\n    generatedPattern.seconds += totalSwimTime;\n    generatedPattern.intervals.push(\n      {\n        type: selectedSwim.name,\n        length: swimLength * 25,\n        number: numIntervals,\n        time: selectedSwim.time * intervalMultiplier\n      }\n    );\n  });\n\n  return generatedPattern;\n}\n","import _ from 'lodash';\nimport patterns from './data/patterns.json';\nimport { generateWorkout as generateCssWorkout } from './css.js';\nimport {getThingViaTimeLimit} from './getThingViaTimeLimit';\nimport {repeatIntervals} from './repeatIntervals';\nimport {createSwimsFromPattern} from './createPattern';\n\nfunction isSameType(intervalA, intervalB) {\n  return intervalA.type === intervalB.type\n    && intervalA.length === intervalB.length\n    && intervalA.time === intervalB.time;\n}\n\nfunction doubleLengths(pattern) {\n  // console.log('doubleLengths');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.length *= 2;\n    interval.time *= 2;\n  });\n}\n\nfunction doubleIntervals(pattern) {\n  // console.log('doubleIntervals');\n  pattern.seconds *= 2;\n\n  _.forEach(pattern.intervals, interval => {\n    interval.number *= 2;\n  });\n}\n\nfunction condenseWorkout(pattern) {\n  pattern.intervals = pattern.intervals.reduce((memo, interval) => {\n    let intervalsLength = memo.length;\n\n    if(intervalsLength === 0) {\n      memo.push(interval);\n      return memo;\n    }\n\n    if (isSameType(memo[intervalsLength -1], interval)) {\n      // console.log('condensing', memo[intervalsLength - 1], interval);\n      memo[intervalsLength - 1].number += interval.number;\n    } else {\n      memo.push(interval)\n    }\n\n    return memo;\n  }, []);\n\n  // console.log(pattern);\n\n  return pattern;\n}\n\nexport { generateCssWorkout };\n\nexport function generatePattern(seconds, generatedPattern = { seconds: 0, intervals: [] }) {\n  if (seconds < 20) {\n    // console.log(`weird amount of time left: ${seconds}. returning generated pattern`);\n    return generatedPattern;\n  }\n\n  // console.log('generatePattern');\n\n  let timeLeft = seconds - generatedPattern.seconds;\n  let selectedPattern = getThingViaTimeLimit(\"minTime\", timeLeft, patterns);\n\n  // console.log(`attempting to generate ${selectedPattern.name} pattern, which needs ${selectedPattern.minTime}, and has ${timeLeft}`)\n\n  if (selectedPattern.repeat === true) {\n    return repeatIntervals(timeLeft, generatedPattern);\n  } else {\n    return createSwimsFromPattern(timeLeft, generatedPattern, selectedPattern);\n  }\n}\n\nexport function generateWorkout(seconds) {\n  if (!seconds) { throw new Error('Give me time!'); }\n\n  let pattern = generatePattern(seconds);\n\n  while ((pattern.seconds < (seconds / 2)) && (pattern.seconds >= 20)) {\n    switch(_.random(1,3)) {\n      case 1:\n        doubleLengths(pattern);\n        break;\n      case 2:\n        doubleIntervals(pattern);\n        break;\n      case 3:\n        // add new workout to pattern\n        generatePattern(seconds, pattern);\n        break;\n    }\n  }\n\n  while (seconds - pattern.seconds >= 20) {\n    generatePattern(seconds, pattern);\n  }\n\n  pattern = condenseWorkout(pattern);\n\n  return pattern;\n}\n"],"names":["warmups","desc","dist","type","noWarmupOption","cooldowns","en1Distances","en2Distances","en3Distances","en3SecondaryDistances","sp1Distances","sp1Drills","sp2Distances","mainSetDefinitions","ENDURANCE_BASE","energySystem","cssSecondsPer100","remainingDistanceForMainSet","sets","mainSetTotalDist","targetPacePer100","Math","random","descriptiveMessage","concat","en1RepDist","numEn1Reps","shortEn1Dists","_i","_shortEn1Dists","length","floor","midEn1Dists","bestCurrentRepDist","bestCurrentNumReps","smallestRemainderSoFar","Infinity","_i2","_midEn1Dists","currentNumReps","maxRepsForDist","min","currentRemainder","selectedDist","j","en1Rest","push","THRESHOLD_SUSTAINED","en2RepDist","possibleDists","filter","d","numEn2Reps","max","en2Rest","THRESHOLD_DEVELOPMENT","en3Rest","en3RepDist","numEn3Reps","newRemainingDistance","secondaryDist","possibleSecDists","secondaryReps","fallbackDist","fallbackReps","SPEED_ENDURANCE","numBlocks","blockDistRemainingForReps","accumulatedDist","i","targetDistForCurrentBlock","easyBreakDist","addEasyBreakString","repDist","numReps","currentBlockActualRepDist","rest","drillType","fallbackRepDist","includes","fallbackNumReps","fDist","fReps","MAX_SPRINT","has50","has25","initialRepDist","initialAbsoluteMaxReps","numRepsForInitialDist","currentCalcDist","potentialReps50","potentialDist50","isSignificantUndershootWith25s","sp2Rest","GENERAL_ENDURANCE","generalDistances","bestRepDist","bestNumReps","smallestRemainder","_i3","_generalDistances","calculatedDist","console","log","restTime","selectWarmup","availableWarmups","useWarmup","selectCooldown","availableCooldowns","generateMainSet","workoutType","generator","messageFromOuterScope","mainSetOutput","fallbackMessage","originalMessage","finalFallbackMessage","workoutFunctions","parseCssTimeToSeconds","cssTimeStr","parts","split","minutes","parseInt","seconds","parseFloat","isNaN","formatSecondsToMmSs","totalSeconds","toFixed","generateWorkout","totalDistanceYards","cssTimeMmSs","VERY_SHORT_WORKOUT_THRESHOLD","workoutDetails","currentDistanceCovered","mainSetUnits","selectedWarmup","_objectSpread","workoutComponents","minMainSetThreshold","maxAllowedWarmupDist","suitableWarmups","wu","mainSetDescription","mainSetResult","forEach","set","selectedCooldown","noCooldownForShortOption","generalNoCooldownOption","distanceAfterMainSet","distanceToTarget","suitableCooldowns","cd","toUpperCase","join","getThingViaTimeLimit","key","secondsLeft","things","number","arguments","undefined","filteredThings","_","thing","sample","repeatIntervals","generatedPattern","selectedSwim","swims","time","timeLeft","maxRepetition","interval","intervalLength","secondsToAdd","intervals","name","getSwimByLength","selectSwim","numThings","filteredSwims","cloneDeep","swim","Error","createSwimGroupCount","selectedPattern","reduce","pattern","result","swimLength","group","mapSwimGroupsToSwims","groupsWithCount","groupsWithSwim","groupSize","intervalSize","otherSetTimes","createSwimsFromPattern","numIntervals","intervalMultiplier","totalSwimTime","isSameType","intervalA","intervalB","doubleLengths","doubleIntervals","condenseWorkout","memo","intervalsLength","generatePattern","patterns","repeat"],"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"}